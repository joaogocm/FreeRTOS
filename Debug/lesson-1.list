
lesson-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000208c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800221c  0800221c  0001221c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002294  08002294  00012294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800229c  0800229c  0001229c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080022a0  080022a0  000122a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  080022a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00003db8  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003dc4  20003dc4  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00010d0d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000282d  00000000  00000000  00030d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000071df  00000000  00000000  00033576  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  0003a758  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d90  00000000  00000000  0003b280  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000564f  00000000  00000000  0003c010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004bb2  00000000  00000000  0004165f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00046211  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002030  00000000  00000000  00046290  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002204 	.word	0x08002204

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08002204 	.word	0x08002204

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f81b 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f001 fdb8 	bl	8002078 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f001 fd8c 	bl	8002024 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20003d74 	.word	0x20003d74
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20003d74 	.word	0x20003d74

08000538 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800053a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000540:	041b      	lsls	r3, r3, #16
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000548:	0200      	lsls	r0, r0, #8
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000552:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	68dc      	ldr	r4, [r3, #12]
 8000562:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000566:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	2b04      	cmp	r3, #4
 800056e:	bf28      	it	cs
 8000570:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	f04f 0501 	mov.w	r5, #1
 8000578:	fa05 f303 	lsl.w	r3, r5, r3
 800057c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000580:	bf8c      	ite	hi
 8000582:	3c03      	subhi	r4, #3
 8000584:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000586:	4019      	ands	r1, r3
 8000588:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058a:	fa05 f404 	lsl.w	r4, r5, r4
 800058e:	3c01      	subs	r4, #1
 8000590:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000592:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	ea42 0201 	orr.w	r2, r2, r1
 8000598:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	bfad      	iteet	ge
 800059e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	f000 000f 	andlt.w	r0, r0, #15
 80005a6:	4b06      	ldrlt	r3, [pc, #24]	; (80005c0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	bfb5      	itete	lt
 80005ae:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000ed14 	.word	0xe000ed14

080005c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005c4:	2800      	cmp	r0, #0
 80005c6:	db08      	blt.n	80005da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c8:	0942      	lsrs	r2, r0, #5
 80005ca:	2301      	movs	r3, #1
 80005cc:	f000 001f 	and.w	r0, r0, #31
 80005d0:	fa03 f000 	lsl.w	r0, r3, r0
 80005d4:	4b01      	ldr	r3, [pc, #4]	; (80005dc <HAL_NVIC_EnableIRQ+0x18>)
 80005d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005da:	4770      	bx	lr
 80005dc:	e000e100 	.word	0xe000e100

080005e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005e4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005e6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000798 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005ec:	4a68      	ldr	r2, [pc, #416]	; (8000790 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005ee:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800079c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005f2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005f4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80005f6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005fa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80005fc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000600:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000604:	45b6      	cmp	lr, r6
 8000606:	f040 80ae 	bne.w	8000766 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800060a:	684c      	ldr	r4, [r1, #4]
 800060c:	f024 0710 	bic.w	r7, r4, #16
 8000610:	2f02      	cmp	r7, #2
 8000612:	d116      	bne.n	8000642 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000614:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000618:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800061c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000620:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000624:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000628:	f04f 0c0f 	mov.w	ip, #15
 800062c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000630:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000634:	690d      	ldr	r5, [r1, #16]
 8000636:	fa05 f50b 	lsl.w	r5, r5, fp
 800063a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800063e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000642:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000646:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000648:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800064c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000650:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000652:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000656:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800065a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800065e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000660:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000664:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000666:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800066a:	d811      	bhi.n	8000690 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800066c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800066e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000672:	68cf      	ldr	r7, [r1, #12]
 8000674:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000678:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800067c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800067e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000680:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000684:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000688:	409f      	lsls	r7, r3
 800068a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800068e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000690:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000692:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000694:	688f      	ldr	r7, [r1, #8]
 8000696:	fa07 f70a 	lsl.w	r7, r7, sl
 800069a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800069c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800069e:	00e5      	lsls	r5, r4, #3
 80006a0:	d561      	bpl.n	8000766 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	f04f 0b00 	mov.w	fp, #0
 80006a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80006aa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ae:	4d39      	ldr	r5, [pc, #228]	; (8000794 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006b4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006b8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006bc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006c0:	9703      	str	r7, [sp, #12]
 80006c2:	9f03      	ldr	r7, [sp, #12]
 80006c4:	f023 0703 	bic.w	r7, r3, #3
 80006c8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006cc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006d0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80006d4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80006dc:	f04f 0e0f 	mov.w	lr, #15
 80006e0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006e6:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ea:	d043      	beq.n	8000774 <HAL_GPIO_Init+0x194>
 80006ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006f0:	42a8      	cmp	r0, r5
 80006f2:	d041      	beq.n	8000778 <HAL_GPIO_Init+0x198>
 80006f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006f8:	42a8      	cmp	r0, r5
 80006fa:	d03f      	beq.n	800077c <HAL_GPIO_Init+0x19c>
 80006fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000700:	42a8      	cmp	r0, r5
 8000702:	d03d      	beq.n	8000780 <HAL_GPIO_Init+0x1a0>
 8000704:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000708:	42a8      	cmp	r0, r5
 800070a:	d03b      	beq.n	8000784 <HAL_GPIO_Init+0x1a4>
 800070c:	4548      	cmp	r0, r9
 800070e:	d03b      	beq.n	8000788 <HAL_GPIO_Init+0x1a8>
 8000710:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000714:	42a8      	cmp	r0, r5
 8000716:	d039      	beq.n	800078c <HAL_GPIO_Init+0x1ac>
 8000718:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800071c:	42a8      	cmp	r0, r5
 800071e:	bf14      	ite	ne
 8000720:	2508      	movne	r5, #8
 8000722:	2507      	moveq	r5, #7
 8000724:	fa05 f50c 	lsl.w	r5, r5, ip
 8000728:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800072c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800072e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000730:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000732:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000736:	bf0c      	ite	eq
 8000738:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800073a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800073c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800073e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000740:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000744:	bf0c      	ite	eq
 8000746:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000748:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800074a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800074c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800074e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000752:	bf0c      	ite	eq
 8000754:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000756:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000758:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800075a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800075c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800075e:	bf54      	ite	pl
 8000760:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000762:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000764:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000766:	3301      	adds	r3, #1
 8000768:	2b10      	cmp	r3, #16
 800076a:	f47f af44 	bne.w	80005f6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800076e:	b005      	add	sp, #20
 8000770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000774:	465d      	mov	r5, fp
 8000776:	e7d5      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000778:	2501      	movs	r5, #1
 800077a:	e7d3      	b.n	8000724 <HAL_GPIO_Init+0x144>
 800077c:	2502      	movs	r5, #2
 800077e:	e7d1      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000780:	2503      	movs	r5, #3
 8000782:	e7cf      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000784:	2504      	movs	r5, #4
 8000786:	e7cd      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000788:	2505      	movs	r5, #5
 800078a:	e7cb      	b.n	8000724 <HAL_GPIO_Init+0x144>
 800078c:	2506      	movs	r5, #6
 800078e:	e7c9      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000790:	40013c00 	.word	0x40013c00
 8000794:	40020000 	.word	0x40020000
 8000798:	40023800 	.word	0x40023800
 800079c:	40021400 	.word	0x40021400

080007a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007a0:	b10a      	cbz	r2, 80007a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007a2:	6181      	str	r1, [r0, #24]
 80007a4:	4770      	bx	lr
 80007a6:	0409      	lsls	r1, r1, #16
 80007a8:	e7fb      	b.n	80007a2 <HAL_GPIO_WritePin+0x2>

080007aa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80007aa:	6943      	ldr	r3, [r0, #20]
 80007ac:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80007b0:	bf08      	it	eq
 80007b2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80007b4:	6181      	str	r1, [r0, #24]
 80007b6:	4770      	bx	lr

080007b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007bc:	4604      	mov	r4, r0
 80007be:	b918      	cbnz	r0, 80007c8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80007c0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80007c2:	b002      	add	sp, #8
 80007c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007c8:	6803      	ldr	r3, [r0, #0]
 80007ca:	07dd      	lsls	r5, r3, #31
 80007cc:	d410      	bmi.n	80007f0 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007ce:	6823      	ldr	r3, [r4, #0]
 80007d0:	0798      	lsls	r0, r3, #30
 80007d2:	d458      	bmi.n	8000886 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007d4:	6823      	ldr	r3, [r4, #0]
 80007d6:	071a      	lsls	r2, r3, #28
 80007d8:	f100 809a 	bmi.w	8000910 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007dc:	6823      	ldr	r3, [r4, #0]
 80007de:	075b      	lsls	r3, r3, #29
 80007e0:	f100 80b8 	bmi.w	8000954 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007e4:	69a2      	ldr	r2, [r4, #24]
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	f040 8119 	bne.w	8000a1e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80007ec:	2000      	movs	r0, #0
 80007ee:	e7e8      	b.n	80007c2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007f0:	4ba6      	ldr	r3, [pc, #664]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
 80007f2:	689a      	ldr	r2, [r3, #8]
 80007f4:	f002 020c 	and.w	r2, r2, #12
 80007f8:	2a04      	cmp	r2, #4
 80007fa:	d007      	beq.n	800080c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007fc:	689a      	ldr	r2, [r3, #8]
 80007fe:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000802:	2a08      	cmp	r2, #8
 8000804:	d10a      	bne.n	800081c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	0259      	lsls	r1, r3, #9
 800080a:	d507      	bpl.n	800081c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800080c:	4b9f      	ldr	r3, [pc, #636]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	039a      	lsls	r2, r3, #14
 8000812:	d5dc      	bpl.n	80007ce <HAL_RCC_OscConfig+0x16>
 8000814:	6863      	ldr	r3, [r4, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1d9      	bne.n	80007ce <HAL_RCC_OscConfig+0x16>
 800081a:	e7d1      	b.n	80007c0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800081c:	6863      	ldr	r3, [r4, #4]
 800081e:	4d9b      	ldr	r5, [pc, #620]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
 8000820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000824:	d111      	bne.n	800084a <HAL_RCC_OscConfig+0x92>
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800082c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800082e:	f7ff fe7d 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000832:	4d96      	ldr	r5, [pc, #600]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000834:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000836:	682b      	ldr	r3, [r5, #0]
 8000838:	039b      	lsls	r3, r3, #14
 800083a:	d4c8      	bmi.n	80007ce <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800083c:	f7ff fe76 	bl	800052c <HAL_GetTick>
 8000840:	1b80      	subs	r0, r0, r6
 8000842:	2864      	cmp	r0, #100	; 0x64
 8000844:	d9f7      	bls.n	8000836 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000846:	2003      	movs	r0, #3
 8000848:	e7bb      	b.n	80007c2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800084a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800084e:	d104      	bne.n	800085a <HAL_RCC_OscConfig+0xa2>
 8000850:	682b      	ldr	r3, [r5, #0]
 8000852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000856:	602b      	str	r3, [r5, #0]
 8000858:	e7e5      	b.n	8000826 <HAL_RCC_OscConfig+0x6e>
 800085a:	682a      	ldr	r2, [r5, #0]
 800085c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000860:	602a      	str	r2, [r5, #0]
 8000862:	682a      	ldr	r2, [r5, #0]
 8000864:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000868:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1df      	bne.n	800082e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800086e:	f7ff fe5d 	bl	800052c <HAL_GetTick>
 8000872:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000874:	682b      	ldr	r3, [r5, #0]
 8000876:	039f      	lsls	r7, r3, #14
 8000878:	d5a9      	bpl.n	80007ce <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800087a:	f7ff fe57 	bl	800052c <HAL_GetTick>
 800087e:	1b80      	subs	r0, r0, r6
 8000880:	2864      	cmp	r0, #100	; 0x64
 8000882:	d9f7      	bls.n	8000874 <HAL_RCC_OscConfig+0xbc>
 8000884:	e7df      	b.n	8000846 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000886:	4b81      	ldr	r3, [pc, #516]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	f012 0f0c 	tst.w	r2, #12
 800088e:	d007      	beq.n	80008a0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000890:	689a      	ldr	r2, [r3, #8]
 8000892:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000896:	2a08      	cmp	r2, #8
 8000898:	d111      	bne.n	80008be <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	025e      	lsls	r6, r3, #9
 800089e:	d40e      	bmi.n	80008be <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008a0:	4b7a      	ldr	r3, [pc, #488]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	0795      	lsls	r5, r2, #30
 80008a6:	d502      	bpl.n	80008ae <HAL_RCC_OscConfig+0xf6>
 80008a8:	68e2      	ldr	r2, [r4, #12]
 80008aa:	2a01      	cmp	r2, #1
 80008ac:	d188      	bne.n	80007c0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	6921      	ldr	r1, [r4, #16]
 80008b2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008b6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80008ba:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008bc:	e78a      	b.n	80007d4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008be:	68e2      	ldr	r2, [r4, #12]
 80008c0:	4b73      	ldr	r3, [pc, #460]	; (8000a90 <HAL_RCC_OscConfig+0x2d8>)
 80008c2:	b1b2      	cbz	r2, 80008f2 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80008c4:	2201      	movs	r2, #1
 80008c6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008c8:	f7ff fe30 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008cc:	4d6f      	ldr	r5, [pc, #444]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008ce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	0798      	lsls	r0, r3, #30
 80008d4:	d507      	bpl.n	80008e6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	6922      	ldr	r2, [r4, #16]
 80008da:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80008de:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008e2:	602b      	str	r3, [r5, #0]
 80008e4:	e776      	b.n	80007d4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008e6:	f7ff fe21 	bl	800052c <HAL_GetTick>
 80008ea:	1b80      	subs	r0, r0, r6
 80008ec:	2802      	cmp	r0, #2
 80008ee:	d9ef      	bls.n	80008d0 <HAL_RCC_OscConfig+0x118>
 80008f0:	e7a9      	b.n	8000846 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80008f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008f4:	f7ff fe1a 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f8:	4d64      	ldr	r5, [pc, #400]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008fc:	682b      	ldr	r3, [r5, #0]
 80008fe:	0799      	lsls	r1, r3, #30
 8000900:	f57f af68 	bpl.w	80007d4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000904:	f7ff fe12 	bl	800052c <HAL_GetTick>
 8000908:	1b80      	subs	r0, r0, r6
 800090a:	2802      	cmp	r0, #2
 800090c:	d9f6      	bls.n	80008fc <HAL_RCC_OscConfig+0x144>
 800090e:	e79a      	b.n	8000846 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000910:	6962      	ldr	r2, [r4, #20]
 8000912:	4b60      	ldr	r3, [pc, #384]	; (8000a94 <HAL_RCC_OscConfig+0x2dc>)
 8000914:	b17a      	cbz	r2, 8000936 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800091a:	f7ff fe07 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800091e:	4d5b      	ldr	r5, [pc, #364]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000920:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000922:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000924:	079f      	lsls	r7, r3, #30
 8000926:	f53f af59 	bmi.w	80007dc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800092a:	f7ff fdff 	bl	800052c <HAL_GetTick>
 800092e:	1b80      	subs	r0, r0, r6
 8000930:	2802      	cmp	r0, #2
 8000932:	d9f6      	bls.n	8000922 <HAL_RCC_OscConfig+0x16a>
 8000934:	e787      	b.n	8000846 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8000936:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000938:	f7ff fdf8 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800093c:	4d53      	ldr	r5, [pc, #332]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800093e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000940:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000942:	0798      	lsls	r0, r3, #30
 8000944:	f57f af4a 	bpl.w	80007dc <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000948:	f7ff fdf0 	bl	800052c <HAL_GetTick>
 800094c:	1b80      	subs	r0, r0, r6
 800094e:	2802      	cmp	r0, #2
 8000950:	d9f6      	bls.n	8000940 <HAL_RCC_OscConfig+0x188>
 8000952:	e778      	b.n	8000846 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000954:	4b4d      	ldr	r3, [pc, #308]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
 8000956:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000958:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800095c:	d128      	bne.n	80009b0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	9201      	str	r2, [sp, #4]
 8000960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000962:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000966:	641a      	str	r2, [r3, #64]	; 0x40
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800096e:	9301      	str	r3, [sp, #4]
 8000970:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000972:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000974:	4d48      	ldr	r5, [pc, #288]	; (8000a98 <HAL_RCC_OscConfig+0x2e0>)
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	05d9      	lsls	r1, r3, #23
 800097a:	d51b      	bpl.n	80009b4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800097c:	68a3      	ldr	r3, [r4, #8]
 800097e:	4d43      	ldr	r5, [pc, #268]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
 8000980:	2b01      	cmp	r3, #1
 8000982:	d127      	bne.n	80009d4 <HAL_RCC_OscConfig+0x21c>
 8000984:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000986:	f043 0301 	orr.w	r3, r3, #1
 800098a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800098c:	f7ff fdce 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000990:	4d3e      	ldr	r5, [pc, #248]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000992:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000994:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000998:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800099a:	079b      	lsls	r3, r3, #30
 800099c:	d539      	bpl.n	8000a12 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800099e:	2e00      	cmp	r6, #0
 80009a0:	f43f af20 	beq.w	80007e4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009a4:	4a39      	ldr	r2, [pc, #228]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
 80009a6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	e719      	b.n	80007e4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80009b0:	2600      	movs	r6, #0
 80009b2:	e7df      	b.n	8000974 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009b4:	682b      	ldr	r3, [r5, #0]
 80009b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ba:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009bc:	f7ff fdb6 	bl	800052c <HAL_GetTick>
 80009c0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c2:	682b      	ldr	r3, [r5, #0]
 80009c4:	05da      	lsls	r2, r3, #23
 80009c6:	d4d9      	bmi.n	800097c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009c8:	f7ff fdb0 	bl	800052c <HAL_GetTick>
 80009cc:	1bc0      	subs	r0, r0, r7
 80009ce:	2802      	cmp	r0, #2
 80009d0:	d9f7      	bls.n	80009c2 <HAL_RCC_OscConfig+0x20a>
 80009d2:	e738      	b.n	8000846 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009d4:	2b05      	cmp	r3, #5
 80009d6:	d104      	bne.n	80009e2 <HAL_RCC_OscConfig+0x22a>
 80009d8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	672b      	str	r3, [r5, #112]	; 0x70
 80009e0:	e7d0      	b.n	8000984 <HAL_RCC_OscConfig+0x1cc>
 80009e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80009e4:	f022 0201 	bic.w	r2, r2, #1
 80009e8:	672a      	str	r2, [r5, #112]	; 0x70
 80009ea:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80009ec:	f022 0204 	bic.w	r2, r2, #4
 80009f0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1ca      	bne.n	800098c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80009f6:	f7ff fd99 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009fa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80009fe:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a00:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a02:	0798      	lsls	r0, r3, #30
 8000a04:	d5cb      	bpl.n	800099e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a06:	f7ff fd91 	bl	800052c <HAL_GetTick>
 8000a0a:	1bc0      	subs	r0, r0, r7
 8000a0c:	4540      	cmp	r0, r8
 8000a0e:	d9f7      	bls.n	8000a00 <HAL_RCC_OscConfig+0x248>
 8000a10:	e719      	b.n	8000846 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a12:	f7ff fd8b 	bl	800052c <HAL_GetTick>
 8000a16:	1bc0      	subs	r0, r0, r7
 8000a18:	4540      	cmp	r0, r8
 8000a1a:	d9bd      	bls.n	8000998 <HAL_RCC_OscConfig+0x1e0>
 8000a1c:	e713      	b.n	8000846 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a1e:	4d1b      	ldr	r5, [pc, #108]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
 8000a20:	68ab      	ldr	r3, [r5, #8]
 8000a22:	f003 030c 	and.w	r3, r3, #12
 8000a26:	2b08      	cmp	r3, #8
 8000a28:	f43f aeca 	beq.w	80007c0 <HAL_RCC_OscConfig+0x8>
 8000a2c:	4e1b      	ldr	r6, [pc, #108]	; (8000a9c <HAL_RCC_OscConfig+0x2e4>)
 8000a2e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a30:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a32:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a34:	d134      	bne.n	8000aa0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a36:	f7ff fd79 	bl	800052c <HAL_GetTick>
 8000a3a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a3c:	682b      	ldr	r3, [r5, #0]
 8000a3e:	0199      	lsls	r1, r3, #6
 8000a40:	d41e      	bmi.n	8000a80 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a42:	6a22      	ldr	r2, [r4, #32]
 8000a44:	69e3      	ldr	r3, [r4, #28]
 8000a46:	4313      	orrs	r3, r2
 8000a48:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a4a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a4e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a50:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a54:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a56:	4c0d      	ldr	r4, [pc, #52]	; (8000a8c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a58:	0852      	lsrs	r2, r2, #1
 8000a5a:	3a01      	subs	r2, #1
 8000a5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a60:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a62:	2301      	movs	r3, #1
 8000a64:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a66:	f7ff fd61 	bl	800052c <HAL_GetTick>
 8000a6a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a6c:	6823      	ldr	r3, [r4, #0]
 8000a6e:	019a      	lsls	r2, r3, #6
 8000a70:	f53f aebc 	bmi.w	80007ec <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a74:	f7ff fd5a 	bl	800052c <HAL_GetTick>
 8000a78:	1b40      	subs	r0, r0, r5
 8000a7a:	2802      	cmp	r0, #2
 8000a7c:	d9f6      	bls.n	8000a6c <HAL_RCC_OscConfig+0x2b4>
 8000a7e:	e6e2      	b.n	8000846 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a80:	f7ff fd54 	bl	800052c <HAL_GetTick>
 8000a84:	1bc0      	subs	r0, r0, r7
 8000a86:	2802      	cmp	r0, #2
 8000a88:	d9d8      	bls.n	8000a3c <HAL_RCC_OscConfig+0x284>
 8000a8a:	e6dc      	b.n	8000846 <HAL_RCC_OscConfig+0x8e>
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	42470000 	.word	0x42470000
 8000a94:	42470e80 	.word	0x42470e80
 8000a98:	40007000 	.word	0x40007000
 8000a9c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000aa0:	f7ff fd44 	bl	800052c <HAL_GetTick>
 8000aa4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000aa6:	682b      	ldr	r3, [r5, #0]
 8000aa8:	019b      	lsls	r3, r3, #6
 8000aaa:	f57f ae9f 	bpl.w	80007ec <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aae:	f7ff fd3d 	bl	800052c <HAL_GetTick>
 8000ab2:	1b00      	subs	r0, r0, r4
 8000ab4:	2802      	cmp	r0, #2
 8000ab6:	d9f6      	bls.n	8000aa6 <HAL_RCC_OscConfig+0x2ee>
 8000ab8:	e6c5      	b.n	8000846 <HAL_RCC_OscConfig+0x8e>
 8000aba:	bf00      	nop

08000abc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000abc:	4913      	ldr	r1, [pc, #76]	; (8000b0c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000abe:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ac0:	688b      	ldr	r3, [r1, #8]
 8000ac2:	f003 030c 	and.w	r3, r3, #12
 8000ac6:	2b04      	cmp	r3, #4
 8000ac8:	d003      	beq.n	8000ad2 <HAL_RCC_GetSysClockFreq+0x16>
 8000aca:	2b08      	cmp	r3, #8
 8000acc:	d003      	beq.n	8000ad6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ace:	4810      	ldr	r0, [pc, #64]	; (8000b10 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ad0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000ad2:	4810      	ldr	r0, [pc, #64]	; (8000b14 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ad4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ad6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ad8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ada:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000adc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ae0:	bf14      	ite	ne
 8000ae2:	480c      	ldrne	r0, [pc, #48]	; (8000b14 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ae4:	480a      	ldreq	r0, [pc, #40]	; (8000b10 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ae6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000aea:	bf18      	it	ne
 8000aec:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000aee:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000af2:	fba1 0100 	umull	r0, r1, r1, r0
 8000af6:	f7ff fb6b 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000afa:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <HAL_RCC_GetSysClockFreq+0x50>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b02:	3301      	adds	r3, #1
 8000b04:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b06:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b0a:	bd08      	pop	{r3, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	00f42400 	.word	0x00f42400
 8000b14:	007a1200 	.word	0x007a1200

08000b18 <HAL_RCC_ClockConfig>:
{
 8000b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b1c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b1e:	4604      	mov	r4, r0
 8000b20:	b910      	cbnz	r0, 8000b28 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b22:	2001      	movs	r0, #1
 8000b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b28:	4b44      	ldr	r3, [pc, #272]	; (8000c3c <HAL_RCC_ClockConfig+0x124>)
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	f002 020f 	and.w	r2, r2, #15
 8000b30:	428a      	cmp	r2, r1
 8000b32:	d328      	bcc.n	8000b86 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b34:	6821      	ldr	r1, [r4, #0]
 8000b36:	078f      	lsls	r7, r1, #30
 8000b38:	d42d      	bmi.n	8000b96 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b3a:	07c8      	lsls	r0, r1, #31
 8000b3c:	d440      	bmi.n	8000bc0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b3e:	4b3f      	ldr	r3, [pc, #252]	; (8000c3c <HAL_RCC_ClockConfig+0x124>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	f002 020f 	and.w	r2, r2, #15
 8000b46:	4295      	cmp	r5, r2
 8000b48:	d366      	bcc.n	8000c18 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b4a:	6822      	ldr	r2, [r4, #0]
 8000b4c:	0751      	lsls	r1, r2, #29
 8000b4e:	d46c      	bmi.n	8000c2a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b50:	0713      	lsls	r3, r2, #28
 8000b52:	d507      	bpl.n	8000b64 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b54:	4a3a      	ldr	r2, [pc, #232]	; (8000c40 <HAL_RCC_ClockConfig+0x128>)
 8000b56:	6921      	ldr	r1, [r4, #16]
 8000b58:	6893      	ldr	r3, [r2, #8]
 8000b5a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b5e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b62:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b64:	f7ff ffaa 	bl	8000abc <HAL_RCC_GetSysClockFreq>
 8000b68:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <HAL_RCC_ClockConfig+0x128>)
 8000b6a:	4a36      	ldr	r2, [pc, #216]	; (8000c44 <HAL_RCC_ClockConfig+0x12c>)
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b72:	5cd3      	ldrb	r3, [r2, r3]
 8000b74:	40d8      	lsrs	r0, r3
 8000b76:	4b34      	ldr	r3, [pc, #208]	; (8000c48 <HAL_RCC_ClockConfig+0x130>)
 8000b78:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f001 fa7c 	bl	8002078 <HAL_InitTick>
  return HAL_OK;
 8000b80:	2000      	movs	r0, #0
 8000b82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b86:	b2ca      	uxtb	r2, r1
 8000b88:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 030f 	and.w	r3, r3, #15
 8000b90:	4299      	cmp	r1, r3
 8000b92:	d1c6      	bne.n	8000b22 <HAL_RCC_ClockConfig+0xa>
 8000b94:	e7ce      	b.n	8000b34 <HAL_RCC_ClockConfig+0x1c>
 8000b96:	4b2a      	ldr	r3, [pc, #168]	; (8000c40 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b98:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b9c:	bf1e      	ittt	ne
 8000b9e:	689a      	ldrne	r2, [r3, #8]
 8000ba0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000ba4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ba6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000ba8:	bf42      	ittt	mi
 8000baa:	689a      	ldrmi	r2, [r3, #8]
 8000bac:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000bb0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	68a0      	ldr	r0, [r4, #8]
 8000bb6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000bba:	4302      	orrs	r2, r0
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	e7bc      	b.n	8000b3a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bc0:	6862      	ldr	r2, [r4, #4]
 8000bc2:	4b1f      	ldr	r3, [pc, #124]	; (8000c40 <HAL_RCC_ClockConfig+0x128>)
 8000bc4:	2a01      	cmp	r2, #1
 8000bc6:	d11d      	bne.n	8000c04 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bce:	d0a8      	beq.n	8000b22 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bd0:	4e1b      	ldr	r6, [pc, #108]	; (8000c40 <HAL_RCC_ClockConfig+0x128>)
 8000bd2:	68b3      	ldr	r3, [r6, #8]
 8000bd4:	f023 0303 	bic.w	r3, r3, #3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000bdc:	f7ff fca6 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000be0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000be4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000be6:	68b3      	ldr	r3, [r6, #8]
 8000be8:	6862      	ldr	r2, [r4, #4]
 8000bea:	f003 030c 	and.w	r3, r3, #12
 8000bee:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000bf2:	d0a4      	beq.n	8000b3e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bf4:	f7ff fc9a 	bl	800052c <HAL_GetTick>
 8000bf8:	1bc0      	subs	r0, r0, r7
 8000bfa:	4540      	cmp	r0, r8
 8000bfc:	d9f3      	bls.n	8000be6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000bfe:	2003      	movs	r0, #3
}
 8000c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c04:	1e91      	subs	r1, r2, #2
 8000c06:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c08:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c0a:	d802      	bhi.n	8000c12 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c0c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c10:	e7dd      	b.n	8000bce <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c12:	f013 0f02 	tst.w	r3, #2
 8000c16:	e7da      	b.n	8000bce <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c18:	b2ea      	uxtb	r2, r5
 8000c1a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	429d      	cmp	r5, r3
 8000c24:	f47f af7d 	bne.w	8000b22 <HAL_RCC_ClockConfig+0xa>
 8000c28:	e78f      	b.n	8000b4a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c2a:	4905      	ldr	r1, [pc, #20]	; (8000c40 <HAL_RCC_ClockConfig+0x128>)
 8000c2c:	68e0      	ldr	r0, [r4, #12]
 8000c2e:	688b      	ldr	r3, [r1, #8]
 8000c30:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c34:	4303      	orrs	r3, r0
 8000c36:	608b      	str	r3, [r1, #8]
 8000c38:	e78a      	b.n	8000b50 <HAL_RCC_ClockConfig+0x38>
 8000c3a:	bf00      	nop
 8000c3c:	40023c00 	.word	0x40023c00
 8000c40:	40023800 	.word	0x40023800
 8000c44:	0800227b 	.word	0x0800227b
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000c56:	5cd3      	ldrb	r3, [r2, r3]
 8000c58:	4a03      	ldr	r2, [pc, #12]	; (8000c68 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c5a:	6810      	ldr	r0, [r2, #0]
}
 8000c5c:	40d8      	lsrs	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	40023800 	.word	0x40023800
 8000c64:	0800228b 	.word	0x0800228b
 8000c68:	20000008 	.word	0x20000008

08000c6c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c6c:	230f      	movs	r3, #15
 8000c6e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_RCC_GetClockConfig+0x34>)
 8000c72:	689a      	ldr	r2, [r3, #8]
 8000c74:	f002 0203 	and.w	r2, r2, #3
 8000c78:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000c80:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000c82:	689a      	ldr	r2, [r3, #8]
 8000c84:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000c88:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	08db      	lsrs	r3, r3, #3
 8000c8e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000c92:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000c94:	4b03      	ldr	r3, [pc, #12]	; (8000ca4 <HAL_RCC_GetClockConfig+0x38>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f003 030f 	and.w	r3, r3, #15
 8000c9c:	600b      	str	r3, [r1, #0]
 8000c9e:	4770      	bx	lr
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40023c00 	.word	0x40023c00

08000ca8 <HAL_TIM_Base_MspInit>:
 8000ca8:	4770      	bx	lr

08000caa <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000caa:	6803      	ldr	r3, [r0, #0]
 8000cac:	68da      	ldr	r2, [r3, #12]
 8000cae:	f042 0201 	orr.w	r2, r2, #1
 8000cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000cba:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	681a      	ldrne	r2, [r3, #0]
 8000cc0:	f042 0201 	orrne.w	r2, r2, #1
 8000cc4:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	4770      	bx	lr

08000cca <HAL_TIM_OC_DelayElapsedCallback>:
 8000cca:	4770      	bx	lr

08000ccc <HAL_TIM_IC_CaptureCallback>:
 8000ccc:	4770      	bx	lr

08000cce <HAL_TIM_PWM_PulseFinishedCallback>:
 8000cce:	4770      	bx	lr

08000cd0 <HAL_TIM_TriggerCallback>:
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cd2:	6803      	ldr	r3, [r0, #0]
 8000cd4:	691a      	ldr	r2, [r3, #16]
 8000cd6:	0791      	lsls	r1, r2, #30
{
 8000cd8:	b510      	push	{r4, lr}
 8000cda:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cdc:	d50e      	bpl.n	8000cfc <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	0792      	lsls	r2, r2, #30
 8000ce2:	d50b      	bpl.n	8000cfc <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000ce4:	f06f 0202 	mvn.w	r2, #2
 8000ce8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cea:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000cec:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cee:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000cf0:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cf2:	d077      	beq.n	8000de4 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000cf4:	f7ff ffea 	bl	8000ccc <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	691a      	ldr	r2, [r3, #16]
 8000d00:	0750      	lsls	r0, r2, #29
 8000d02:	d510      	bpl.n	8000d26 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	0751      	lsls	r1, r2, #29
 8000d08:	d50d      	bpl.n	8000d26 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d0a:	f06f 0204 	mvn.w	r2, #4
 8000d0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d10:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d12:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d14:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d18:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d1a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d1c:	d068      	beq.n	8000df0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d1e:	f7ff ffd5 	bl	8000ccc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d22:	2300      	movs	r3, #0
 8000d24:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d26:	6823      	ldr	r3, [r4, #0]
 8000d28:	691a      	ldr	r2, [r3, #16]
 8000d2a:	0712      	lsls	r2, r2, #28
 8000d2c:	d50f      	bpl.n	8000d4e <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000d2e:	68da      	ldr	r2, [r3, #12]
 8000d30:	0710      	lsls	r0, r2, #28
 8000d32:	d50c      	bpl.n	8000d4e <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d34:	f06f 0208 	mvn.w	r2, #8
 8000d38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d3a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d3c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d3e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d40:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d42:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d44:	d05a      	beq.n	8000dfc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d46:	f7ff ffc1 	bl	8000ccc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d4e:	6823      	ldr	r3, [r4, #0]
 8000d50:	691a      	ldr	r2, [r3, #16]
 8000d52:	06d2      	lsls	r2, r2, #27
 8000d54:	d510      	bpl.n	8000d78 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	06d0      	lsls	r0, r2, #27
 8000d5a:	d50d      	bpl.n	8000d78 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000d5c:	f06f 0210 	mvn.w	r2, #16
 8000d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d62:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d64:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d66:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d6a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d6c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d6e:	d04b      	beq.n	8000e08 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d70:	f7ff ffac 	bl	8000ccc <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d74:	2300      	movs	r3, #0
 8000d76:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000d78:	6823      	ldr	r3, [r4, #0]
 8000d7a:	691a      	ldr	r2, [r3, #16]
 8000d7c:	07d1      	lsls	r1, r2, #31
 8000d7e:	d508      	bpl.n	8000d92 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	07d2      	lsls	r2, r2, #31
 8000d84:	d505      	bpl.n	8000d92 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000d86:	f06f 0201 	mvn.w	r2, #1
 8000d8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f001 f941 	bl	8002014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	691a      	ldr	r2, [r3, #16]
 8000d96:	0610      	lsls	r0, r2, #24
 8000d98:	d508      	bpl.n	8000dac <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000d9a:	68da      	ldr	r2, [r3, #12]
 8000d9c:	0611      	lsls	r1, r2, #24
 8000d9e:	d505      	bpl.n	8000dac <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000da0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000da6:	4620      	mov	r0, r4
 8000da8:	f000 f8b7 	bl	8000f1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000dac:	6823      	ldr	r3, [r4, #0]
 8000dae:	691a      	ldr	r2, [r3, #16]
 8000db0:	0652      	lsls	r2, r2, #25
 8000db2:	d508      	bpl.n	8000dc6 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	0650      	lsls	r0, r2, #25
 8000db8:	d505      	bpl.n	8000dc6 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000dba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000dbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	f7ff ff85 	bl	8000cd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000dc6:	6823      	ldr	r3, [r4, #0]
 8000dc8:	691a      	ldr	r2, [r3, #16]
 8000dca:	0691      	lsls	r1, r2, #26
 8000dcc:	d522      	bpl.n	8000e14 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	0692      	lsls	r2, r2, #26
 8000dd2:	d51f      	bpl.n	8000e14 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000dd4:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000dd8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000dda:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000de0:	f000 b89a 	b.w	8000f18 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000de4:	f7ff ff71 	bl	8000cca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000de8:	4620      	mov	r0, r4
 8000dea:	f7ff ff70 	bl	8000cce <HAL_TIM_PWM_PulseFinishedCallback>
 8000dee:	e783      	b.n	8000cf8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000df0:	f7ff ff6b 	bl	8000cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff ff6a 	bl	8000cce <HAL_TIM_PWM_PulseFinishedCallback>
 8000dfa:	e792      	b.n	8000d22 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000dfc:	f7ff ff65 	bl	8000cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff ff64 	bl	8000cce <HAL_TIM_PWM_PulseFinishedCallback>
 8000e06:	e7a0      	b.n	8000d4a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e08:	f7ff ff5f 	bl	8000cca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff ff5e 	bl	8000cce <HAL_TIM_PWM_PulseFinishedCallback>
 8000e12:	e7af      	b.n	8000d74 <HAL_TIM_IRQHandler+0xa2>
 8000e14:	bd10      	pop	{r4, pc}
	...

08000e18 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e18:	4a30      	ldr	r2, [pc, #192]	; (8000edc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8000e1a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	d012      	beq.n	8000e46 <TIM_Base_SetConfig+0x2e>
 8000e20:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e24:	d00f      	beq.n	8000e46 <TIM_Base_SetConfig+0x2e>
 8000e26:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	d00b      	beq.n	8000e46 <TIM_Base_SetConfig+0x2e>
 8000e2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d007      	beq.n	8000e46 <TIM_Base_SetConfig+0x2e>
 8000e36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	d003      	beq.n	8000e46 <TIM_Base_SetConfig+0x2e>
 8000e3e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d119      	bne.n	8000e7a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e46:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e4c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e4e:	4a23      	ldr	r2, [pc, #140]	; (8000edc <TIM_Base_SetConfig+0xc4>)
 8000e50:	4290      	cmp	r0, r2
 8000e52:	d029      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e54:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e58:	d026      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e5a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e5e:	4290      	cmp	r0, r2
 8000e60:	d022      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e66:	4290      	cmp	r0, r2
 8000e68:	d01e      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e6e:	4290      	cmp	r0, r2
 8000e70:	d01a      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e72:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e76:	4290      	cmp	r0, r2
 8000e78:	d016      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e7a:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <TIM_Base_SetConfig+0xc8>)
 8000e7c:	4290      	cmp	r0, r2
 8000e7e:	d013      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e84:	4290      	cmp	r0, r2
 8000e86:	d00f      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e88:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e8c:	4290      	cmp	r0, r2
 8000e8e:	d00b      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e90:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000e94:	4290      	cmp	r0, r2
 8000e96:	d007      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000e98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e9c:	4290      	cmp	r0, r2
 8000e9e:	d003      	beq.n	8000ea8 <TIM_Base_SetConfig+0x90>
 8000ea0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ea4:	4290      	cmp	r0, r2
 8000ea6:	d103      	bne.n	8000eb0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ea8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000eae:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000eb0:	694a      	ldr	r2, [r1, #20]
 8000eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000eb6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000eb8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000eba:	688b      	ldr	r3, [r1, #8]
 8000ebc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000ebe:	680b      	ldr	r3, [r1, #0]
 8000ec0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <TIM_Base_SetConfig+0xc4>)
 8000ec4:	4298      	cmp	r0, r3
 8000ec6:	d003      	beq.n	8000ed0 <TIM_Base_SetConfig+0xb8>
 8000ec8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ecc:	4298      	cmp	r0, r3
 8000ece:	d101      	bne.n	8000ed4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000ed0:	690b      	ldr	r3, [r1, #16]
 8000ed2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	6143      	str	r3, [r0, #20]
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40010000 	.word	0x40010000
 8000ee0:	40014000 	.word	0x40014000

08000ee4 <HAL_TIM_Base_Init>:
{
 8000ee4:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	b1a0      	cbz	r0, 8000f14 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000eea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000eee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ef2:	b91b      	cbnz	r3, 8000efc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000ef4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000ef8:	f7ff fed6 	bl	8000ca8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f02:	6820      	ldr	r0, [r4, #0]
 8000f04:	1d21      	adds	r1, r4, #4
 8000f06:	f7ff ff87 	bl	8000e18 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f10:	2000      	movs	r0, #0
 8000f12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f14:	2001      	movs	r0, #1
}
 8000f16:	bd10      	pop	{r4, pc}

08000f18 <HAL_TIMEx_CommutCallback>:
 8000f18:	4770      	bx	lr

08000f1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000f1a:	4770      	bx	lr

08000f1c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000f1c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000f1e:	f000 fd33 	bl	8001988 <vTaskStartScheduler>
  
  return osOK;
}
 8000f22:	2000      	movs	r0, #0
 8000f24:	bd08      	pop	{r3, pc}

08000f26 <osKernelSysTick>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000f26:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8000f2a:	b10b      	cbz	r3, 8000f30 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8000f2c:	f000 bd76 	b.w	8001a1c <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8000f30:	f000 bd6e 	b.w	8001a10 <xTaskGetTickCount>

08000f34 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000f34:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f36:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8000f3a:	8a02      	ldrh	r2, [r0, #16]
{
 8000f3c:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f3e:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8000f42:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8000f44:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8000f46:	bf14      	ite	ne
 8000f48:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000f4a:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f4c:	a803      	add	r0, sp, #12
 8000f4e:	9001      	str	r0, [sp, #4]
 8000f50:	9400      	str	r4, [sp, #0]
 8000f52:	4628      	mov	r0, r5
 8000f54:	f000 fbb6 	bl	80016c4 <xTaskCreate>
 8000f58:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8000f5a:	bf0c      	ite	eq
 8000f5c:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8000f5e:	2000      	movne	r0, #0
}
 8000f60:	b005      	add	sp, #20
 8000f62:	bd30      	pop	{r4, r5, pc}

08000f64 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000f64:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000f66:	2800      	cmp	r0, #0
 8000f68:	bf08      	it	eq
 8000f6a:	2001      	moveq	r0, #1
 8000f6c:	f000 fe68 	bl	8001c40 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000f70:	2000      	movs	r0, #0
 8000f72:	bd08      	pop	{r3, pc}

08000f74 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8000f74:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8000f76:	f000 fec1 	bl	8001cfc <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	bd08      	pop	{r3, pc}
	...

08000f80 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8000f80:	b508      	push	{r3, lr}
 8000f82:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8000f86:	b16b      	cbz	r3, 8000fa4 <osThreadResume+0x24>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8000f88:	f000 fcae 	bl	80018e8 <xTaskResumeFromISR>
 8000f8c:	2801      	cmp	r0, #1
 8000f8e:	d107      	bne.n	8000fa0 <osThreadResume+0x20>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <osThreadResume+0x2c>)
 8000f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	f3bf 8f4f 	dsb	sy
 8000f9c:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 8000fa4:	f000 fc5e 	bl	8001864 <vTaskResume>
 8000fa8:	e7fa      	b.n	8000fa0 <osThreadResume+0x20>
 8000faa:	bf00      	nop
 8000fac:	e000ed04 	.word	0xe000ed04

08000fb0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fb0:	f100 0308 	add.w	r3, r0, #8
 8000fb4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000fb6:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fba:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fbc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000fbe:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000fc0:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000fc2:	6003      	str	r3, [r0, #0]
 8000fc4:	4770      	bx	lr

08000fc6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	6103      	str	r3, [r0, #16]
 8000fca:	4770      	bx	lr

08000fcc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000fcc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000fce:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000fd0:	689a      	ldr	r2, [r3, #8]
 8000fd2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000fd4:	689a      	ldr	r2, [r3, #8]
 8000fd6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000fd8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000fda:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000fdc:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000fde:	3301      	adds	r3, #1
 8000fe0:	6003      	str	r3, [r0, #0]
 8000fe2:	4770      	bx	lr

08000fe4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000fe4:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000fe6:	1c53      	adds	r3, r2, #1
{
 8000fe8:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8000fea:	d10a      	bne.n	8001002 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000fec:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000fee:	685a      	ldr	r2, [r3, #4]
 8000ff0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000ff2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000ff4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000ff6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000ff8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000ffa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	6003      	str	r3, [r0, #0]
 8001000:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001002:	f100 0308 	add.w	r3, r0, #8
 8001006:	685c      	ldr	r4, [r3, #4]
 8001008:	6825      	ldr	r5, [r4, #0]
 800100a:	42aa      	cmp	r2, r5
 800100c:	d3ef      	bcc.n	8000fee <vListInsert+0xa>
 800100e:	4623      	mov	r3, r4
 8001010:	e7f9      	b.n	8001006 <vListInsert+0x22>

08001012 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001012:	6841      	ldr	r1, [r0, #4]
 8001014:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001016:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001018:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800101a:	6882      	ldr	r2, [r0, #8]
 800101c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800101e:	6859      	ldr	r1, [r3, #4]
 8001020:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001022:	bf08      	it	eq
 8001024:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001026:	2200      	movs	r2, #0
 8001028:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	3a01      	subs	r2, #1
 800102e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001030:	6818      	ldr	r0, [r3, #0]
}
 8001032:	4770      	bx	lr

08001034 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001034:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800103a:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <prvTaskExitError+0x3c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	3301      	adds	r3, #1
 8001040:	d008      	beq.n	8001054 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001046:	f383 8811 	msr	BASEPRI, r3
 800104a:	f3bf 8f6f 	isb	sy
 800104e:	f3bf 8f4f 	dsb	sy
 8001052:	e7fe      	b.n	8001052 <prvTaskExitError+0x1e>
 8001054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001058:	f383 8811 	msr	BASEPRI, r3
 800105c:	f3bf 8f6f 	isb	sy
 8001060:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001064:	9b01      	ldr	r3, [sp, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0fc      	beq.n	8001064 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800106a:	b002      	add	sp, #8
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000004 	.word	0x20000004

08001074 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001074:	4808      	ldr	r0, [pc, #32]	; (8001098 <prvPortStartFirstTask+0x24>)
 8001076:	6800      	ldr	r0, [r0, #0]
 8001078:	6800      	ldr	r0, [r0, #0]
 800107a:	f380 8808 	msr	MSP, r0
 800107e:	f04f 0000 	mov.w	r0, #0
 8001082:	f380 8814 	msr	CONTROL, r0
 8001086:	b662      	cpsie	i
 8001088:	b661      	cpsie	f
 800108a:	f3bf 8f4f 	dsb	sy
 800108e:	f3bf 8f6f 	isb	sy
 8001092:	df00      	svc	0
 8001094:	bf00      	nop
 8001096:	0000      	.short	0x0000
 8001098:	e000ed08 	.word	0xe000ed08

0800109c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800109c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80010ac <vPortEnableVFP+0x10>
 80010a0:	6801      	ldr	r1, [r0, #0]
 80010a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80010a6:	6001      	str	r1, [r0, #0]
 80010a8:	4770      	bx	lr
 80010aa:	0000      	.short	0x0000
 80010ac:	e000ed88 	.word	0xe000ed88

080010b0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80010b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010b4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <pxPortInitialiseStack+0x28>)
 80010ba:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80010be:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80010c2:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80010c6:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80010ca:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80010ce:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80010d2:	3844      	subs	r0, #68	; 0x44
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	08001035 	.word	0x08001035
 80010dc:	00000000 	.word	0x00000000

080010e0 <SVC_Handler>:
	__asm volatile (
 80010e0:	4b07      	ldr	r3, [pc, #28]	; (8001100 <pxCurrentTCBConst2>)
 80010e2:	6819      	ldr	r1, [r3, #0]
 80010e4:	6808      	ldr	r0, [r1, #0]
 80010e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010ea:	f380 8809 	msr	PSP, r0
 80010ee:	f3bf 8f6f 	isb	sy
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	f380 8811 	msr	BASEPRI, r0
 80010fa:	4770      	bx	lr
 80010fc:	f3af 8000 	nop.w

08001100 <pxCurrentTCBConst2>:
 8001100:	20003c48 	.word	0x20003c48

08001104 <vPortEnterCritical>:
 8001104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001108:	f383 8811 	msr	BASEPRI, r3
 800110c:	f3bf 8f6f 	isb	sy
 8001110:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8001114:	4a0a      	ldr	r2, [pc, #40]	; (8001140 <vPortEnterCritical+0x3c>)
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800111a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800111c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800111e:	d10d      	bne.n	800113c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <vPortEnterCritical+0x40>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001128:	d008      	beq.n	800113c <vPortEnterCritical+0x38>
 800112a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800112e:	f383 8811 	msr	BASEPRI, r3
 8001132:	f3bf 8f6f 	isb	sy
 8001136:	f3bf 8f4f 	dsb	sy
 800113a:	e7fe      	b.n	800113a <vPortEnterCritical+0x36>
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	20000004 	.word	0x20000004
 8001144:	e000ed04 	.word	0xe000ed04

08001148 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001148:	4a08      	ldr	r2, [pc, #32]	; (800116c <vPortExitCritical+0x24>)
 800114a:	6813      	ldr	r3, [r2, #0]
 800114c:	b943      	cbnz	r3, 8001160 <vPortExitCritical+0x18>
 800114e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001152:	f383 8811 	msr	BASEPRI, r3
 8001156:	f3bf 8f6f 	isb	sy
 800115a:	f3bf 8f4f 	dsb	sy
 800115e:	e7fe      	b.n	800115e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001160:	3b01      	subs	r3, #1
 8001162:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001164:	b90b      	cbnz	r3, 800116a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001166:	f383 8811 	msr	BASEPRI, r3
 800116a:	4770      	bx	lr
 800116c:	20000004 	.word	0x20000004

08001170 <PendSV_Handler>:
	__asm volatile
 8001170:	f3ef 8009 	mrs	r0, PSP
 8001174:	f3bf 8f6f 	isb	sy
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <pxCurrentTCBConst>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	f01e 0f10 	tst.w	lr, #16
 8001180:	bf08      	it	eq
 8001182:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001186:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800118a:	6010      	str	r0, [r2, #0]
 800118c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001190:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001194:	f380 8811 	msr	BASEPRI, r0
 8001198:	f3bf 8f4f 	dsb	sy
 800119c:	f3bf 8f6f 	isb	sy
 80011a0:	f000 fd72 	bl	8001c88 <vTaskSwitchContext>
 80011a4:	f04f 0000 	mov.w	r0, #0
 80011a8:	f380 8811 	msr	BASEPRI, r0
 80011ac:	bc09      	pop	{r0, r3}
 80011ae:	6819      	ldr	r1, [r3, #0]
 80011b0:	6808      	ldr	r0, [r1, #0]
 80011b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011b6:	f01e 0f10 	tst.w	lr, #16
 80011ba:	bf08      	it	eq
 80011bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80011c0:	f380 8809 	msr	PSP, r0
 80011c4:	f3bf 8f6f 	isb	sy
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w

080011d0 <pxCurrentTCBConst>:
 80011d0:	20003c48 	.word	0x20003c48

080011d4 <SysTick_Handler>:
{
 80011d4:	b508      	push	{r3, lr}
	__asm volatile
 80011d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011da:	f383 8811 	msr	BASEPRI, r3
 80011de:	f3bf 8f6f 	isb	sy
 80011e2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 80011e6:	f000 fc21 	bl	8001a2c <xTaskIncrementTick>
 80011ea:	b118      	cbz	r0, 80011f4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80011ec:	4b03      	ldr	r3, [pc, #12]	; (80011fc <SysTick_Handler+0x28>)
 80011ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011f2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80011f4:	2300      	movs	r3, #0
 80011f6:	f383 8811 	msr	BASEPRI, r3
 80011fa:	bd08      	pop	{r3, pc}
 80011fc:	e000ed04 	.word	0xe000ed04

08001200 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001202:	4909      	ldr	r1, [pc, #36]	; (8001228 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001204:	2300      	movs	r3, #0
 8001206:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001208:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <vPortSetupTimerInterrupt+0x2c>)
 800120c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	4906      	ldr	r1, [pc, #24]	; (8001230 <vPortSetupTimerInterrupt+0x30>)
 8001218:	3b01      	subs	r3, #1
 800121a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800121c:	2307      	movs	r3, #7
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010
 8001228:	e000e018 	.word	0xe000e018
 800122c:	20000008 	.word	0x20000008
 8001230:	e000e014 	.word	0xe000e014

08001234 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001234:	4b39      	ldr	r3, [pc, #228]	; (800131c <xPortStartScheduler+0xe8>)
 8001236:	4a3a      	ldr	r2, [pc, #232]	; (8001320 <xPortStartScheduler+0xec>)
{
 8001238:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800123a:	6819      	ldr	r1, [r3, #0]
 800123c:	4291      	cmp	r1, r2
 800123e:	d108      	bne.n	8001252 <xPortStartScheduler+0x1e>
	__asm volatile
 8001240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001244:	f383 8811 	msr	BASEPRI, r3
 8001248:	f3bf 8f6f 	isb	sy
 800124c:	f3bf 8f4f 	dsb	sy
 8001250:	e7fe      	b.n	8001250 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b33      	ldr	r3, [pc, #204]	; (8001324 <xPortStartScheduler+0xf0>)
 8001256:	429a      	cmp	r2, r3
 8001258:	d108      	bne.n	800126c <xPortStartScheduler+0x38>
 800125a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800125e:	f383 8811 	msr	BASEPRI, r3
 8001262:	f3bf 8f6f 	isb	sy
 8001266:	f3bf 8f4f 	dsb	sy
 800126a:	e7fe      	b.n	800126a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <xPortStartScheduler+0xf4>)
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	b2d2      	uxtb	r2, r2
 8001272:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001274:	22ff      	movs	r2, #255	; 0xff
 8001276:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001278:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800127a:	4a2c      	ldr	r2, [pc, #176]	; (800132c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001282:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001286:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800128a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800128c:	4b28      	ldr	r3, [pc, #160]	; (8001330 <xPortStartScheduler+0xfc>)
 800128e:	2207      	movs	r2, #7
 8001290:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001292:	2100      	movs	r1, #0
 8001294:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001298:	0600      	lsls	r0, r0, #24
 800129a:	f102 34ff 	add.w	r4, r2, #4294967295
 800129e:	d40d      	bmi.n	80012bc <xPortStartScheduler+0x88>
 80012a0:	b101      	cbz	r1, 80012a4 <xPortStartScheduler+0x70>
 80012a2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	2a03      	cmp	r2, #3
 80012a8:	d011      	beq.n	80012ce <xPortStartScheduler+0x9a>
 80012aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ae:	f383 8811 	msr	BASEPRI, r3
 80012b2:	f3bf 8f6f 	isb	sy
 80012b6:	f3bf 8f4f 	dsb	sy
 80012ba:	e7fe      	b.n	80012ba <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80012bc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80012c0:	0052      	lsls	r2, r2, #1
 80012c2:	b2d2      	uxtb	r2, r2
 80012c4:	f88d 2003 	strb.w	r2, [sp, #3]
 80012c8:	2101      	movs	r1, #1
 80012ca:	4622      	mov	r2, r4
 80012cc:	e7e2      	b.n	8001294 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80012ce:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80012d0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80012d4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80012d6:	9b01      	ldr	r3, [sp, #4]
 80012d8:	4a13      	ldr	r2, [pc, #76]	; (8001328 <xPortStartScheduler+0xf4>)
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <xPortStartScheduler+0x100>)
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80012e6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80012ee:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80012f0:	f7ff ff86 	bl	8001200 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80012f4:	4b10      	ldr	r3, [pc, #64]	; (8001338 <xPortStartScheduler+0x104>)
 80012f6:	2400      	movs	r4, #0
 80012f8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80012fa:	f7ff fecf 	bl	800109c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80012fe:	4a0f      	ldr	r2, [pc, #60]	; (800133c <xPortStartScheduler+0x108>)
 8001300:	6813      	ldr	r3, [r2, #0]
 8001302:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001306:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001308:	f7ff feb4 	bl	8001074 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800130c:	f000 fcbc 	bl	8001c88 <vTaskSwitchContext>
	prvTaskExitError();
 8001310:	f7ff fe90 	bl	8001034 <prvTaskExitError>
}
 8001314:	4620      	mov	r0, r4
 8001316:	b002      	add	sp, #8
 8001318:	bd10      	pop	{r4, pc}
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00
 8001320:	410fc271 	.word	0x410fc271
 8001324:	410fc270 	.word	0x410fc270
 8001328:	e000e400 	.word	0xe000e400
 800132c:	20000028 	.word	0x20000028
 8001330:	2000002c 	.word	0x2000002c
 8001334:	e000ed20 	.word	0xe000ed20
 8001338:	20000004 	.word	0x20000004
 800133c:	e000ef34 	.word	0xe000ef34

08001340 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001340:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d90e      	bls.n	8001366 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001348:	4a10      	ldr	r2, [pc, #64]	; (800138c <vPortValidateInterruptPriority+0x4c>)
 800134a:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800134c:	4a10      	ldr	r2, [pc, #64]	; (8001390 <vPortValidateInterruptPriority+0x50>)
 800134e:	7812      	ldrb	r2, [r2, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d908      	bls.n	8001366 <vPortValidateInterruptPriority+0x26>
 8001354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001358:	f383 8811 	msr	BASEPRI, r3
 800135c:	f3bf 8f6f 	isb	sy
 8001360:	f3bf 8f4f 	dsb	sy
 8001364:	e7fe      	b.n	8001364 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <vPortValidateInterruptPriority+0x54>)
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <vPortValidateInterruptPriority+0x58>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6812      	ldr	r2, [r2, #0]
 800136e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001372:	4293      	cmp	r3, r2
 8001374:	d908      	bls.n	8001388 <vPortValidateInterruptPriority+0x48>
 8001376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800137a:	f383 8811 	msr	BASEPRI, r3
 800137e:	f3bf 8f6f 	isb	sy
 8001382:	f3bf 8f4f 	dsb	sy
 8001386:	e7fe      	b.n	8001386 <vPortValidateInterruptPriority+0x46>
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	e000e3f0 	.word	0xe000e3f0
 8001390:	20000028 	.word	0x20000028
 8001394:	e000ed0c 	.word	0xe000ed0c
 8001398:	2000002c 	.word	0x2000002c

0800139c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800139c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <prvInsertBlockIntoFreeList+0x40>)
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	4282      	cmp	r2, r0
 80013a4:	d318      	bcc.n	80013d8 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80013a6:	685c      	ldr	r4, [r3, #4]
 80013a8:	1919      	adds	r1, r3, r4
 80013aa:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80013ac:	bf01      	itttt	eq
 80013ae:	6841      	ldreq	r1, [r0, #4]
 80013b0:	4618      	moveq	r0, r3
 80013b2:	1909      	addeq	r1, r1, r4
 80013b4:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80013b6:	6844      	ldr	r4, [r0, #4]
 80013b8:	1901      	adds	r1, r0, r4
 80013ba:	428a      	cmp	r2, r1
 80013bc:	d107      	bne.n	80013ce <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80013be:	4908      	ldr	r1, [pc, #32]	; (80013e0 <prvInsertBlockIntoFreeList+0x44>)
 80013c0:	6809      	ldr	r1, [r1, #0]
 80013c2:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013c4:	bf1f      	itttt	ne
 80013c6:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80013c8:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80013ca:	1909      	addne	r1, r1, r4
 80013cc:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80013ce:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80013d0:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80013d2:	bf18      	it	ne
 80013d4:	6018      	strne	r0, [r3, #0]
 80013d6:	bd10      	pop	{r4, pc}
 80013d8:	4613      	mov	r3, r2
 80013da:	e7e1      	b.n	80013a0 <prvInsertBlockIntoFreeList+0x4>
 80013dc:	20003c40 	.word	0x20003c40
 80013e0:	20000030 	.word	0x20000030

080013e4 <pvPortMalloc>:
{
 80013e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80013ea:	f000 fb09 	bl	8001a00 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80013ee:	493e      	ldr	r1, [pc, #248]	; (80014e8 <pvPortMalloc+0x104>)
 80013f0:	4d3e      	ldr	r5, [pc, #248]	; (80014ec <pvPortMalloc+0x108>)
 80013f2:	680b      	ldr	r3, [r1, #0]
 80013f4:	bb0b      	cbnz	r3, 800143a <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80013f6:	4a3e      	ldr	r2, [pc, #248]	; (80014f0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80013f8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80013fa:	bf1f      	itttt	ne
 80013fc:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80013fe:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001402:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001406:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001408:	bf14      	ite	ne
 800140a:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800140c:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001410:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001412:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001414:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001418:	4e36      	ldr	r6, [pc, #216]	; (80014f4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800141a:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800141c:	2000      	movs	r0, #0
 800141e:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001420:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001422:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001424:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001426:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001428:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800142a:	4b33      	ldr	r3, [pc, #204]	; (80014f8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800142c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800142e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <pvPortMalloc+0x118>)
 8001432:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001434:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001438:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800143a:	682f      	ldr	r7, [r5, #0]
 800143c:	4227      	tst	r7, r4
 800143e:	d116      	bne.n	800146e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001440:	2c00      	cmp	r4, #0
 8001442:	d041      	beq.n	80014c8 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001444:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001448:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800144a:	bf1c      	itt	ne
 800144c:	f023 0307 	bicne.w	r3, r3, #7
 8001450:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001452:	b163      	cbz	r3, 800146e <pvPortMalloc+0x8a>
 8001454:	4a29      	ldr	r2, [pc, #164]	; (80014fc <pvPortMalloc+0x118>)
 8001456:	6816      	ldr	r6, [r2, #0]
 8001458:	42b3      	cmp	r3, r6
 800145a:	4690      	mov	r8, r2
 800145c:	d807      	bhi.n	800146e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800145e:	4a25      	ldr	r2, [pc, #148]	; (80014f4 <pvPortMalloc+0x110>)
 8001460:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001462:	6868      	ldr	r0, [r5, #4]
 8001464:	4283      	cmp	r3, r0
 8001466:	d804      	bhi.n	8001472 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001468:	6809      	ldr	r1, [r1, #0]
 800146a:	428d      	cmp	r5, r1
 800146c:	d107      	bne.n	800147e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800146e:	2400      	movs	r4, #0
 8001470:	e02a      	b.n	80014c8 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001472:	682c      	ldr	r4, [r5, #0]
 8001474:	2c00      	cmp	r4, #0
 8001476:	d0f7      	beq.n	8001468 <pvPortMalloc+0x84>
 8001478:	462a      	mov	r2, r5
 800147a:	4625      	mov	r5, r4
 800147c:	e7f1      	b.n	8001462 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800147e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001480:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001482:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001484:	1ac2      	subs	r2, r0, r3
 8001486:	2a10      	cmp	r2, #16
 8001488:	d90f      	bls.n	80014aa <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800148a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800148c:	0741      	lsls	r1, r0, #29
 800148e:	d008      	beq.n	80014a2 <pvPortMalloc+0xbe>
 8001490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001494:	f383 8811 	msr	BASEPRI, r3
 8001498:	f3bf 8f6f 	isb	sy
 800149c:	f3bf 8f4f 	dsb	sy
 80014a0:	e7fe      	b.n	80014a0 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80014a2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80014a4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80014a6:	f7ff ff79 	bl	800139c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014aa:	4913      	ldr	r1, [pc, #76]	; (80014f8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014ac:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014ae:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014b0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80014b2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80014b4:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 80014b6:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80014ba:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80014be:	bf38      	it	cc
 80014c0:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80014c2:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80014c4:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80014c6:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80014c8:	f000 fb42 	bl	8001b50 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80014cc:	0763      	lsls	r3, r4, #29
 80014ce:	d008      	beq.n	80014e2 <pvPortMalloc+0xfe>
 80014d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014d4:	f383 8811 	msr	BASEPRI, r3
 80014d8:	f3bf 8f6f 	isb	sy
 80014dc:	f3bf 8f4f 	dsb	sy
 80014e0:	e7fe      	b.n	80014e0 <pvPortMalloc+0xfc>
}
 80014e2:	4620      	mov	r0, r4
 80014e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014e8:	20000030 	.word	0x20000030
 80014ec:	20003c34 	.word	0x20003c34
 80014f0:	20000034 	.word	0x20000034
 80014f4:	20003c40 	.word	0x20003c40
 80014f8:	20003c3c 	.word	0x20003c3c
 80014fc:	20003c38 	.word	0x20003c38

08001500 <vPortFree>:
{
 8001500:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001502:	4604      	mov	r4, r0
 8001504:	b370      	cbz	r0, 8001564 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001506:	4a18      	ldr	r2, [pc, #96]	; (8001568 <vPortFree+0x68>)
 8001508:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800150c:	6812      	ldr	r2, [r2, #0]
 800150e:	4213      	tst	r3, r2
 8001510:	d108      	bne.n	8001524 <vPortFree+0x24>
 8001512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001516:	f383 8811 	msr	BASEPRI, r3
 800151a:	f3bf 8f6f 	isb	sy
 800151e:	f3bf 8f4f 	dsb	sy
 8001522:	e7fe      	b.n	8001522 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001524:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001528:	b141      	cbz	r1, 800153c <vPortFree+0x3c>
 800152a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800152e:	f383 8811 	msr	BASEPRI, r3
 8001532:	f3bf 8f6f 	isb	sy
 8001536:	f3bf 8f4f 	dsb	sy
 800153a:	e7fe      	b.n	800153a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800153c:	ea23 0302 	bic.w	r3, r3, r2
 8001540:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001544:	f000 fa5c 	bl	8001a00 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001548:	4a08      	ldr	r2, [pc, #32]	; (800156c <vPortFree+0x6c>)
 800154a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800154e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001550:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001554:	440b      	add	r3, r1
 8001556:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001558:	f7ff ff20 	bl	800139c <prvInsertBlockIntoFreeList>
}
 800155c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001560:	f000 baf6 	b.w	8001b50 <xTaskResumeAll>
 8001564:	bd10      	pop	{r4, pc}
 8001566:	bf00      	nop
 8001568:	20003c34 	.word	0x20003c34
 800156c:	20003c38 	.word	0x20003c38

08001570 <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001570:	b940      	cbnz	r0, 8001584 <prvTaskIsTaskSuspended+0x14>
 8001572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001576:	f383 8811 	msr	BASEPRI, r3
 800157a:	f3bf 8f6f 	isb	sy
 800157e:	f3bf 8f4f 	dsb	sy
 8001582:	e7fe      	b.n	8001582 <prvTaskIsTaskSuspended+0x12>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001584:	6942      	ldr	r2, [r0, #20]
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <prvTaskIsTaskSuspended+0x30>)
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <prvTaskIsTaskSuspended+0x20>
	BaseType_t xReturn = pdFALSE;
 800158c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800158e:	4770      	bx	lr
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001590:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <prvTaskIsTaskSuspended+0x34>)
 8001594:	4298      	cmp	r0, r3
 8001596:	d0f9      	beq.n	800158c <prvTaskIsTaskSuspended+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8001598:	fab0 f080 	clz	r0, r0
 800159c:	0940      	lsrs	r0, r0, #5
		return xReturn;
 800159e:	4770      	bx	lr
 80015a0:	20003d44 	.word	0x20003d44
 80015a4:	20003d2c 	.word	0x20003d2c

080015a8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <prvResetNextTaskUnblockTime+0x1c>)
 80015aa:	6813      	ldr	r3, [r2, #0]
 80015ac:	6819      	ldr	r1, [r3, #0]
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <prvResetNextTaskUnblockTime+0x20>)
 80015b0:	b919      	cbnz	r1, 80015ba <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80015b2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80015ba:	6812      	ldr	r2, [r2, #0]
 80015bc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80015be:	68d2      	ldr	r2, [r2, #12]
 80015c0:	6852      	ldr	r2, [r2, #4]
 80015c2:	e7f8      	b.n	80015b6 <prvResetNextTaskUnblockTime+0xe>
 80015c4:	20003c4c 	.word	0x20003c4c
 80015c8:	20003d24 	.word	0x20003d24

080015cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80015cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80015ce:	4b1b      	ldr	r3, [pc, #108]	; (800163c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80015d0:	4e1b      	ldr	r6, [pc, #108]	; (8001640 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80015d2:	681d      	ldr	r5, [r3, #0]
{
 80015d4:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80015d6:	6830      	ldr	r0, [r6, #0]
 80015d8:	3004      	adds	r0, #4
{
 80015da:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80015dc:	f7ff fd19 	bl	8001012 <uxListRemove>
 80015e0:	4633      	mov	r3, r6
 80015e2:	b940      	cbnz	r0, 80015f6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80015e4:	6831      	ldr	r1, [r6, #0]
 80015e6:	4e17      	ldr	r6, [pc, #92]	; (8001644 <prvAddCurrentTaskToDelayedList+0x78>)
 80015e8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80015ea:	6832      	ldr	r2, [r6, #0]
 80015ec:	2001      	movs	r0, #1
 80015ee:	4088      	lsls	r0, r1
 80015f0:	ea22 0200 	bic.w	r2, r2, r0
 80015f4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80015f6:	1c62      	adds	r2, r4, #1
 80015f8:	d107      	bne.n	800160a <prvAddCurrentTaskToDelayedList+0x3e>
 80015fa:	b137      	cbz	r7, 800160a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80015fc:	6819      	ldr	r1, [r3, #0]
 80015fe:	4812      	ldr	r0, [pc, #72]	; (8001648 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001600:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001602:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001606:	f7ff bce1 	b.w	8000fcc <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800160a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800160c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800160e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001610:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001612:	d907      	bls.n	8001624 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <prvAddCurrentTaskToDelayedList+0x80>)
 8001616:	6810      	ldr	r0, [r2, #0]
 8001618:	6819      	ldr	r1, [r3, #0]
}
 800161a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800161e:	3104      	adds	r1, #4
 8001620:	f7ff bce0 	b.w	8000fe4 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <prvAddCurrentTaskToDelayedList+0x84>)
 8001626:	6810      	ldr	r0, [r2, #0]
 8001628:	6819      	ldr	r1, [r3, #0]
 800162a:	3104      	adds	r1, #4
 800162c:	f7ff fcda 	bl	8000fe4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <prvAddCurrentTaskToDelayedList+0x88>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001636:	bf38      	it	cc
 8001638:	601c      	strcc	r4, [r3, #0]
 800163a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800163c:	20003d6c 	.word	0x20003d6c
 8001640:	20003c48 	.word	0x20003c48
 8001644:	20003cf4 	.word	0x20003cf4
 8001648:	20003d44 	.word	0x20003d44
 800164c:	20003c50 	.word	0x20003c50
 8001650:	20003c4c 	.word	0x20003c4c
 8001654:	20003d24 	.word	0x20003d24

08001658 <prvIdleTask>:
{
 8001658:	b580      	push	{r7, lr}
				taskYIELD();
 800165a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80016c0 <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800165e:	4f14      	ldr	r7, [pc, #80]	; (80016b0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001660:	4c14      	ldr	r4, [pc, #80]	; (80016b4 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8001662:	4e15      	ldr	r6, [pc, #84]	; (80016b8 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001664:	6823      	ldr	r3, [r4, #0]
 8001666:	b963      	cbnz	r3, 8001682 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <prvIdleTask+0x64>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d9f8      	bls.n	8001662 <prvIdleTask+0xa>
				taskYIELD();
 8001670:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001674:	f8c8 3000 	str.w	r3, [r8]
 8001678:	f3bf 8f4f 	dsb	sy
 800167c:	f3bf 8f6f 	isb	sy
 8001680:	e7ee      	b.n	8001660 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8001682:	f7ff fd3f 	bl	8001104 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800168a:	1d28      	adds	r0, r5, #4
 800168c:	f7ff fcc1 	bl	8001012 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001690:	6833      	ldr	r3, [r6, #0]
 8001692:	3b01      	subs	r3, #1
 8001694:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	3b01      	subs	r3, #1
 800169a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800169c:	f7ff fd54 	bl	8001148 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80016a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80016a2:	f7ff ff2d 	bl	8001500 <vPortFree>
			vPortFree( pxTCB );
 80016a6:	4628      	mov	r0, r5
 80016a8:	f7ff ff2a 	bl	8001500 <vPortFree>
 80016ac:	e7da      	b.n	8001664 <prvIdleTask+0xc>
 80016ae:	bf00      	nop
 80016b0:	20003d58 	.word	0x20003d58
 80016b4:	20003ce4 	.word	0x20003ce4
 80016b8:	20003ce0 	.word	0x20003ce0
 80016bc:	20003c54 	.word	0x20003c54
 80016c0:	e000ed04 	.word	0xe000ed04

080016c4 <xTaskCreate>:
	{
 80016c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016c8:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80016cc:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016ce:	4650      	mov	r0, sl
	{
 80016d0:	460f      	mov	r7, r1
 80016d2:	4699      	mov	r9, r3
 80016d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80016d6:	f7ff fe85 	bl	80013e4 <pvPortMalloc>
			if( pxStack != NULL )
 80016da:	4605      	mov	r5, r0
 80016dc:	2800      	cmp	r0, #0
 80016de:	f000 8096 	beq.w	800180e <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80016e2:	2054      	movs	r0, #84	; 0x54
 80016e4:	f7ff fe7e 	bl	80013e4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80016e8:	4604      	mov	r4, r0
 80016ea:	2800      	cmp	r0, #0
 80016ec:	f000 808c 	beq.w	8001808 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80016f0:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80016f4:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80016f6:	4455      	add	r5, sl
 80016f8:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80016fa:	f025 0a07 	bic.w	sl, r5, #7
 80016fe:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001702:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001704:	7859      	ldrb	r1, [r3, #1]
 8001706:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800170a:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800170e:	b109      	cbz	r1, 8001714 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001710:	42bb      	cmp	r3, r7
 8001712:	d1f7      	bne.n	8001704 <xTaskCreate+0x40>
 8001714:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001716:	2d06      	cmp	r5, #6
 8001718:	bf28      	it	cs
 800171a:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800171c:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001720:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001722:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001724:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001726:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001728:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800172c:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001730:	f7ff fc49 	bl	8000fc6 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001734:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001738:	f104 0018 	add.w	r0, r4, #24
 800173c:	f7ff fc43 	bl	8000fc6 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001740:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001744:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001746:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001748:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800174a:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800174e:	464a      	mov	r2, r9
 8001750:	4641      	mov	r1, r8
 8001752:	4650      	mov	r0, sl
 8001754:	f7ff fcac 	bl	80010b0 <pxPortInitialiseStack>
 8001758:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800175a:	b106      	cbz	r6, 800175e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800175c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800175e:	f7ff fcd1 	bl	8001104 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001762:	4b32      	ldr	r3, [pc, #200]	; (800182c <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001764:	4e32      	ldr	r6, [pc, #200]	; (8001830 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800185c <xTaskCreate+0x198>
 800176c:	3201      	adds	r2, #1
 800176e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001770:	6835      	ldr	r5, [r6, #0]
 8001772:	2d00      	cmp	r5, #0
 8001774:	d14e      	bne.n	8001814 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001776:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d11d      	bne.n	80017ba <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800177e:	eb08 0005 	add.w	r0, r8, r5
 8001782:	3514      	adds	r5, #20
 8001784:	f7ff fc14 	bl	8000fb0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001788:	2d8c      	cmp	r5, #140	; 0x8c
 800178a:	d1f8      	bne.n	800177e <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 800178c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001860 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001790:	4d28      	ldr	r5, [pc, #160]	; (8001834 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001792:	4648      	mov	r0, r9
 8001794:	f7ff fc0c 	bl	8000fb0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001798:	4628      	mov	r0, r5
 800179a:	f7ff fc09 	bl	8000fb0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800179e:	4826      	ldr	r0, [pc, #152]	; (8001838 <xTaskCreate+0x174>)
 80017a0:	f7ff fc06 	bl	8000fb0 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80017a4:	4825      	ldr	r0, [pc, #148]	; (800183c <xTaskCreate+0x178>)
 80017a6:	f7ff fc03 	bl	8000fb0 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80017aa:	4825      	ldr	r0, [pc, #148]	; (8001840 <xTaskCreate+0x17c>)
 80017ac:	f7ff fc00 	bl	8000fb0 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80017b0:	4b24      	ldr	r3, [pc, #144]	; (8001844 <xTaskCreate+0x180>)
 80017b2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80017b6:	4b24      	ldr	r3, [pc, #144]	; (8001848 <xTaskCreate+0x184>)
 80017b8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80017ba:	4a24      	ldr	r2, [pc, #144]	; (800184c <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 80017bc:	4924      	ldr	r1, [pc, #144]	; (8001850 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 80017be:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80017c0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80017c2:	3301      	adds	r3, #1
 80017c4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80017c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017c8:	2501      	movs	r5, #1
 80017ca:	fa05 f302 	lsl.w	r3, r5, r2
 80017ce:	4303      	orrs	r3, r0
 80017d0:	2014      	movs	r0, #20
 80017d2:	600b      	str	r3, [r1, #0]
 80017d4:	fb00 8002 	mla	r0, r0, r2, r8
 80017d8:	4639      	mov	r1, r7
 80017da:	f7ff fbf7 	bl	8000fcc <vListInsertEnd>
	taskEXIT_CRITICAL();
 80017de:	f7ff fcb3 	bl	8001148 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80017e2:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <xTaskCreate+0x190>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b163      	cbz	r3, 8001802 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80017e8:	6833      	ldr	r3, [r6, #0]
 80017ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d207      	bcs.n	8001802 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <xTaskCreate+0x194>)
 80017f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f3bf 8f4f 	dsb	sy
 80017fe:	f3bf 8f6f 	isb	sy
	}
 8001802:	4628      	mov	r0, r5
 8001804:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001808:	4628      	mov	r0, r5
 800180a:	f7ff fe79 	bl	8001500 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800180e:	f04f 35ff 	mov.w	r5, #4294967295
 8001812:	e7f6      	b.n	8001802 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <xTaskCreate+0x190>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1ce      	bne.n	80017ba <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800181c:	6833      	ldr	r3, [r6, #0]
 800181e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001820:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001822:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001824:	bf98      	it	ls
 8001826:	6034      	strls	r4, [r6, #0]
 8001828:	e7c7      	b.n	80017ba <xTaskCreate+0xf6>
 800182a:	bf00      	nop
 800182c:	20003ce0 	.word	0x20003ce0
 8001830:	20003c48 	.word	0x20003c48
 8001834:	20003d0c 	.word	0x20003d0c
 8001838:	20003d2c 	.word	0x20003d2c
 800183c:	20003d58 	.word	0x20003d58
 8001840:	20003d44 	.word	0x20003d44
 8001844:	20003c4c 	.word	0x20003c4c
 8001848:	20003c50 	.word	0x20003c50
 800184c:	20003cf0 	.word	0x20003cf0
 8001850:	20003cf4 	.word	0x20003cf4
 8001854:	20003d40 	.word	0x20003d40
 8001858:	e000ed04 	.word	0xe000ed04
 800185c:	20003c54 	.word	0x20003c54
 8001860:	20003cf8 	.word	0x20003cf8

08001864 <vTaskResume>:
	{
 8001864:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 8001866:	4604      	mov	r4, r0
 8001868:	b940      	cbnz	r0, 800187c <vTaskResume+0x18>
 800186a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186e:	f383 8811 	msr	BASEPRI, r3
 8001872:	f3bf 8f6f 	isb	sy
 8001876:	f3bf 8f4f 	dsb	sy
 800187a:	e7fe      	b.n	800187a <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 800187c:	4d16      	ldr	r5, [pc, #88]	; (80018d8 <vTaskResume+0x74>)
 800187e:	682b      	ldr	r3, [r5, #0]
 8001880:	4298      	cmp	r0, r3
 8001882:	d028      	beq.n	80018d6 <vTaskResume+0x72>
			taskENTER_CRITICAL();
 8001884:	f7ff fc3e 	bl	8001104 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001888:	4620      	mov	r0, r4
 800188a:	f7ff fe71 	bl	8001570 <prvTaskIsTaskSuspended>
 800188e:	b1f0      	cbz	r0, 80018ce <vTaskResume+0x6a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001890:	1d26      	adds	r6, r4, #4
 8001892:	4630      	mov	r0, r6
 8001894:	f7ff fbbd 	bl	8001012 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001898:	4910      	ldr	r1, [pc, #64]	; (80018dc <vTaskResume+0x78>)
 800189a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800189c:	6808      	ldr	r0, [r1, #0]
 800189e:	2301      	movs	r3, #1
 80018a0:	4093      	lsls	r3, r2
 80018a2:	4303      	orrs	r3, r0
 80018a4:	600b      	str	r3, [r1, #0]
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <vTaskResume+0x7c>)
 80018a8:	2014      	movs	r0, #20
 80018aa:	fb00 3002 	mla	r0, r0, r2, r3
 80018ae:	4631      	mov	r1, r6
 80018b0:	f7ff fb8c 	bl	8000fcc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80018b4:	682b      	ldr	r3, [r5, #0]
 80018b6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d307      	bcc.n	80018ce <vTaskResume+0x6a>
						taskYIELD_IF_USING_PREEMPTION();
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <vTaskResume+0x80>)
 80018c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018c4:	601a      	str	r2, [r3, #0]
 80018c6:	f3bf 8f4f 	dsb	sy
 80018ca:	f3bf 8f6f 	isb	sy
	}
 80018ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 80018d2:	f7ff bc39 	b.w	8001148 <vPortExitCritical>
 80018d6:	bd70      	pop	{r4, r5, r6, pc}
 80018d8:	20003c48 	.word	0x20003c48
 80018dc:	20003cf4 	.word	0x20003cf4
 80018e0:	20003c54 	.word	0x20003c54
 80018e4:	e000ed04 	.word	0xe000ed04

080018e8 <xTaskResumeFromISR>:
	{
 80018e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 80018ea:	4605      	mov	r5, r0
 80018ec:	b940      	cbnz	r0, 8001900 <xTaskResumeFromISR+0x18>
 80018ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f2:	f383 8811 	msr	BASEPRI, r3
 80018f6:	f3bf 8f6f 	isb	sy
 80018fa:	f3bf 8f4f 	dsb	sy
 80018fe:	e7fe      	b.n	80018fe <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001900:	f7ff fd1e 	bl	8001340 <vPortValidateInterruptPriority>
	__asm volatile
 8001904:	f3ef 8611 	mrs	r6, BASEPRI
 8001908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800190c:	f383 8811 	msr	BASEPRI, r3
 8001910:	f3bf 8f6f 	isb	sy
 8001914:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001918:	4628      	mov	r0, r5
 800191a:	f7ff fe29 	bl	8001570 <prvTaskIsTaskSuspended>
 800191e:	b338      	cbz	r0, 8001970 <xTaskResumeFromISR+0x88>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001920:	4b14      	ldr	r3, [pc, #80]	; (8001974 <xTaskResumeFromISR+0x8c>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	b9eb      	cbnz	r3, 8001962 <xTaskResumeFromISR+0x7a>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <xTaskResumeFromISR+0x90>)
 8001928:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800192e:	1d2f      	adds	r7, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001930:	4284      	cmp	r4, r0
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001932:	4638      	mov	r0, r7
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001934:	bf34      	ite	cc
 8001936:	2400      	movcc	r4, #0
 8001938:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800193a:	f7ff fb6a 	bl	8001012 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800193e:	490f      	ldr	r1, [pc, #60]	; (800197c <xTaskResumeFromISR+0x94>)
 8001940:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001942:	6808      	ldr	r0, [r1, #0]
 8001944:	2301      	movs	r3, #1
 8001946:	4093      	lsls	r3, r2
 8001948:	4303      	orrs	r3, r0
 800194a:	600b      	str	r3, [r1, #0]
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <xTaskResumeFromISR+0x98>)
 800194e:	2014      	movs	r0, #20
 8001950:	4639      	mov	r1, r7
 8001952:	fb00 3002 	mla	r0, r0, r2, r3
 8001956:	f7ff fb39 	bl	8000fcc <vListInsertEnd>
	__asm volatile
 800195a:	f386 8811 	msr	BASEPRI, r6
	}
 800195e:	4620      	mov	r0, r4
 8001960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8001962:	f105 0118 	add.w	r1, r5, #24
 8001966:	4807      	ldr	r0, [pc, #28]	; (8001984 <xTaskResumeFromISR+0x9c>)
 8001968:	f7ff fb30 	bl	8000fcc <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 800196c:	2400      	movs	r4, #0
 800196e:	e7f4      	b.n	800195a <xTaskResumeFromISR+0x72>
 8001970:	4604      	mov	r4, r0
 8001972:	e7f2      	b.n	800195a <xTaskResumeFromISR+0x72>
 8001974:	20003cec 	.word	0x20003cec
 8001978:	20003c48 	.word	0x20003c48
 800197c:	20003cf4 	.word	0x20003cf4
 8001980:	20003c54 	.word	0x20003c54
 8001984:	20003d2c 	.word	0x20003d2c

08001988 <vTaskStartScheduler>:
{
 8001988:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <vTaskStartScheduler+0x60>)
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	2400      	movs	r4, #0
 8001990:	9400      	str	r4, [sp, #0]
 8001992:	4623      	mov	r3, r4
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	4915      	ldr	r1, [pc, #84]	; (80019ec <vTaskStartScheduler+0x64>)
 8001998:	4815      	ldr	r0, [pc, #84]	; (80019f0 <vTaskStartScheduler+0x68>)
 800199a:	f7ff fe93 	bl	80016c4 <xTaskCreate>
	if( xReturn == pdPASS )
 800199e:	2801      	cmp	r0, #1
 80019a0:	d114      	bne.n	80019cc <vTaskStartScheduler+0x44>
	__asm volatile
 80019a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a6:	f383 8811 	msr	BASEPRI, r3
 80019aa:	f3bf 8f6f 	isb	sy
 80019ae:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <vTaskStartScheduler+0x6c>)
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80019ba:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <vTaskStartScheduler+0x70>)
 80019bc:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80019be:	4b0f      	ldr	r3, [pc, #60]	; (80019fc <vTaskStartScheduler+0x74>)
 80019c0:	601c      	str	r4, [r3, #0]
}
 80019c2:	b002      	add	sp, #8
 80019c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80019c8:	f7ff bc34 	b.w	8001234 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80019cc:	3001      	adds	r0, #1
 80019ce:	d108      	bne.n	80019e2 <vTaskStartScheduler+0x5a>
 80019d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d4:	f383 8811 	msr	BASEPRI, r3
 80019d8:	f3bf 8f6f 	isb	sy
 80019dc:	f3bf 8f4f 	dsb	sy
 80019e0:	e7fe      	b.n	80019e0 <vTaskStartScheduler+0x58>
}
 80019e2:	b002      	add	sp, #8
 80019e4:	bd10      	pop	{r4, pc}
 80019e6:	bf00      	nop
 80019e8:	20003d20 	.word	0x20003d20
 80019ec:	08002258 	.word	0x08002258
 80019f0:	08001659 	.word	0x08001659
 80019f4:	20003d24 	.word	0x20003d24
 80019f8:	20003d40 	.word	0x20003d40
 80019fc:	20003d6c 	.word	0x20003d6c

08001a00 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001a00:	4a02      	ldr	r2, [pc, #8]	; (8001a0c <vTaskSuspendAll+0xc>)
 8001a02:	6813      	ldr	r3, [r2, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20003cec 	.word	0x20003cec

08001a10 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8001a10:	4b01      	ldr	r3, [pc, #4]	; (8001a18 <xTaskGetTickCount+0x8>)
 8001a12:	6818      	ldr	r0, [r3, #0]
}
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20003d6c 	.word	0x20003d6c

08001a1c <xTaskGetTickCountFromISR>:
{
 8001a1c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001a1e:	f7ff fc8f 	bl	8001340 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8001a22:	4b01      	ldr	r3, [pc, #4]	; (8001a28 <xTaskGetTickCountFromISR+0xc>)
 8001a24:	6818      	ldr	r0, [r3, #0]
}
 8001a26:	bd08      	pop	{r3, pc}
 8001a28:	20003d6c 	.word	0x20003d6c

08001a2c <xTaskIncrementTick>:
{
 8001a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001a30:	4b3c      	ldr	r3, [pc, #240]	; (8001b24 <xTaskIncrementTick+0xf8>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d153      	bne.n	8001ae0 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001a38:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <xTaskIncrementTick+0xfc>)
 8001a3a:	681c      	ldr	r4, [r3, #0]
 8001a3c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001a3e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001a40:	b9bc      	cbnz	r4, 8001a72 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001a42:	4b3a      	ldr	r3, [pc, #232]	; (8001b2c <xTaskIncrementTick+0x100>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	b142      	cbz	r2, 8001a5c <xTaskIncrementTick+0x30>
 8001a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a4e:	f383 8811 	msr	BASEPRI, r3
 8001a52:	f3bf 8f6f 	isb	sy
 8001a56:	f3bf 8f4f 	dsb	sy
 8001a5a:	e7fe      	b.n	8001a5a <xTaskIncrementTick+0x2e>
 8001a5c:	4a34      	ldr	r2, [pc, #208]	; (8001b30 <xTaskIncrementTick+0x104>)
 8001a5e:	6819      	ldr	r1, [r3, #0]
 8001a60:	6810      	ldr	r0, [r2, #0]
 8001a62:	6018      	str	r0, [r3, #0]
 8001a64:	6011      	str	r1, [r2, #0]
 8001a66:	4a33      	ldr	r2, [pc, #204]	; (8001b34 <xTaskIncrementTick+0x108>)
 8001a68:	6813      	ldr	r3, [r2, #0]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	f7ff fd9b 	bl	80015a8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001a72:	4d31      	ldr	r5, [pc, #196]	; (8001b38 <xTaskIncrementTick+0x10c>)
 8001a74:	4f31      	ldr	r7, [pc, #196]	; (8001b3c <xTaskIncrementTick+0x110>)
 8001a76:	682b      	ldr	r3, [r5, #0]
 8001a78:	429c      	cmp	r4, r3
 8001a7a:	f04f 0b00 	mov.w	fp, #0
 8001a7e:	d33e      	bcc.n	8001afe <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a80:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001b2c <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001a84:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001b4c <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a88:	f8d8 2000 	ldr.w	r2, [r8]
 8001a8c:	6812      	ldr	r2, [r2, #0]
 8001a8e:	bb72      	cbnz	r2, 8001aee <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a90:	f04f 32ff 	mov.w	r2, #4294967295
 8001a94:	602a      	str	r2, [r5, #0]
					break;
 8001a96:	e032      	b.n	8001afe <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001a98:	f106 0a04 	add.w	sl, r6, #4
 8001a9c:	4650      	mov	r0, sl
 8001a9e:	f7ff fab8 	bl	8001012 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001aa2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001aa4:	b119      	cbz	r1, 8001aae <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001aa6:	f106 0018 	add.w	r0, r6, #24
 8001aaa:	f7ff fab2 	bl	8001012 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001aae:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001ab0:	f8d9 3000 	ldr.w	r3, [r9]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	fa02 f100 	lsl.w	r1, r2, r0
 8001aba:	4319      	orrs	r1, r3
 8001abc:	4b20      	ldr	r3, [pc, #128]	; (8001b40 <xTaskIncrementTick+0x114>)
 8001abe:	f8c9 1000 	str.w	r1, [r9]
 8001ac2:	f04f 0e14 	mov.w	lr, #20
 8001ac6:	4651      	mov	r1, sl
 8001ac8:	fb0e 3000 	mla	r0, lr, r0, r3
 8001acc:	f7ff fa7e 	bl	8000fcc <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ad0:	6838      	ldr	r0, [r7, #0]
 8001ad2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001ad4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001ad6:	4291      	cmp	r1, r2
 8001ad8:	bf28      	it	cs
 8001ada:	f04f 0b01 	movcs.w	fp, #1
 8001ade:	e7d3      	b.n	8001a88 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001ae0:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <xTaskIncrementTick+0x118>)
 8001ae2:	6813      	ldr	r3, [r2, #0]
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001ae8:	f04f 0b00 	mov.w	fp, #0
 8001aec:	e011      	b.n	8001b12 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001aee:	f8d8 2000 	ldr.w	r2, [r8]
 8001af2:	68d2      	ldr	r2, [r2, #12]
 8001af4:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001af6:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001af8:	428c      	cmp	r4, r1
 8001afa:	d2cd      	bcs.n	8001a98 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001afc:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <xTaskIncrementTick+0x114>)
 8001b02:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b04:	2214      	movs	r2, #20
 8001b06:	434a      	muls	r2, r1
 8001b08:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001b0a:	2a02      	cmp	r2, #2
 8001b0c:	bf28      	it	cs
 8001b0e:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001b12:	4a0d      	ldr	r2, [pc, #52]	; (8001b48 <xTaskIncrementTick+0x11c>)
 8001b14:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001b16:	2a00      	cmp	r2, #0
 8001b18:	bf18      	it	ne
 8001b1a:	f04f 0b01 	movne.w	fp, #1
}
 8001b1e:	4658      	mov	r0, fp
 8001b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b24:	20003cec 	.word	0x20003cec
 8001b28:	20003d6c 	.word	0x20003d6c
 8001b2c:	20003c4c 	.word	0x20003c4c
 8001b30:	20003c50 	.word	0x20003c50
 8001b34:	20003d28 	.word	0x20003d28
 8001b38:	20003d24 	.word	0x20003d24
 8001b3c:	20003c48 	.word	0x20003c48
 8001b40:	20003c54 	.word	0x20003c54
 8001b44:	20003ce8 	.word	0x20003ce8
 8001b48:	20003d70 	.word	0x20003d70
 8001b4c:	20003cf4 	.word	0x20003cf4

08001b50 <xTaskResumeAll>:
{
 8001b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001b54:	4c31      	ldr	r4, [pc, #196]	; (8001c1c <xTaskResumeAll+0xcc>)
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	b943      	cbnz	r3, 8001b6c <xTaskResumeAll+0x1c>
 8001b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5e:	f383 8811 	msr	BASEPRI, r3
 8001b62:	f3bf 8f6f 	isb	sy
 8001b66:	f3bf 8f4f 	dsb	sy
 8001b6a:	e7fe      	b.n	8001b6a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001b6c:	f7ff faca 	bl	8001104 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b76:	6824      	ldr	r4, [r4, #0]
 8001b78:	b12c      	cbz	r4, 8001b86 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001b7a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001b7c:	f7ff fae4 	bl	8001148 <vPortExitCritical>
}
 8001b80:	4620      	mov	r0, r4
 8001b82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <xTaskResumeAll+0xd0>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f5      	beq.n	8001b7a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b8e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001c38 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001b92:	4f24      	ldr	r7, [pc, #144]	; (8001c24 <xTaskResumeAll+0xd4>)
 8001b94:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001c3c <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001b98:	f8d9 3000 	ldr.w	r3, [r9]
 8001b9c:	b9e3      	cbnz	r3, 8001bd8 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001b9e:	b10c      	cbz	r4, 8001ba4 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001ba0:	f7ff fd02 	bl	80015a8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001ba4:	4d20      	ldr	r5, [pc, #128]	; (8001c28 <xTaskResumeAll+0xd8>)
 8001ba6:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001ba8:	b144      	cbz	r4, 8001bbc <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001baa:	4e20      	ldr	r6, [pc, #128]	; (8001c2c <xTaskResumeAll+0xdc>)
 8001bac:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001bae:	f7ff ff3d 	bl	8001a2c <xTaskIncrementTick>
 8001bb2:	b100      	cbz	r0, 8001bb6 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001bb4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001bb6:	3c01      	subs	r4, #1
 8001bb8:	d1f9      	bne.n	8001bae <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001bba:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001bbc:	4b1b      	ldr	r3, [pc, #108]	; (8001c2c <xTaskResumeAll+0xdc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0da      	beq.n	8001b7a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <xTaskResumeAll+0xe0>)
 8001bc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	f3bf 8f4f 	dsb	sy
 8001bd0:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001bd4:	2401      	movs	r4, #1
 8001bd6:	e7d1      	b.n	8001b7c <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001bd8:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001bdc:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001bde:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001be0:	f104 0018 	add.w	r0, r4, #24
 8001be4:	f7ff fa15 	bl	8001012 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001be8:	4630      	mov	r0, r6
 8001bea:	f7ff fa12 	bl	8001012 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001bee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	2501      	movs	r5, #1
 8001bf4:	fa05 f302 	lsl.w	r3, r5, r2
 8001bf8:	2014      	movs	r0, #20
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	fb00 8002 	mla	r0, r0, r2, r8
 8001c00:	4631      	mov	r1, r6
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	f7ff f9e2 	bl	8000fcc <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <xTaskResumeAll+0xe4>)
 8001c0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c10:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001c12:	bf24      	itt	cs
 8001c14:	4b05      	ldrcs	r3, [pc, #20]	; (8001c2c <xTaskResumeAll+0xdc>)
 8001c16:	601d      	strcs	r5, [r3, #0]
 8001c18:	e7be      	b.n	8001b98 <xTaskResumeAll+0x48>
 8001c1a:	bf00      	nop
 8001c1c:	20003cec 	.word	0x20003cec
 8001c20:	20003ce0 	.word	0x20003ce0
 8001c24:	20003cf4 	.word	0x20003cf4
 8001c28:	20003ce8 	.word	0x20003ce8
 8001c2c:	20003d70 	.word	0x20003d70
 8001c30:	e000ed04 	.word	0xe000ed04
 8001c34:	20003c48 	.word	0x20003c48
 8001c38:	20003d2c 	.word	0x20003d2c
 8001c3c:	20003c54 	.word	0x20003c54

08001c40 <vTaskDelay>:
	{
 8001c40:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001c42:	b940      	cbnz	r0, 8001c56 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <vTaskDelay+0x40>)
 8001c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	f3bf 8f4f 	dsb	sy
 8001c50:	f3bf 8f6f 	isb	sy
 8001c54:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001c56:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <vTaskDelay+0x44>)
 8001c58:	6819      	ldr	r1, [r3, #0]
 8001c5a:	b141      	cbz	r1, 8001c6e <vTaskDelay+0x2e>
 8001c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c60:	f383 8811 	msr	BASEPRI, r3
 8001c64:	f3bf 8f6f 	isb	sy
 8001c68:	f3bf 8f4f 	dsb	sy
 8001c6c:	e7fe      	b.n	8001c6c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001c6e:	f7ff fec7 	bl	8001a00 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001c72:	f7ff fcab 	bl	80015cc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001c76:	f7ff ff6b 	bl	8001b50 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	d0e2      	beq.n	8001c44 <vTaskDelay+0x4>
 8001c7e:	bd08      	pop	{r3, pc}
 8001c80:	e000ed04 	.word	0xe000ed04
 8001c84:	20003cec 	.word	0x20003cec

08001c88 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <vTaskSwitchContext+0x60>)
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <vTaskSwitchContext+0x64>)
{
 8001c8e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001c90:	b112      	cbz	r2, 8001c98 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001c92:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001c98:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001c9a:	4b15      	ldr	r3, [pc, #84]	; (8001cf0 <vTaskSwitchContext+0x68>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c9e:	fab3 f383 	clz	r3, r3
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	f1c3 031f 	rsb	r3, r3, #31
 8001ca8:	2214      	movs	r2, #20
 8001caa:	4912      	ldr	r1, [pc, #72]	; (8001cf4 <vTaskSwitchContext+0x6c>)
 8001cac:	435a      	muls	r2, r3
 8001cae:	1888      	adds	r0, r1, r2
 8001cb0:	588c      	ldr	r4, [r1, r2]
 8001cb2:	b944      	cbnz	r4, 8001cc6 <vTaskSwitchContext+0x3e>
	__asm volatile
 8001cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cb8:	f383 8811 	msr	BASEPRI, r3
 8001cbc:	f3bf 8f6f 	isb	sy
 8001cc0:	f3bf 8f4f 	dsb	sy
 8001cc4:	e7fe      	b.n	8001cc4 <vTaskSwitchContext+0x3c>
 8001cc6:	6844      	ldr	r4, [r0, #4]
 8001cc8:	3208      	adds	r2, #8
 8001cca:	6864      	ldr	r4, [r4, #4]
 8001ccc:	6044      	str	r4, [r0, #4]
 8001cce:	440a      	add	r2, r1
 8001cd0:	4294      	cmp	r4, r2
 8001cd2:	bf04      	itt	eq
 8001cd4:	6862      	ldreq	r2, [r4, #4]
 8001cd6:	6042      	streq	r2, [r0, #4]
 8001cd8:	2214      	movs	r2, #20
 8001cda:	fb02 1303 	mla	r3, r2, r3, r1
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	68da      	ldr	r2, [r3, #12]
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <vTaskSwitchContext+0x70>)
 8001ce4:	e7d6      	b.n	8001c94 <vTaskSwitchContext+0xc>
 8001ce6:	bf00      	nop
 8001ce8:	20003cec 	.word	0x20003cec
 8001cec:	20003d70 	.word	0x20003d70
 8001cf0:	20003cf4 	.word	0x20003cf4
 8001cf4:	20003c54 	.word	0x20003c54
 8001cf8:	20003c48 	.word	0x20003c48

08001cfc <vTaskSuspend>:
	{
 8001cfc:	b570      	push	{r4, r5, r6, lr}
 8001cfe:	4604      	mov	r4, r0
 8001d00:	4e2c      	ldr	r6, [pc, #176]	; (8001db4 <vTaskSuspend+0xb8>)
		taskENTER_CRITICAL();
 8001d02:	f7ff f9ff 	bl	8001104 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001d06:	b904      	cbnz	r4, 8001d0a <vTaskSuspend+0xe>
 8001d08:	6834      	ldr	r4, [r6, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001d0a:	1d25      	adds	r5, r4, #4
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	f7ff f980 	bl	8001012 <uxListRemove>
 8001d12:	b960      	cbnz	r0, 8001d2e <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001d14:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001d16:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <vTaskSuspend+0xbc>)
 8001d18:	2114      	movs	r1, #20
 8001d1a:	4341      	muls	r1, r0
 8001d1c:	585b      	ldr	r3, [r3, r1]
 8001d1e:	b933      	cbnz	r3, 8001d2e <vTaskSuspend+0x32>
 8001d20:	4926      	ldr	r1, [pc, #152]	; (8001dbc <vTaskSuspend+0xc0>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	680b      	ldr	r3, [r1, #0]
 8001d26:	4082      	lsls	r2, r0
 8001d28:	ea23 0302 	bic.w	r3, r3, r2
 8001d2c:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d2e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d30:	b11b      	cbz	r3, 8001d3a <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d32:	f104 0018 	add.w	r0, r4, #24
 8001d36:	f7ff f96c 	bl	8001012 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001d3a:	4629      	mov	r1, r5
 8001d3c:	4820      	ldr	r0, [pc, #128]	; (8001dc0 <vTaskSuspend+0xc4>)
		if( xSchedulerRunning != pdFALSE )
 8001d3e:	4d21      	ldr	r5, [pc, #132]	; (8001dc4 <vTaskSuspend+0xc8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001d40:	f7ff f944 	bl	8000fcc <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8001d44:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8001d48:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d4a:	bf04      	itt	eq
 8001d4c:	2300      	moveq	r3, #0
 8001d4e:	f884 3050 	strbeq.w	r3, [r4, #80]	; 0x50
		taskEXIT_CRITICAL();
 8001d52:	f7ff f9f9 	bl	8001148 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8001d56:	682a      	ldr	r2, [r5, #0]
 8001d58:	b12a      	cbz	r2, 8001d66 <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 8001d5a:	f7ff f9d3 	bl	8001104 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8001d5e:	f7ff fc23 	bl	80015a8 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8001d62:	f7ff f9f1 	bl	8001148 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 8001d66:	6833      	ldr	r3, [r6, #0]
 8001d68:	429c      	cmp	r4, r3
 8001d6a:	d122      	bne.n	8001db2 <vTaskSuspend+0xb6>
			if( xSchedulerRunning != pdFALSE )
 8001d6c:	682b      	ldr	r3, [r5, #0]
 8001d6e:	b1a3      	cbz	r3, 8001d9a <vTaskSuspend+0x9e>
				configASSERT( uxSchedulerSuspended == 0 );
 8001d70:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <vTaskSuspend+0xcc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	b143      	cbz	r3, 8001d88 <vTaskSuspend+0x8c>
 8001d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7a:	f383 8811 	msr	BASEPRI, r3
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	e7fe      	b.n	8001d86 <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <vTaskSuspend+0xd0>)
 8001d8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	f3bf 8f4f 	dsb	sy
 8001d94:	f3bf 8f6f 	isb	sy
 8001d98:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8001d9a:	4a09      	ldr	r2, [pc, #36]	; (8001dc0 <vTaskSuspend+0xc4>)
 8001d9c:	6811      	ldr	r1, [r2, #0]
 8001d9e:	4a0c      	ldr	r2, [pc, #48]	; (8001dd0 <vTaskSuspend+0xd4>)
 8001da0:	6812      	ldr	r2, [r2, #0]
 8001da2:	4291      	cmp	r1, r2
 8001da4:	d101      	bne.n	8001daa <vTaskSuspend+0xae>
					pxCurrentTCB = NULL;
 8001da6:	6033      	str	r3, [r6, #0]
 8001da8:	bd70      	pop	{r4, r5, r6, pc}
	}
 8001daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8001dae:	f7ff bf6b 	b.w	8001c88 <vTaskSwitchContext>
 8001db2:	bd70      	pop	{r4, r5, r6, pc}
 8001db4:	20003c48 	.word	0x20003c48
 8001db8:	20003c54 	.word	0x20003c54
 8001dbc:	20003cf4 	.word	0x20003cf4
 8001dc0:	20003d44 	.word	0x20003d44
 8001dc4:	20003d40 	.word	0x20003d40
 8001dc8:	20003cec 	.word	0x20003cec
 8001dcc:	e000ed04 	.word	0xe000ed04
 8001dd0:	20003ce0 	.word	0x20003ce0

08001dd4 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001dd4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8001dd6:	2064      	movs	r0, #100	; 0x64
 8001dd8:	f7ff f8c4 	bl	8000f64 <osDelay>
 8001ddc:	e7fb      	b.n	8001dd6 <StartDefaultTask+0x2>
	...

08001de0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8001de0:	b570      	push	{r4, r5, r6, lr}
	  count = osKernelSysTick()+osKernelSysTickMicroSec(5000000); //5sec = 5000000us

	  /* Toggle LED1 every 200 ms for 5 s */
	  while(count >= osKernelSysTick())
	  {
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001de2:	4c19      	ldr	r4, [pc, #100]	; (8001e48 <StartTask02+0x68>)
	  count = osKernelSysTick()+osKernelSysTickMicroSec(5000000); //5sec = 5000000us
 8001de4:	f241 3588 	movw	r5, #5000	; 0x1388
 8001de8:	f7ff f89d 	bl	8000f26 <osKernelSysTick>
 8001dec:	1946      	adds	r6, r0, r5
	  while(count >= osKernelSysTick())
 8001dee:	f7ff f89a 	bl	8000f26 <osKernelSysTick>
 8001df2:	4286      	cmp	r6, r0
 8001df4:	d214      	bcs.n	8001e20 <StartTask02+0x40>
		  osDelay(200);
	  }

	  /* Turn off LED1 */
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7fe fccf 	bl	80007a0 <HAL_GPIO_WritePin>

	  /* Suspend Thread 1 */
	  osThreadSuspend(NULL);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff f8b6 	bl	8000f74 <osThreadSuspend>

	  count = osKernelSysTick()+osKernelSysTickMicroSec(5000000);
 8001e08:	f7ff f88d 	bl	8000f26 <osKernelSysTick>
 8001e0c:	1946      	adds	r6, r0, r5

	  /* Toggle LED1 every 400 ms for 5 s */
	  while (count >= osKernelSysTick())
 8001e0e:	f7ff f88a 	bl	8000f26 <osKernelSysTick>
 8001e12:	4286      	cmp	r6, r0
 8001e14:	d20d      	bcs.n	8001e32 <StartTask02+0x52>

	    osDelay(400);
	  }

	  /* Resume Thread 2*/
	  osThreadResume(myTask03Handle);
 8001e16:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <StartTask02+0x6c>)
 8001e18:	6818      	ldr	r0, [r3, #0]
 8001e1a:	f7ff f8b1 	bl	8000f80 <osThreadResume>
	  count = osKernelSysTick()+osKernelSysTickMicroSec(5000000); //5sec = 5000000us
 8001e1e:	e7e3      	b.n	8001de8 <StartTask02+0x8>
		  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001e20:	4620      	mov	r0, r4
 8001e22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e26:	f7fe fcc0 	bl	80007aa <HAL_GPIO_TogglePin>
		  osDelay(200);
 8001e2a:	20c8      	movs	r0, #200	; 0xc8
 8001e2c:	f7ff f89a 	bl	8000f64 <osDelay>
 8001e30:	e7dd      	b.n	8001dee <StartTask02+0xe>
	    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8001e32:	4620      	mov	r0, r4
 8001e34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e38:	f7fe fcb7 	bl	80007aa <HAL_GPIO_TogglePin>
	    osDelay(400);
 8001e3c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001e40:	f7ff f890 	bl	8000f64 <osDelay>
 8001e44:	e7e3      	b.n	8001e0e <StartTask02+0x2e>
 8001e46:	bf00      	nop
 8001e48:	40020c00 	.word	0x40020c00
 8001e4c:	20003d80 	.word	0x20003d80

08001e50 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001e50:	b538      	push	{r3, r4, r5, lr}
		  count = osKernelSysTick()+osKernelSysTickMicroSec(10000000); //10sec = 10000000us

		  /* Toggle LED2 every 500 ms for 10 s */
		  while(count >= osKernelSysTick())
		  {
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001e52:	4d11      	ldr	r5, [pc, #68]	; (8001e98 <StartTask03+0x48>)
		  count = osKernelSysTick()+osKernelSysTickMicroSec(10000000); //10sec = 10000000us
 8001e54:	f7ff f867 	bl	8000f26 <osKernelSysTick>
 8001e58:	f500 541c 	add.w	r4, r0, #9984	; 0x2700
 8001e5c:	3410      	adds	r4, #16
		  while(count >= osKernelSysTick())
 8001e5e:	f7ff f862 	bl	8000f26 <osKernelSysTick>
 8001e62:	4284      	cmp	r4, r0
 8001e64:	d20d      	bcs.n	8001e82 <StartTask03+0x32>
			  osDelay(500);
		  }

		  /* Turn off LED1 */
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e66:	2200      	movs	r2, #0
 8001e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	f7fe fc97 	bl	80007a0 <HAL_GPIO_WritePin>

		  /* Resume Thread 1*/
		  osThreadResume(myTask02Handle);
 8001e72:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <StartTask03+0x4c>)
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	f7ff f883 	bl	8000f80 <osThreadResume>

		  /* Suspend Thread 2 */
		  osThreadSuspend(NULL);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff f87a 	bl	8000f74 <osThreadSuspend>
		  count = osKernelSysTick()+osKernelSysTickMicroSec(10000000); //10sec = 10000000us
 8001e80:	e7e8      	b.n	8001e54 <StartTask03+0x4>
			  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8001e82:	4628      	mov	r0, r5
 8001e84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e88:	f7fe fc8f 	bl	80007aa <HAL_GPIO_TogglePin>
			  osDelay(500);
 8001e8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e90:	f7ff f868 	bl	8000f64 <osDelay>
 8001e94:	e7e3      	b.n	8001e5e <StartTask03+0xe>
 8001e96:	bf00      	nop
 8001e98:	40020c00 	.word	0x40020c00
 8001e9c:	20003d7c 	.word	0x20003d7c

08001ea0 <SystemClock_Config>:
{
 8001ea0:	b530      	push	{r4, r5, lr}
 8001ea2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ea4:	2230      	movs	r2, #48	; 0x30
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	a808      	add	r0, sp, #32
 8001eaa:	f000 f9a3 	bl	80021f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2214      	movs	r2, #20
 8001eb2:	a803      	add	r0, sp, #12
 8001eb4:	f000 f99e 	bl	80021f4 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb8:	2400      	movs	r4, #0
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <SystemClock_Config+0x8c>)
 8001ebc:	9401      	str	r4, [sp, #4]
 8001ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ec0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ec4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	9301      	str	r3, [sp, #4]
 8001ece:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ed0:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <SystemClock_Config+0x90>)
 8001ed2:	9402      	str	r4, [sp, #8]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ede:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee4:	9302      	str	r3, [sp, #8]
 8001ee6:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eec:	2310      	movs	r3, #16
 8001eee:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ef0:	2308      	movs	r3, #8
 8001ef2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ef4:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ef6:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001ef8:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001efa:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001efc:	2307      	movs	r3, #7
 8001efe:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f00:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f02:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f04:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f06:	f7fe fc57 	bl	80007b8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f0a:	230f      	movs	r3, #15
 8001f0c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f12:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f14:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f1a:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f1c:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f1e:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001f20:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f22:	f7fe fdf9 	bl	8000b18 <HAL_RCC_ClockConfig>
}
 8001f26:	b015      	add	sp, #84	; 0x54
 8001f28:	bd30      	pop	{r4, r5, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40007000 	.word	0x40007000

08001f34 <main>:
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b092      	sub	sp, #72	; 0x48
  HAL_Init();
 8001f38:	f7fe fad2 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 8001f3c:	f7ff ffb0 	bl	8001ea0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f40:	2214      	movs	r2, #20
 8001f42:	2100      	movs	r1, #0
 8001f44:	a80d      	add	r0, sp, #52	; 0x34
 8001f46:	f000 f955 	bl	80021f4 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	2500      	movs	r5, #0
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <main+0xc4>)
 8001f4e:	9501      	str	r5, [sp, #4]
 8001f50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001f52:	482a      	ldr	r0, [pc, #168]	; (8001ffc <main+0xc8>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f5c:	f002 0201 	and.w	r2, r2, #1
 8001f60:	9201      	str	r2, [sp, #4]
 8001f62:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f64:	9502      	str	r5, [sp, #8]
 8001f66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f68:	f042 0208 	orr.w	r2, r2, #8
 8001f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f70:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001f74:	462a      	mov	r2, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f76:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001f78:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f7c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f7e:	2401      	movs	r4, #1
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001f80:	f7fe fc0e 	bl	80007a0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f84:	a90d      	add	r1, sp, #52	; 0x34
 8001f86:	481e      	ldr	r0, [pc, #120]	; (8002000 <main+0xcc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f88:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f8a:	950e      	str	r5, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	950f      	str	r5, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8e:	f7fe fb27 	bl	80005e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f92:	940e      	str	r4, [sp, #56]	; 0x38
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001f94:	4c1b      	ldr	r4, [pc, #108]	; (8002004 <main+0xd0>)
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f96:	4819      	ldr	r0, [pc, #100]	; (8001ffc <main+0xc8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001f9a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f9e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001fa0:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	9510      	str	r5, [sp, #64]	; 0x40
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fa4:	f7fe fb1c 	bl	80005e0 <HAL_GPIO_Init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001fa8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001faa:	af03      	add	r7, sp, #12
 8001fac:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001fae:	4626      	mov	r6, r4
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001fb0:	4629      	mov	r1, r5
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8001fb2:	f856 3b04 	ldr.w	r3, [r6], #4
 8001fb6:	603b      	str	r3, [r7, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001fb8:	a803      	add	r0, sp, #12
 8001fba:	f7fe ffbb 	bl	8000f34 <osThreadCreate>
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <main+0xd4>)
 8001fc0:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 128);
 8001fc2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001fc4:	af08      	add	r7, sp, #32
 8001fc6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8001fc8:	6833      	ldr	r3, [r6, #0]
 8001fca:	603b      	str	r3, [r7, #0]
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001fcc:	4629      	mov	r1, r5
 8001fce:	a808      	add	r0, sp, #32
 8001fd0:	f7fe ffb0 	bl	8000f34 <osThreadCreate>
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <main+0xd8>)
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8001fd6:	3418      	adds	r4, #24
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 8001fd8:	6018      	str	r0, [r3, #0]
  osThreadDef(myTask03, StartTask03, osPriorityNormal, 0, 128);
 8001fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fdc:	ae0d      	add	r6, sp, #52	; 0x34
 8001fde:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001fe0:	6823      	ldr	r3, [r4, #0]
 8001fe2:	6033      	str	r3, [r6, #0]
  myTask03Handle = osThreadCreate(osThread(myTask03), NULL);
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	a80d      	add	r0, sp, #52	; 0x34
 8001fe8:	f7fe ffa4 	bl	8000f34 <osThreadCreate>
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <main+0xdc>)
 8001fee:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8001ff0:	f7fe ff94 	bl	8000f1c <osKernelStart>
 8001ff4:	e7fe      	b.n	8001ff4 <main+0xc0>
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020c00 	.word	0x40020c00
 8002000:	40020000 	.word	0x40020000
 8002004:	0800221c 	.word	0x0800221c
 8002008:	20003d78 	.word	0x20003d78
 800200c:	20003d7c 	.word	0x20003d7c
 8002010:	20003d80 	.word	0x20003d80

08002014 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002014:	6803      	ldr	r3, [r0, #0]
 8002016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800201a:	d101      	bne.n	8002020 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800201c:	f7fe ba7a 	b.w	8000514 <HAL_IncTick>
 8002020:	4770      	bx	lr
	...

08002024 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002024:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	4b13      	ldr	r3, [pc, #76]	; (8002074 <HAL_MspInit+0x50>)
 8002028:	2400      	movs	r4, #0
 800202a:	9400      	str	r4, [sp, #0]
 800202c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800202e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002032:	645a      	str	r2, [r3, #68]	; 0x44
 8002034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002036:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800203a:	9200      	str	r2, [sp, #0]
 800203c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	9401      	str	r4, [sp, #4]
 8002040:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002042:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002046:	641a      	str	r2, [r3, #64]	; 0x40
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002050:	4622      	mov	r2, r4
 8002052:	210f      	movs	r1, #15
 8002054:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800205a:	f7fe fa7f 	bl	800055c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800205e:	2105      	movs	r1, #5
 8002060:	4608      	mov	r0, r1
 8002062:	4622      	mov	r2, r4
 8002064:	f7fe fa7a 	bl	800055c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002068:	2005      	movs	r0, #5
 800206a:	f7fe faab 	bl	80005c4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206e:	b002      	add	sp, #8
 8002070:	bd10      	pop	{r4, pc}
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800

08002078 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002078:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800207a:	4601      	mov	r1, r0
{
 800207c:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 800207e:	2200      	movs	r2, #0
 8002080:	201c      	movs	r0, #28
 8002082:	f7fe fa6b 	bl	800055c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8002086:	201c      	movs	r0, #28
 8002088:	f7fe fa9c 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800208c:	2500      	movs	r5, #0
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_InitTick+0x6c>)
 8002090:	9502      	str	r5, [sp, #8]
 8002092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002094:	4c14      	ldr	r4, [pc, #80]	; (80020e8 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002096:	f042 0201 	orr.w	r2, r2, #1
 800209a:	641a      	str	r2, [r3, #64]	; 0x40
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020a4:	a901      	add	r1, sp, #4
 80020a6:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 80020a8:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80020aa:	f7fe fddf 	bl	8000c6c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020ae:	f7fe fdcd 	bl	8000c4c <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 80020b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020b6:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 80020b8:	f240 33e7 	movw	r3, #999	; 0x3e7
 80020bc:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80020be:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80020c0:	4b0a      	ldr	r3, [pc, #40]	; (80020ec <HAL_InitTick+0x74>)
 80020c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80020c6:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 80020c8:	6060      	str	r0, [r4, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80020ca:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 80020cc:	6125      	str	r5, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ce:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80020d0:	f7fe ff08 	bl	8000ee4 <HAL_TIM_Base_Init>
 80020d4:	b920      	cbnz	r0, 80020e0 <HAL_InitTick+0x68>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80020d6:	4620      	mov	r0, r4
 80020d8:	f7fe fde7 	bl	8000caa <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80020dc:	b009      	add	sp, #36	; 0x24
 80020de:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 80020e0:	2001      	movs	r0, #1
 80020e2:	e7fb      	b.n	80020dc <HAL_InitTick+0x64>
 80020e4:	40023800 	.word	0x40023800
 80020e8:	20003d84 	.word	0x20003d84
 80020ec:	000f4240 	.word	0x000f4240

080020f0 <NMI_Handler>:
 80020f0:	4770      	bx	lr

080020f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f2:	e7fe      	b.n	80020f2 <HardFault_Handler>

080020f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f4:	e7fe      	b.n	80020f4 <MemManage_Handler>

080020f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020f6:	e7fe      	b.n	80020f6 <BusFault_Handler>

080020f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020f8:	e7fe      	b.n	80020f8 <UsageFault_Handler>

080020fa <DebugMon_Handler>:
 80020fa:	4770      	bx	lr

080020fc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80020fc:	4770      	bx	lr
	...

08002100 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002100:	4801      	ldr	r0, [pc, #4]	; (8002108 <TIM2_IRQHandler+0x8>)
 8002102:	f7fe bde6 	b.w	8000cd2 <HAL_TIM_IRQHandler>
 8002106:	bf00      	nop
 8002108:	20003d84 	.word	0x20003d84

0800210c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800210c:	490f      	ldr	r1, [pc, #60]	; (800214c <SystemInit+0x40>)
 800210e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002112:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002116:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <SystemInit+0x44>)
 800211c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800211e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002120:	f042 0201 	orr.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002126:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800212e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002132:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002134:	4a07      	ldr	r2, [pc, #28]	; (8002154 <SystemInit+0x48>)
 8002136:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800213e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002140:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002142:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002146:	608b      	str	r3, [r1, #8]
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	e000ed00 	.word	0xe000ed00
 8002150:	40023800 	.word	0x40023800
 8002154:	24003010 	.word	0x24003010

08002158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002158:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002190 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800215c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800215e:	e003      	b.n	8002168 <LoopCopyDataInit>

08002160 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002162:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002164:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002166:	3104      	adds	r1, #4

08002168 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002168:	480b      	ldr	r0, [pc, #44]	; (8002198 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800216c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800216e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002170:	d3f6      	bcc.n	8002160 <CopyDataInit>
  ldr  r2, =_sbss
 8002172:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002174:	e002      	b.n	800217c <LoopFillZerobss>

08002176 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002176:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002178:	f842 3b04 	str.w	r3, [r2], #4

0800217c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800217e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002180:	d3f9      	bcc.n	8002176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002182:	f7ff ffc3 	bl	800210c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002186:	f000 f811 	bl	80021ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218a:	f7ff fed3 	bl	8001f34 <main>
  bx  lr    
 800218e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002190:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002194:	080022a4 	.word	0x080022a4
  ldr  r0, =_sdata
 8002198:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800219c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80021a0:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80021a4:	20003dc4 	.word	0x20003dc4

080021a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021a8:	e7fe      	b.n	80021a8 <ADC_IRQHandler>
	...

080021ac <__libc_init_array>:
 80021ac:	b570      	push	{r4, r5, r6, lr}
 80021ae:	4e0d      	ldr	r6, [pc, #52]	; (80021e4 <__libc_init_array+0x38>)
 80021b0:	4c0d      	ldr	r4, [pc, #52]	; (80021e8 <__libc_init_array+0x3c>)
 80021b2:	1ba4      	subs	r4, r4, r6
 80021b4:	10a4      	asrs	r4, r4, #2
 80021b6:	2500      	movs	r5, #0
 80021b8:	42a5      	cmp	r5, r4
 80021ba:	d109      	bne.n	80021d0 <__libc_init_array+0x24>
 80021bc:	4e0b      	ldr	r6, [pc, #44]	; (80021ec <__libc_init_array+0x40>)
 80021be:	4c0c      	ldr	r4, [pc, #48]	; (80021f0 <__libc_init_array+0x44>)
 80021c0:	f000 f820 	bl	8002204 <_init>
 80021c4:	1ba4      	subs	r4, r4, r6
 80021c6:	10a4      	asrs	r4, r4, #2
 80021c8:	2500      	movs	r5, #0
 80021ca:	42a5      	cmp	r5, r4
 80021cc:	d105      	bne.n	80021da <__libc_init_array+0x2e>
 80021ce:	bd70      	pop	{r4, r5, r6, pc}
 80021d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021d4:	4798      	blx	r3
 80021d6:	3501      	adds	r5, #1
 80021d8:	e7ee      	b.n	80021b8 <__libc_init_array+0xc>
 80021da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021de:	4798      	blx	r3
 80021e0:	3501      	adds	r5, #1
 80021e2:	e7f2      	b.n	80021ca <__libc_init_array+0x1e>
 80021e4:	0800229c 	.word	0x0800229c
 80021e8:	0800229c 	.word	0x0800229c
 80021ec:	0800229c 	.word	0x0800229c
 80021f0:	080022a0 	.word	0x080022a0

080021f4 <memset>:
 80021f4:	4402      	add	r2, r0
 80021f6:	4603      	mov	r3, r0
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d100      	bne.n	80021fe <memset+0xa>
 80021fc:	4770      	bx	lr
 80021fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002202:	e7f9      	b.n	80021f8 <memset+0x4>

08002204 <_init>:
 8002204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002206:	bf00      	nop
 8002208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220a:	bc08      	pop	{r3}
 800220c:	469e      	mov	lr, r3
 800220e:	4770      	bx	lr

08002210 <_fini>:
 8002210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002212:	bf00      	nop
 8002214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002216:	bc08      	pop	{r3}
 8002218:	469e      	mov	lr, r3
 800221a:	4770      	bx	lr
