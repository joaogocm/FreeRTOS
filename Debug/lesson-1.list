
lesson-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000224c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080023dc  080023dc  000123dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002474  08002474  00012474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800247c  0800247c  0001247c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002480  08002480  00012480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00003dc0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003dcc  20003dcc  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013316  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002c53  00000000  00000000  00033352  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00008213  00000000  00000000  00035fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  0003e1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f78  00000000  00000000  0003edc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005f53  00000000  00000000  0003fd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000050a5  00000000  00000000  00045c8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004ad30  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002384  00000000  00000000  0004adac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080023c4 	.word	0x080023c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	080023c4 	.word	0x080023c4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f81b 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f001 fe8c 	bl	8002220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f001 fe60 	bl	80021cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20003d74 	.word	0x20003d74
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20003d74 	.word	0x20003d74

08000538 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800053a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000540:	041b      	lsls	r3, r3, #16
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000548:	0200      	lsls	r0, r0, #8
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000552:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	68dc      	ldr	r4, [r3, #12]
 8000562:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000566:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	2b04      	cmp	r3, #4
 800056e:	bf28      	it	cs
 8000570:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	f04f 0501 	mov.w	r5, #1
 8000578:	fa05 f303 	lsl.w	r3, r5, r3
 800057c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000580:	bf8c      	ite	hi
 8000582:	3c03      	subhi	r4, #3
 8000584:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000586:	4019      	ands	r1, r3
 8000588:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058a:	fa05 f404 	lsl.w	r4, r5, r4
 800058e:	3c01      	subs	r4, #1
 8000590:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000592:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	ea42 0201 	orr.w	r2, r2, r1
 8000598:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	bfad      	iteet	ge
 800059e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	f000 000f 	andlt.w	r0, r0, #15
 80005a6:	4b06      	ldrlt	r3, [pc, #24]	; (80005c0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	bfb5      	itete	lt
 80005ae:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000ed14 	.word	0xe000ed14

080005c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005c4:	2800      	cmp	r0, #0
 80005c6:	db08      	blt.n	80005da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c8:	0942      	lsrs	r2, r0, #5
 80005ca:	2301      	movs	r3, #1
 80005cc:	f000 001f 	and.w	r0, r0, #31
 80005d0:	fa03 f000 	lsl.w	r0, r3, r0
 80005d4:	4b01      	ldr	r3, [pc, #4]	; (80005dc <HAL_NVIC_EnableIRQ+0x18>)
 80005d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005da:	4770      	bx	lr
 80005dc:	e000e100 	.word	0xe000e100

080005e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005e4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005e6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000798 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005ec:	4a68      	ldr	r2, [pc, #416]	; (8000790 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005ee:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800079c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005f2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005f4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80005f6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005fa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80005fc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000600:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000604:	45b6      	cmp	lr, r6
 8000606:	f040 80ae 	bne.w	8000766 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800060a:	684c      	ldr	r4, [r1, #4]
 800060c:	f024 0710 	bic.w	r7, r4, #16
 8000610:	2f02      	cmp	r7, #2
 8000612:	d116      	bne.n	8000642 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000614:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000618:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800061c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000620:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000624:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000628:	f04f 0c0f 	mov.w	ip, #15
 800062c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000630:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000634:	690d      	ldr	r5, [r1, #16]
 8000636:	fa05 f50b 	lsl.w	r5, r5, fp
 800063a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800063e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000642:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000646:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000648:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800064c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000650:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000652:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000656:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800065a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800065e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000660:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000664:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000666:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800066a:	d811      	bhi.n	8000690 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800066c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800066e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000672:	68cf      	ldr	r7, [r1, #12]
 8000674:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000678:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800067c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800067e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000680:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000684:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000688:	409f      	lsls	r7, r3
 800068a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800068e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000690:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000692:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000694:	688f      	ldr	r7, [r1, #8]
 8000696:	fa07 f70a 	lsl.w	r7, r7, sl
 800069a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800069c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800069e:	00e5      	lsls	r5, r4, #3
 80006a0:	d561      	bpl.n	8000766 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	f04f 0b00 	mov.w	fp, #0
 80006a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80006aa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ae:	4d39      	ldr	r5, [pc, #228]	; (8000794 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006b4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006b8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006bc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006c0:	9703      	str	r7, [sp, #12]
 80006c2:	9f03      	ldr	r7, [sp, #12]
 80006c4:	f023 0703 	bic.w	r7, r3, #3
 80006c8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006cc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006d0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80006d4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80006dc:	f04f 0e0f 	mov.w	lr, #15
 80006e0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006e6:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ea:	d043      	beq.n	8000774 <HAL_GPIO_Init+0x194>
 80006ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006f0:	42a8      	cmp	r0, r5
 80006f2:	d041      	beq.n	8000778 <HAL_GPIO_Init+0x198>
 80006f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006f8:	42a8      	cmp	r0, r5
 80006fa:	d03f      	beq.n	800077c <HAL_GPIO_Init+0x19c>
 80006fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000700:	42a8      	cmp	r0, r5
 8000702:	d03d      	beq.n	8000780 <HAL_GPIO_Init+0x1a0>
 8000704:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000708:	42a8      	cmp	r0, r5
 800070a:	d03b      	beq.n	8000784 <HAL_GPIO_Init+0x1a4>
 800070c:	4548      	cmp	r0, r9
 800070e:	d03b      	beq.n	8000788 <HAL_GPIO_Init+0x1a8>
 8000710:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000714:	42a8      	cmp	r0, r5
 8000716:	d039      	beq.n	800078c <HAL_GPIO_Init+0x1ac>
 8000718:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800071c:	42a8      	cmp	r0, r5
 800071e:	bf14      	ite	ne
 8000720:	2508      	movne	r5, #8
 8000722:	2507      	moveq	r5, #7
 8000724:	fa05 f50c 	lsl.w	r5, r5, ip
 8000728:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800072c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800072e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000730:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000732:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000736:	bf0c      	ite	eq
 8000738:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800073a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800073c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800073e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000740:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000744:	bf0c      	ite	eq
 8000746:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000748:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800074a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800074c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800074e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000752:	bf0c      	ite	eq
 8000754:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000756:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000758:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800075a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800075c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800075e:	bf54      	ite	pl
 8000760:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000762:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000764:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000766:	3301      	adds	r3, #1
 8000768:	2b10      	cmp	r3, #16
 800076a:	f47f af44 	bne.w	80005f6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800076e:	b005      	add	sp, #20
 8000770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000774:	465d      	mov	r5, fp
 8000776:	e7d5      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000778:	2501      	movs	r5, #1
 800077a:	e7d3      	b.n	8000724 <HAL_GPIO_Init+0x144>
 800077c:	2502      	movs	r5, #2
 800077e:	e7d1      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000780:	2503      	movs	r5, #3
 8000782:	e7cf      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000784:	2504      	movs	r5, #4
 8000786:	e7cd      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000788:	2505      	movs	r5, #5
 800078a:	e7cb      	b.n	8000724 <HAL_GPIO_Init+0x144>
 800078c:	2506      	movs	r5, #6
 800078e:	e7c9      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000790:	40013c00 	.word	0x40013c00
 8000794:	40020000 	.word	0x40020000
 8000798:	40023800 	.word	0x40023800
 800079c:	40021400 	.word	0x40021400

080007a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007a0:	b10a      	cbz	r2, 80007a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007a2:	6181      	str	r1, [r0, #24]
 80007a4:	4770      	bx	lr
 80007a6:	0409      	lsls	r1, r1, #16
 80007a8:	e7fb      	b.n	80007a2 <HAL_GPIO_WritePin+0x2>
	...

080007ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007b0:	4604      	mov	r4, r0
 80007b2:	b918      	cbnz	r0, 80007bc <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80007b4:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80007b6:	b002      	add	sp, #8
 80007b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007bc:	6803      	ldr	r3, [r0, #0]
 80007be:	07dd      	lsls	r5, r3, #31
 80007c0:	d410      	bmi.n	80007e4 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007c2:	6823      	ldr	r3, [r4, #0]
 80007c4:	0798      	lsls	r0, r3, #30
 80007c6:	d458      	bmi.n	800087a <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007c8:	6823      	ldr	r3, [r4, #0]
 80007ca:	071a      	lsls	r2, r3, #28
 80007cc:	f100 809a 	bmi.w	8000904 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007d0:	6823      	ldr	r3, [r4, #0]
 80007d2:	075b      	lsls	r3, r3, #29
 80007d4:	f100 80b8 	bmi.w	8000948 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007d8:	69a2      	ldr	r2, [r4, #24]
 80007da:	2a00      	cmp	r2, #0
 80007dc:	f040 8119 	bne.w	8000a12 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80007e0:	2000      	movs	r0, #0
 80007e2:	e7e8      	b.n	80007b6 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007e4:	4ba6      	ldr	r3, [pc, #664]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
 80007e6:	689a      	ldr	r2, [r3, #8]
 80007e8:	f002 020c 	and.w	r2, r2, #12
 80007ec:	2a04      	cmp	r2, #4
 80007ee:	d007      	beq.n	8000800 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007f0:	689a      	ldr	r2, [r3, #8]
 80007f2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80007f6:	2a08      	cmp	r2, #8
 80007f8:	d10a      	bne.n	8000810 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	0259      	lsls	r1, r3, #9
 80007fe:	d507      	bpl.n	8000810 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000800:	4b9f      	ldr	r3, [pc, #636]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	039a      	lsls	r2, r3, #14
 8000806:	d5dc      	bpl.n	80007c2 <HAL_RCC_OscConfig+0x16>
 8000808:	6863      	ldr	r3, [r4, #4]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1d9      	bne.n	80007c2 <HAL_RCC_OscConfig+0x16>
 800080e:	e7d1      	b.n	80007b4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000810:	6863      	ldr	r3, [r4, #4]
 8000812:	4d9b      	ldr	r5, [pc, #620]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
 8000814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000818:	d111      	bne.n	800083e <HAL_RCC_OscConfig+0x92>
 800081a:	682b      	ldr	r3, [r5, #0]
 800081c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000820:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000822:	f7ff fe83 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000826:	4d96      	ldr	r5, [pc, #600]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000828:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800082a:	682b      	ldr	r3, [r5, #0]
 800082c:	039b      	lsls	r3, r3, #14
 800082e:	d4c8      	bmi.n	80007c2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000830:	f7ff fe7c 	bl	800052c <HAL_GetTick>
 8000834:	1b80      	subs	r0, r0, r6
 8000836:	2864      	cmp	r0, #100	; 0x64
 8000838:	d9f7      	bls.n	800082a <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800083a:	2003      	movs	r0, #3
 800083c:	e7bb      	b.n	80007b6 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800083e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000842:	d104      	bne.n	800084e <HAL_RCC_OscConfig+0xa2>
 8000844:	682b      	ldr	r3, [r5, #0]
 8000846:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800084a:	602b      	str	r3, [r5, #0]
 800084c:	e7e5      	b.n	800081a <HAL_RCC_OscConfig+0x6e>
 800084e:	682a      	ldr	r2, [r5, #0]
 8000850:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000854:	602a      	str	r2, [r5, #0]
 8000856:	682a      	ldr	r2, [r5, #0]
 8000858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800085c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1df      	bne.n	8000822 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000862:	f7ff fe63 	bl	800052c <HAL_GetTick>
 8000866:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000868:	682b      	ldr	r3, [r5, #0]
 800086a:	039f      	lsls	r7, r3, #14
 800086c:	d5a9      	bpl.n	80007c2 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800086e:	f7ff fe5d 	bl	800052c <HAL_GetTick>
 8000872:	1b80      	subs	r0, r0, r6
 8000874:	2864      	cmp	r0, #100	; 0x64
 8000876:	d9f7      	bls.n	8000868 <HAL_RCC_OscConfig+0xbc>
 8000878:	e7df      	b.n	800083a <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800087a:	4b81      	ldr	r3, [pc, #516]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
 800087c:	689a      	ldr	r2, [r3, #8]
 800087e:	f012 0f0c 	tst.w	r2, #12
 8000882:	d007      	beq.n	8000894 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000884:	689a      	ldr	r2, [r3, #8]
 8000886:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800088a:	2a08      	cmp	r2, #8
 800088c:	d111      	bne.n	80008b2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	025e      	lsls	r6, r3, #9
 8000892:	d40e      	bmi.n	80008b2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000894:	4b7a      	ldr	r3, [pc, #488]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	0795      	lsls	r5, r2, #30
 800089a:	d502      	bpl.n	80008a2 <HAL_RCC_OscConfig+0xf6>
 800089c:	68e2      	ldr	r2, [r4, #12]
 800089e:	2a01      	cmp	r2, #1
 80008a0:	d188      	bne.n	80007b4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	6921      	ldr	r1, [r4, #16]
 80008a6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008aa:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80008ae:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008b0:	e78a      	b.n	80007c8 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008b2:	68e2      	ldr	r2, [r4, #12]
 80008b4:	4b73      	ldr	r3, [pc, #460]	; (8000a84 <HAL_RCC_OscConfig+0x2d8>)
 80008b6:	b1b2      	cbz	r2, 80008e6 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80008b8:	2201      	movs	r2, #1
 80008ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008bc:	f7ff fe36 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008c0:	4d6f      	ldr	r5, [pc, #444]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008c2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008c4:	682b      	ldr	r3, [r5, #0]
 80008c6:	0798      	lsls	r0, r3, #30
 80008c8:	d507      	bpl.n	80008da <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ca:	682b      	ldr	r3, [r5, #0]
 80008cc:	6922      	ldr	r2, [r4, #16]
 80008ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80008d2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008d6:	602b      	str	r3, [r5, #0]
 80008d8:	e776      	b.n	80007c8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008da:	f7ff fe27 	bl	800052c <HAL_GetTick>
 80008de:	1b80      	subs	r0, r0, r6
 80008e0:	2802      	cmp	r0, #2
 80008e2:	d9ef      	bls.n	80008c4 <HAL_RCC_OscConfig+0x118>
 80008e4:	e7a9      	b.n	800083a <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80008e6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008e8:	f7ff fe20 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008ec:	4d64      	ldr	r5, [pc, #400]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008f0:	682b      	ldr	r3, [r5, #0]
 80008f2:	0799      	lsls	r1, r3, #30
 80008f4:	f57f af68 	bpl.w	80007c8 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008f8:	f7ff fe18 	bl	800052c <HAL_GetTick>
 80008fc:	1b80      	subs	r0, r0, r6
 80008fe:	2802      	cmp	r0, #2
 8000900:	d9f6      	bls.n	80008f0 <HAL_RCC_OscConfig+0x144>
 8000902:	e79a      	b.n	800083a <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000904:	6962      	ldr	r2, [r4, #20]
 8000906:	4b60      	ldr	r3, [pc, #384]	; (8000a88 <HAL_RCC_OscConfig+0x2dc>)
 8000908:	b17a      	cbz	r2, 800092a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800090a:	2201      	movs	r2, #1
 800090c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800090e:	f7ff fe0d 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000912:	4d5b      	ldr	r5, [pc, #364]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000914:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000916:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000918:	079f      	lsls	r7, r3, #30
 800091a:	f53f af59 	bmi.w	80007d0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800091e:	f7ff fe05 	bl	800052c <HAL_GetTick>
 8000922:	1b80      	subs	r0, r0, r6
 8000924:	2802      	cmp	r0, #2
 8000926:	d9f6      	bls.n	8000916 <HAL_RCC_OscConfig+0x16a>
 8000928:	e787      	b.n	800083a <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800092a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800092c:	f7ff fdfe 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000930:	4d53      	ldr	r5, [pc, #332]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000932:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000934:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000936:	0798      	lsls	r0, r3, #30
 8000938:	f57f af4a 	bpl.w	80007d0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800093c:	f7ff fdf6 	bl	800052c <HAL_GetTick>
 8000940:	1b80      	subs	r0, r0, r6
 8000942:	2802      	cmp	r0, #2
 8000944:	d9f6      	bls.n	8000934 <HAL_RCC_OscConfig+0x188>
 8000946:	e778      	b.n	800083a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000948:	4b4d      	ldr	r3, [pc, #308]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
 800094a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800094c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000950:	d128      	bne.n	80009a4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000952:	9201      	str	r2, [sp, #4]
 8000954:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000956:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800095a:	641a      	str	r2, [r3, #64]	; 0x40
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	9301      	str	r3, [sp, #4]
 8000964:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000966:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000968:	4d48      	ldr	r5, [pc, #288]	; (8000a8c <HAL_RCC_OscConfig+0x2e0>)
 800096a:	682b      	ldr	r3, [r5, #0]
 800096c:	05d9      	lsls	r1, r3, #23
 800096e:	d51b      	bpl.n	80009a8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000970:	68a3      	ldr	r3, [r4, #8]
 8000972:	4d43      	ldr	r5, [pc, #268]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
 8000974:	2b01      	cmp	r3, #1
 8000976:	d127      	bne.n	80009c8 <HAL_RCC_OscConfig+0x21c>
 8000978:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000980:	f7ff fdd4 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000984:	4d3e      	ldr	r5, [pc, #248]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000986:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000988:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800098c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800098e:	079b      	lsls	r3, r3, #30
 8000990:	d539      	bpl.n	8000a06 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000992:	2e00      	cmp	r6, #0
 8000994:	f43f af20 	beq.w	80007d8 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000998:	4a39      	ldr	r2, [pc, #228]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
 800099a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800099c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009a0:	6413      	str	r3, [r2, #64]	; 0x40
 80009a2:	e719      	b.n	80007d8 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80009a4:	2600      	movs	r6, #0
 80009a6:	e7df      	b.n	8000968 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009a8:	682b      	ldr	r3, [r5, #0]
 80009aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ae:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009b0:	f7ff fdbc 	bl	800052c <HAL_GetTick>
 80009b4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009b6:	682b      	ldr	r3, [r5, #0]
 80009b8:	05da      	lsls	r2, r3, #23
 80009ba:	d4d9      	bmi.n	8000970 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009bc:	f7ff fdb6 	bl	800052c <HAL_GetTick>
 80009c0:	1bc0      	subs	r0, r0, r7
 80009c2:	2802      	cmp	r0, #2
 80009c4:	d9f7      	bls.n	80009b6 <HAL_RCC_OscConfig+0x20a>
 80009c6:	e738      	b.n	800083a <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009c8:	2b05      	cmp	r3, #5
 80009ca:	d104      	bne.n	80009d6 <HAL_RCC_OscConfig+0x22a>
 80009cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009ce:	f043 0304 	orr.w	r3, r3, #4
 80009d2:	672b      	str	r3, [r5, #112]	; 0x70
 80009d4:	e7d0      	b.n	8000978 <HAL_RCC_OscConfig+0x1cc>
 80009d6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80009d8:	f022 0201 	bic.w	r2, r2, #1
 80009dc:	672a      	str	r2, [r5, #112]	; 0x70
 80009de:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80009e0:	f022 0204 	bic.w	r2, r2, #4
 80009e4:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d1ca      	bne.n	8000980 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80009ea:	f7ff fd9f 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009ee:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80009f2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009f4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009f6:	0798      	lsls	r0, r3, #30
 80009f8:	d5cb      	bpl.n	8000992 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009fa:	f7ff fd97 	bl	800052c <HAL_GetTick>
 80009fe:	1bc0      	subs	r0, r0, r7
 8000a00:	4540      	cmp	r0, r8
 8000a02:	d9f7      	bls.n	80009f4 <HAL_RCC_OscConfig+0x248>
 8000a04:	e719      	b.n	800083a <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a06:	f7ff fd91 	bl	800052c <HAL_GetTick>
 8000a0a:	1bc0      	subs	r0, r0, r7
 8000a0c:	4540      	cmp	r0, r8
 8000a0e:	d9bd      	bls.n	800098c <HAL_RCC_OscConfig+0x1e0>
 8000a10:	e713      	b.n	800083a <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a12:	4d1b      	ldr	r5, [pc, #108]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
 8000a14:	68ab      	ldr	r3, [r5, #8]
 8000a16:	f003 030c 	and.w	r3, r3, #12
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	f43f aeca 	beq.w	80007b4 <HAL_RCC_OscConfig+0x8>
 8000a20:	4e1b      	ldr	r6, [pc, #108]	; (8000a90 <HAL_RCC_OscConfig+0x2e4>)
 8000a22:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a24:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a26:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a28:	d134      	bne.n	8000a94 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a2a:	f7ff fd7f 	bl	800052c <HAL_GetTick>
 8000a2e:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a30:	682b      	ldr	r3, [r5, #0]
 8000a32:	0199      	lsls	r1, r3, #6
 8000a34:	d41e      	bmi.n	8000a74 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a36:	6a22      	ldr	r2, [r4, #32]
 8000a38:	69e3      	ldr	r3, [r4, #28]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a3e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a48:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a4a:	4c0d      	ldr	r4, [pc, #52]	; (8000a80 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a4c:	0852      	lsrs	r2, r2, #1
 8000a4e:	3a01      	subs	r2, #1
 8000a50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a54:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a56:	2301      	movs	r3, #1
 8000a58:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a5a:	f7ff fd67 	bl	800052c <HAL_GetTick>
 8000a5e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a60:	6823      	ldr	r3, [r4, #0]
 8000a62:	019a      	lsls	r2, r3, #6
 8000a64:	f53f aebc 	bmi.w	80007e0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a68:	f7ff fd60 	bl	800052c <HAL_GetTick>
 8000a6c:	1b40      	subs	r0, r0, r5
 8000a6e:	2802      	cmp	r0, #2
 8000a70:	d9f6      	bls.n	8000a60 <HAL_RCC_OscConfig+0x2b4>
 8000a72:	e6e2      	b.n	800083a <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a74:	f7ff fd5a 	bl	800052c <HAL_GetTick>
 8000a78:	1bc0      	subs	r0, r0, r7
 8000a7a:	2802      	cmp	r0, #2
 8000a7c:	d9d8      	bls.n	8000a30 <HAL_RCC_OscConfig+0x284>
 8000a7e:	e6dc      	b.n	800083a <HAL_RCC_OscConfig+0x8e>
 8000a80:	40023800 	.word	0x40023800
 8000a84:	42470000 	.word	0x42470000
 8000a88:	42470e80 	.word	0x42470e80
 8000a8c:	40007000 	.word	0x40007000
 8000a90:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000a94:	f7ff fd4a 	bl	800052c <HAL_GetTick>
 8000a98:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a9a:	682b      	ldr	r3, [r5, #0]
 8000a9c:	019b      	lsls	r3, r3, #6
 8000a9e:	f57f ae9f 	bpl.w	80007e0 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000aa2:	f7ff fd43 	bl	800052c <HAL_GetTick>
 8000aa6:	1b00      	subs	r0, r0, r4
 8000aa8:	2802      	cmp	r0, #2
 8000aaa:	d9f6      	bls.n	8000a9a <HAL_RCC_OscConfig+0x2ee>
 8000aac:	e6c5      	b.n	800083a <HAL_RCC_OscConfig+0x8e>
 8000aae:	bf00      	nop

08000ab0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ab0:	4913      	ldr	r1, [pc, #76]	; (8000b00 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ab2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ab4:	688b      	ldr	r3, [r1, #8]
 8000ab6:	f003 030c 	and.w	r3, r3, #12
 8000aba:	2b04      	cmp	r3, #4
 8000abc:	d003      	beq.n	8000ac6 <HAL_RCC_GetSysClockFreq+0x16>
 8000abe:	2b08      	cmp	r3, #8
 8000ac0:	d003      	beq.n	8000aca <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ac2:	4810      	ldr	r0, [pc, #64]	; (8000b04 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ac4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000ac6:	4810      	ldr	r0, [pc, #64]	; (8000b08 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ac8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000aca:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000acc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ace:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ad0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ad4:	bf14      	ite	ne
 8000ad6:	480c      	ldrne	r0, [pc, #48]	; (8000b08 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ad8:	480a      	ldreq	r0, [pc, #40]	; (8000b04 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ada:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000ade:	bf18      	it	ne
 8000ae0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ae2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ae6:	fba1 0100 	umull	r0, r1, r1, r0
 8000aea:	f7ff fb71 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000aee:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <HAL_RCC_GetSysClockFreq+0x50>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000af6:	3301      	adds	r3, #1
 8000af8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000afa:	fbb0 f0f3 	udiv	r0, r0, r3
 8000afe:	bd08      	pop	{r3, pc}
 8000b00:	40023800 	.word	0x40023800
 8000b04:	00f42400 	.word	0x00f42400
 8000b08:	007a1200 	.word	0x007a1200

08000b0c <HAL_RCC_ClockConfig>:
{
 8000b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b10:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b12:	4604      	mov	r4, r0
 8000b14:	b910      	cbnz	r0, 8000b1c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b16:	2001      	movs	r0, #1
 8000b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b1c:	4b44      	ldr	r3, [pc, #272]	; (8000c30 <HAL_RCC_ClockConfig+0x124>)
 8000b1e:	681a      	ldr	r2, [r3, #0]
 8000b20:	f002 020f 	and.w	r2, r2, #15
 8000b24:	428a      	cmp	r2, r1
 8000b26:	d328      	bcc.n	8000b7a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b28:	6821      	ldr	r1, [r4, #0]
 8000b2a:	078f      	lsls	r7, r1, #30
 8000b2c:	d42d      	bmi.n	8000b8a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b2e:	07c8      	lsls	r0, r1, #31
 8000b30:	d440      	bmi.n	8000bb4 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b32:	4b3f      	ldr	r3, [pc, #252]	; (8000c30 <HAL_RCC_ClockConfig+0x124>)
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	f002 020f 	and.w	r2, r2, #15
 8000b3a:	4295      	cmp	r5, r2
 8000b3c:	d366      	bcc.n	8000c0c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b3e:	6822      	ldr	r2, [r4, #0]
 8000b40:	0751      	lsls	r1, r2, #29
 8000b42:	d46c      	bmi.n	8000c1e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b44:	0713      	lsls	r3, r2, #28
 8000b46:	d507      	bpl.n	8000b58 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b48:	4a3a      	ldr	r2, [pc, #232]	; (8000c34 <HAL_RCC_ClockConfig+0x128>)
 8000b4a:	6921      	ldr	r1, [r4, #16]
 8000b4c:	6893      	ldr	r3, [r2, #8]
 8000b4e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b52:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b56:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b58:	f7ff ffaa 	bl	8000ab0 <HAL_RCC_GetSysClockFreq>
 8000b5c:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <HAL_RCC_ClockConfig+0x128>)
 8000b5e:	4a36      	ldr	r2, [pc, #216]	; (8000c38 <HAL_RCC_ClockConfig+0x12c>)
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b66:	5cd3      	ldrb	r3, [r2, r3]
 8000b68:	40d8      	lsrs	r0, r3
 8000b6a:	4b34      	ldr	r3, [pc, #208]	; (8000c3c <HAL_RCC_ClockConfig+0x130>)
 8000b6c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f001 fb56 	bl	8002220 <HAL_InitTick>
  return HAL_OK;
 8000b74:	2000      	movs	r0, #0
 8000b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b7a:	b2ca      	uxtb	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f003 030f 	and.w	r3, r3, #15
 8000b84:	4299      	cmp	r1, r3
 8000b86:	d1c6      	bne.n	8000b16 <HAL_RCC_ClockConfig+0xa>
 8000b88:	e7ce      	b.n	8000b28 <HAL_RCC_ClockConfig+0x1c>
 8000b8a:	4b2a      	ldr	r3, [pc, #168]	; (8000c34 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b8c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000b90:	bf1e      	ittt	ne
 8000b92:	689a      	ldrne	r2, [r3, #8]
 8000b94:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000b98:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b9a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000b9c:	bf42      	ittt	mi
 8000b9e:	689a      	ldrmi	r2, [r3, #8]
 8000ba0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000ba4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	68a0      	ldr	r0, [r4, #8]
 8000baa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000bae:	4302      	orrs	r2, r0
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	e7bc      	b.n	8000b2e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bb4:	6862      	ldr	r2, [r4, #4]
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <HAL_RCC_ClockConfig+0x128>)
 8000bb8:	2a01      	cmp	r2, #1
 8000bba:	d11d      	bne.n	8000bf8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc2:	d0a8      	beq.n	8000b16 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bc4:	4e1b      	ldr	r6, [pc, #108]	; (8000c34 <HAL_RCC_ClockConfig+0x128>)
 8000bc6:	68b3      	ldr	r3, [r6, #8]
 8000bc8:	f023 0303 	bic.w	r3, r3, #3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000bd0:	f7ff fcac 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bd4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000bd8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bda:	68b3      	ldr	r3, [r6, #8]
 8000bdc:	6862      	ldr	r2, [r4, #4]
 8000bde:	f003 030c 	and.w	r3, r3, #12
 8000be2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000be6:	d0a4      	beq.n	8000b32 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000be8:	f7ff fca0 	bl	800052c <HAL_GetTick>
 8000bec:	1bc0      	subs	r0, r0, r7
 8000bee:	4540      	cmp	r0, r8
 8000bf0:	d9f3      	bls.n	8000bda <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000bf2:	2003      	movs	r0, #3
}
 8000bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bf8:	1e91      	subs	r1, r2, #2
 8000bfa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000bfc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bfe:	d802      	bhi.n	8000c06 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c00:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c04:	e7dd      	b.n	8000bc2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c06:	f013 0f02 	tst.w	r3, #2
 8000c0a:	e7da      	b.n	8000bc2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c0c:	b2ea      	uxtb	r2, r5
 8000c0e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	429d      	cmp	r5, r3
 8000c18:	f47f af7d 	bne.w	8000b16 <HAL_RCC_ClockConfig+0xa>
 8000c1c:	e78f      	b.n	8000b3e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c1e:	4905      	ldr	r1, [pc, #20]	; (8000c34 <HAL_RCC_ClockConfig+0x128>)
 8000c20:	68e0      	ldr	r0, [r4, #12]
 8000c22:	688b      	ldr	r3, [r1, #8]
 8000c24:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c28:	4303      	orrs	r3, r0
 8000c2a:	608b      	str	r3, [r1, #8]
 8000c2c:	e78a      	b.n	8000b44 <HAL_RCC_ClockConfig+0x38>
 8000c2e:	bf00      	nop
 8000c30:	40023c00 	.word	0x40023c00
 8000c34:	40023800 	.word	0x40023800
 8000c38:	0800245b 	.word	0x0800245b
 8000c3c:	20000008 	.word	0x20000008

08000c40 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c40:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000c4a:	5cd3      	ldrb	r3, [r2, r3]
 8000c4c:	4a03      	ldr	r2, [pc, #12]	; (8000c5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c4e:	6810      	ldr	r0, [r2, #0]
}
 8000c50:	40d8      	lsrs	r0, r3
 8000c52:	4770      	bx	lr
 8000c54:	40023800 	.word	0x40023800
 8000c58:	0800246b 	.word	0x0800246b
 8000c5c:	20000008 	.word	0x20000008

08000c60 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c60:	230f      	movs	r3, #15
 8000c62:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000c64:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_RCC_GetClockConfig+0x34>)
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	f002 0203 	and.w	r2, r2, #3
 8000c6c:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000c74:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000c76:	689a      	ldr	r2, [r3, #8]
 8000c78:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000c7c:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	08db      	lsrs	r3, r3, #3
 8000c82:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000c86:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <HAL_RCC_GetClockConfig+0x38>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 030f 	and.w	r3, r3, #15
 8000c90:	600b      	str	r3, [r1, #0]
 8000c92:	4770      	bx	lr
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40023c00 	.word	0x40023c00

08000c9c <HAL_TIM_Base_MspInit>:
 8000c9c:	4770      	bx	lr

08000c9e <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000c9e:	6803      	ldr	r3, [r0, #0]
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	f042 0201 	orr.w	r2, r2, #1
 8000ca6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000ca8:	689a      	ldr	r2, [r3, #8]
 8000caa:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000cae:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000cb0:	bf1e      	ittt	ne
 8000cb2:	681a      	ldrne	r2, [r3, #0]
 8000cb4:	f042 0201 	orrne.w	r2, r2, #1
 8000cb8:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000cba:	2000      	movs	r0, #0
 8000cbc:	4770      	bx	lr

08000cbe <HAL_TIM_OC_DelayElapsedCallback>:
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_TIM_IC_CaptureCallback>:
 8000cc0:	4770      	bx	lr

08000cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000cc2:	4770      	bx	lr

08000cc4 <HAL_TIM_TriggerCallback>:
 8000cc4:	4770      	bx	lr

08000cc6 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cc6:	6803      	ldr	r3, [r0, #0]
 8000cc8:	691a      	ldr	r2, [r3, #16]
 8000cca:	0791      	lsls	r1, r2, #30
{
 8000ccc:	b510      	push	{r4, lr}
 8000cce:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cd0:	d50e      	bpl.n	8000cf0 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	0792      	lsls	r2, r2, #30
 8000cd6:	d50b      	bpl.n	8000cf0 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000cd8:	f06f 0202 	mvn.w	r2, #2
 8000cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000cde:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ce0:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ce2:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000ce4:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ce6:	d077      	beq.n	8000dd8 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000ce8:	f7ff ffea 	bl	8000cc0 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cec:	2300      	movs	r3, #0
 8000cee:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	0750      	lsls	r0, r2, #29
 8000cf6:	d510      	bpl.n	8000d1a <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000cf8:	68da      	ldr	r2, [r3, #12]
 8000cfa:	0751      	lsls	r1, r2, #29
 8000cfc:	d50d      	bpl.n	8000d1a <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000cfe:	f06f 0204 	mvn.w	r2, #4
 8000d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d04:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d06:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d08:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d0c:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d0e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d10:	d068      	beq.n	8000de4 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d12:	f7ff ffd5 	bl	8000cc0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d16:	2300      	movs	r3, #0
 8000d18:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d1a:	6823      	ldr	r3, [r4, #0]
 8000d1c:	691a      	ldr	r2, [r3, #16]
 8000d1e:	0712      	lsls	r2, r2, #28
 8000d20:	d50f      	bpl.n	8000d42 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	0710      	lsls	r0, r2, #28
 8000d26:	d50c      	bpl.n	8000d42 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d28:	f06f 0208 	mvn.w	r2, #8
 8000d2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d2e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d30:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d32:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d34:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d36:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d38:	d05a      	beq.n	8000df0 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d3a:	f7ff ffc1 	bl	8000cc0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d42:	6823      	ldr	r3, [r4, #0]
 8000d44:	691a      	ldr	r2, [r3, #16]
 8000d46:	06d2      	lsls	r2, r2, #27
 8000d48:	d510      	bpl.n	8000d6c <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000d4a:	68da      	ldr	r2, [r3, #12]
 8000d4c:	06d0      	lsls	r0, r2, #27
 8000d4e:	d50d      	bpl.n	8000d6c <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000d50:	f06f 0210 	mvn.w	r2, #16
 8000d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d56:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d58:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d5a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d5e:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d60:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d62:	d04b      	beq.n	8000dfc <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d64:	f7ff ffac 	bl	8000cc0 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000d6c:	6823      	ldr	r3, [r4, #0]
 8000d6e:	691a      	ldr	r2, [r3, #16]
 8000d70:	07d1      	lsls	r1, r2, #31
 8000d72:	d508      	bpl.n	8000d86 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000d74:	68da      	ldr	r2, [r3, #12]
 8000d76:	07d2      	lsls	r2, r2, #31
 8000d78:	d505      	bpl.n	8000d86 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000d7a:	f06f 0201 	mvn.w	r2, #1
 8000d7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000d80:	4620      	mov	r0, r4
 8000d82:	f001 fa1b 	bl	80021bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000d86:	6823      	ldr	r3, [r4, #0]
 8000d88:	691a      	ldr	r2, [r3, #16]
 8000d8a:	0610      	lsls	r0, r2, #24
 8000d8c:	d508      	bpl.n	8000da0 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000d8e:	68da      	ldr	r2, [r3, #12]
 8000d90:	0611      	lsls	r1, r2, #24
 8000d92:	d505      	bpl.n	8000da0 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	f000 f8b7 	bl	8000f0e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	691a      	ldr	r2, [r3, #16]
 8000da4:	0652      	lsls	r2, r2, #25
 8000da6:	d508      	bpl.n	8000dba <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	0650      	lsls	r0, r2, #25
 8000dac:	d505      	bpl.n	8000dba <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000dae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000db2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000db4:	4620      	mov	r0, r4
 8000db6:	f7ff ff85 	bl	8000cc4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000dba:	6823      	ldr	r3, [r4, #0]
 8000dbc:	691a      	ldr	r2, [r3, #16]
 8000dbe:	0691      	lsls	r1, r2, #26
 8000dc0:	d522      	bpl.n	8000e08 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	0692      	lsls	r2, r2, #26
 8000dc6:	d51f      	bpl.n	8000e08 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000dc8:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000dcc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000dce:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000dd4:	f000 b89a 	b.w	8000f0c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000dd8:	f7ff ff71 	bl	8000cbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000ddc:	4620      	mov	r0, r4
 8000dde:	f7ff ff70 	bl	8000cc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8000de2:	e783      	b.n	8000cec <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000de4:	f7ff ff6b 	bl	8000cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000de8:	4620      	mov	r0, r4
 8000dea:	f7ff ff6a 	bl	8000cc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8000dee:	e792      	b.n	8000d16 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000df0:	f7ff ff65 	bl	8000cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000df4:	4620      	mov	r0, r4
 8000df6:	f7ff ff64 	bl	8000cc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8000dfa:	e7a0      	b.n	8000d3e <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000dfc:	f7ff ff5f 	bl	8000cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff ff5e 	bl	8000cc2 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e06:	e7af      	b.n	8000d68 <HAL_TIM_IRQHandler+0xa2>
 8000e08:	bd10      	pop	{r4, pc}
	...

08000e0c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e0c:	4a30      	ldr	r2, [pc, #192]	; (8000ed0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8000e0e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e10:	4290      	cmp	r0, r2
 8000e12:	d012      	beq.n	8000e3a <TIM_Base_SetConfig+0x2e>
 8000e14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e18:	d00f      	beq.n	8000e3a <TIM_Base_SetConfig+0x2e>
 8000e1a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	d00b      	beq.n	8000e3a <TIM_Base_SetConfig+0x2e>
 8000e22:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e26:	4290      	cmp	r0, r2
 8000e28:	d007      	beq.n	8000e3a <TIM_Base_SetConfig+0x2e>
 8000e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e2e:	4290      	cmp	r0, r2
 8000e30:	d003      	beq.n	8000e3a <TIM_Base_SetConfig+0x2e>
 8000e32:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e36:	4290      	cmp	r0, r2
 8000e38:	d119      	bne.n	8000e6e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e3a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e40:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e42:	4a23      	ldr	r2, [pc, #140]	; (8000ed0 <TIM_Base_SetConfig+0xc4>)
 8000e44:	4290      	cmp	r0, r2
 8000e46:	d029      	beq.n	8000e9c <TIM_Base_SetConfig+0x90>
 8000e48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e4c:	d026      	beq.n	8000e9c <TIM_Base_SetConfig+0x90>
 8000e4e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d022      	beq.n	8000e9c <TIM_Base_SetConfig+0x90>
 8000e56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	d01e      	beq.n	8000e9c <TIM_Base_SetConfig+0x90>
 8000e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e62:	4290      	cmp	r0, r2
 8000e64:	d01a      	beq.n	8000e9c <TIM_Base_SetConfig+0x90>
 8000e66:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e6a:	4290      	cmp	r0, r2
 8000e6c:	d016      	beq.n	8000e9c <TIM_Base_SetConfig+0x90>
 8000e6e:	4a19      	ldr	r2, [pc, #100]	; (8000ed4 <TIM_Base_SetConfig+0xc8>)
 8000e70:	4290      	cmp	r0, r2
 8000e72:	d013      	beq.n	8000e9c <TIM_Base_SetConfig+0x90>
 8000e74:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e78:	4290      	cmp	r0, r2
 8000e7a:	d00f      	beq.n	8000e9c <TIM_Base_SetConfig+0x90>
 8000e7c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e80:	4290      	cmp	r0, r2
 8000e82:	d00b      	beq.n	8000e9c <TIM_Base_SetConfig+0x90>
 8000e84:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000e88:	4290      	cmp	r0, r2
 8000e8a:	d007      	beq.n	8000e9c <TIM_Base_SetConfig+0x90>
 8000e8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e90:	4290      	cmp	r0, r2
 8000e92:	d003      	beq.n	8000e9c <TIM_Base_SetConfig+0x90>
 8000e94:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e98:	4290      	cmp	r0, r2
 8000e9a:	d103      	bne.n	8000ea4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000e9c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ea2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000ea4:	694a      	ldr	r2, [r1, #20]
 8000ea6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000eaa:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000eac:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000eae:	688b      	ldr	r3, [r1, #8]
 8000eb0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000eb2:	680b      	ldr	r3, [r1, #0]
 8000eb4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <TIM_Base_SetConfig+0xc4>)
 8000eb8:	4298      	cmp	r0, r3
 8000eba:	d003      	beq.n	8000ec4 <TIM_Base_SetConfig+0xb8>
 8000ebc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ec0:	4298      	cmp	r0, r3
 8000ec2:	d101      	bne.n	8000ec8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000ec4:	690b      	ldr	r3, [r1, #16]
 8000ec6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	6143      	str	r3, [r0, #20]
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	40014000 	.word	0x40014000

08000ed8 <HAL_TIM_Base_Init>:
{
 8000ed8:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000eda:	4604      	mov	r4, r0
 8000edc:	b1a0      	cbz	r0, 8000f08 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000ede:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000ee2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000ee6:	b91b      	cbnz	r3, 8000ef0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000ee8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000eec:	f7ff fed6 	bl	8000c9c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000ef6:	6820      	ldr	r0, [r4, #0]
 8000ef8:	1d21      	adds	r1, r4, #4
 8000efa:	f7ff ff87 	bl	8000e0c <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000efe:	2301      	movs	r3, #1
 8000f00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f04:	2000      	movs	r0, #0
 8000f06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f08:	2001      	movs	r0, #1
}
 8000f0a:	bd10      	pop	{r4, pc}

08000f0c <HAL_TIMEx_CommutCallback>:
 8000f0c:	4770      	bx	lr

08000f0e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000f0e:	4770      	bx	lr

08000f10 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000f10:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000f12:	f000 fdcb 	bl	8001aac <vTaskStartScheduler>
  
  return osOK;
}
 8000f16:	2000      	movs	r0, #0
 8000f18:	bd08      	pop	{r3, pc}

08000f1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000f1a:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f1c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8000f20:	8a02      	ldrh	r2, [r0, #16]
{
 8000f22:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f24:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8000f28:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8000f2a:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8000f2c:	bf14      	ite	ne
 8000f2e:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000f30:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f32:	a803      	add	r0, sp, #12
 8000f34:	9001      	str	r0, [sp, #4]
 8000f36:	9400      	str	r4, [sp, #0]
 8000f38:	4628      	mov	r0, r5
 8000f3a:	f000 fce7 	bl	800190c <xTaskCreate>
 8000f3e:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8000f40:	bf0c      	ite	eq
 8000f42:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8000f44:	2000      	movne	r0, #0
}
 8000f46:	b005      	add	sp, #20
 8000f48:	bd30      	pop	{r4, r5, pc}

08000f4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8000f4a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8000f4c:	2800      	cmp	r0, #0
 8000f4e:	bf08      	it	eq
 8000f50:	2001      	moveq	r0, #1
 8000f52:	f000 fef9 	bl	8001d48 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8000f56:	2000      	movs	r0, #0
 8000f58:	bd08      	pop	{r3, pc}

08000f5a <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f000 bc36 	b.w	80017cc <xQueueCreateMutex>

08000f60 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f60:	f100 0308 	add.w	r3, r0, #8
 8000f64:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f66:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f6a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000f6c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000f6e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000f70:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000f72:	6003      	str	r3, [r0, #0]
 8000f74:	4770      	bx	lr

08000f76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	6103      	str	r3, [r0, #16]
 8000f7a:	4770      	bx	lr

08000f7c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8000f7c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000f7e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000f88:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000f8a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000f8c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000f8e:	3301      	adds	r3, #1
 8000f90:	6003      	str	r3, [r0, #0]
 8000f92:	4770      	bx	lr

08000f94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000f94:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000f96:	1c53      	adds	r3, r2, #1
{
 8000f98:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8000f9a:	d10a      	bne.n	8000fb2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000f9c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000fa2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000fa4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8000fa6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8000fa8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000faa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8000fac:	3301      	adds	r3, #1
 8000fae:	6003      	str	r3, [r0, #0]
 8000fb0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000fb2:	f100 0308 	add.w	r3, r0, #8
 8000fb6:	685c      	ldr	r4, [r3, #4]
 8000fb8:	6825      	ldr	r5, [r4, #0]
 8000fba:	42aa      	cmp	r2, r5
 8000fbc:	d3ef      	bcc.n	8000f9e <vListInsert+0xa>
 8000fbe:	4623      	mov	r3, r4
 8000fc0:	e7f9      	b.n	8000fb6 <vListInsert+0x22>

08000fc2 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000fc2:	6841      	ldr	r1, [r0, #4]
 8000fc4:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000fc6:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000fc8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000fca:	6882      	ldr	r2, [r0, #8]
 8000fcc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000fce:	6859      	ldr	r1, [r3, #4]
 8000fd0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000fd2:	bf08      	it	eq
 8000fd4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	3a01      	subs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000fe0:	6818      	ldr	r0, [r3, #0]
}
 8000fe2:	4770      	bx	lr

08000fe4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000fe4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8000fea:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <prvTaskExitError+0x3c>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	d008      	beq.n	8001004 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff6:	f383 8811 	msr	BASEPRI, r3
 8000ffa:	f3bf 8f6f 	isb	sy
 8000ffe:	f3bf 8f4f 	dsb	sy
 8001002:	e7fe      	b.n	8001002 <prvTaskExitError+0x1e>
 8001004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001008:	f383 8811 	msr	BASEPRI, r3
 800100c:	f3bf 8f6f 	isb	sy
 8001010:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001014:	9b01      	ldr	r3, [sp, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0fc      	beq.n	8001014 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800101a:	b002      	add	sp, #8
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000004 	.word	0x20000004

08001024 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001024:	4808      	ldr	r0, [pc, #32]	; (8001048 <prvPortStartFirstTask+0x24>)
 8001026:	6800      	ldr	r0, [r0, #0]
 8001028:	6800      	ldr	r0, [r0, #0]
 800102a:	f380 8808 	msr	MSP, r0
 800102e:	f04f 0000 	mov.w	r0, #0
 8001032:	f380 8814 	msr	CONTROL, r0
 8001036:	b662      	cpsie	i
 8001038:	b661      	cpsie	f
 800103a:	f3bf 8f4f 	dsb	sy
 800103e:	f3bf 8f6f 	isb	sy
 8001042:	df00      	svc	0
 8001044:	bf00      	nop
 8001046:	0000      	.short	0x0000
 8001048:	e000ed08 	.word	0xe000ed08

0800104c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800104c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800105c <vPortEnableVFP+0x10>
 8001050:	6801      	ldr	r1, [r0, #0]
 8001052:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001056:	6001      	str	r1, [r0, #0]
 8001058:	4770      	bx	lr
 800105a:	0000      	.short	0x0000
 800105c:	e000ed88 	.word	0xe000ed88

08001060 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001064:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001068:	4b07      	ldr	r3, [pc, #28]	; (8001088 <pxPortInitialiseStack+0x28>)
 800106a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800106e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001072:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001076:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800107a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800107e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001082:	3844      	subs	r0, #68	; 0x44
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	08000fe5 	.word	0x08000fe5
 800108c:	00000000 	.word	0x00000000

08001090 <SVC_Handler>:
	__asm volatile (
 8001090:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <pxCurrentTCBConst2>)
 8001092:	6819      	ldr	r1, [r3, #0]
 8001094:	6808      	ldr	r0, [r1, #0]
 8001096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800109a:	f380 8809 	msr	PSP, r0
 800109e:	f3bf 8f6f 	isb	sy
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	f380 8811 	msr	BASEPRI, r0
 80010aa:	4770      	bx	lr
 80010ac:	f3af 8000 	nop.w

080010b0 <pxCurrentTCBConst2>:
 80010b0:	20003c48 	.word	0x20003c48

080010b4 <vPortEnterCritical>:
 80010b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010b8:	f383 8811 	msr	BASEPRI, r3
 80010bc:	f3bf 8f6f 	isb	sy
 80010c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80010c4:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <vPortEnterCritical+0x3c>)
 80010c6:	6813      	ldr	r3, [r2, #0]
 80010c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80010ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80010cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80010ce:	d10d      	bne.n	80010ec <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80010d0:	4b08      	ldr	r3, [pc, #32]	; (80010f4 <vPortEnterCritical+0x40>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80010d8:	d008      	beq.n	80010ec <vPortEnterCritical+0x38>
 80010da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010de:	f383 8811 	msr	BASEPRI, r3
 80010e2:	f3bf 8f6f 	isb	sy
 80010e6:	f3bf 8f4f 	dsb	sy
 80010ea:	e7fe      	b.n	80010ea <vPortEnterCritical+0x36>
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000004 	.word	0x20000004
 80010f4:	e000ed04 	.word	0xe000ed04

080010f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80010f8:	4a08      	ldr	r2, [pc, #32]	; (800111c <vPortExitCritical+0x24>)
 80010fa:	6813      	ldr	r3, [r2, #0]
 80010fc:	b943      	cbnz	r3, 8001110 <vPortExitCritical+0x18>
 80010fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001102:	f383 8811 	msr	BASEPRI, r3
 8001106:	f3bf 8f6f 	isb	sy
 800110a:	f3bf 8f4f 	dsb	sy
 800110e:	e7fe      	b.n	800110e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001110:	3b01      	subs	r3, #1
 8001112:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001114:	b90b      	cbnz	r3, 800111a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001116:	f383 8811 	msr	BASEPRI, r3
 800111a:	4770      	bx	lr
 800111c:	20000004 	.word	0x20000004

08001120 <PendSV_Handler>:
	__asm volatile
 8001120:	f3ef 8009 	mrs	r0, PSP
 8001124:	f3bf 8f6f 	isb	sy
 8001128:	4b15      	ldr	r3, [pc, #84]	; (8001180 <pxCurrentTCBConst>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	f01e 0f10 	tst.w	lr, #16
 8001130:	bf08      	it	eq
 8001132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800113a:	6010      	str	r0, [r2, #0]
 800113c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001140:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001144:	f380 8811 	msr	BASEPRI, r0
 8001148:	f3bf 8f4f 	dsb	sy
 800114c:	f3bf 8f6f 	isb	sy
 8001150:	f000 fe1e 	bl	8001d90 <vTaskSwitchContext>
 8001154:	f04f 0000 	mov.w	r0, #0
 8001158:	f380 8811 	msr	BASEPRI, r0
 800115c:	bc09      	pop	{r0, r3}
 800115e:	6819      	ldr	r1, [r3, #0]
 8001160:	6808      	ldr	r0, [r1, #0]
 8001162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001166:	f01e 0f10 	tst.w	lr, #16
 800116a:	bf08      	it	eq
 800116c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001170:	f380 8809 	msr	PSP, r0
 8001174:	f3bf 8f6f 	isb	sy
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	f3af 8000 	nop.w

08001180 <pxCurrentTCBConst>:
 8001180:	20003c48 	.word	0x20003c48

08001184 <SysTick_Handler>:
{
 8001184:	b508      	push	{r3, lr}
	__asm volatile
 8001186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800118a:	f383 8811 	msr	BASEPRI, r3
 800118e:	f3bf 8f6f 	isb	sy
 8001192:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001196:	f000 fccd 	bl	8001b34 <xTaskIncrementTick>
 800119a:	b118      	cbz	r0, 80011a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800119c:	4b03      	ldr	r3, [pc, #12]	; (80011ac <SysTick_Handler+0x28>)
 800119e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80011a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80011a4:	2300      	movs	r3, #0
 80011a6:	f383 8811 	msr	BASEPRI, r3
 80011aa:	bd08      	pop	{r3, pc}
 80011ac:	e000ed04 	.word	0xe000ed04

080011b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80011b0:	4a08      	ldr	r2, [pc, #32]	; (80011d4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80011b2:	4909      	ldr	r1, [pc, #36]	; (80011d8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80011b8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80011ba:	4b08      	ldr	r3, [pc, #32]	; (80011dc <vPortSetupTimerInterrupt+0x2c>)
 80011bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011c6:	4906      	ldr	r1, [pc, #24]	; (80011e0 <vPortSetupTimerInterrupt+0x30>)
 80011c8:	3b01      	subs	r3, #1
 80011ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80011cc:	2307      	movs	r3, #7
 80011ce:	6013      	str	r3, [r2, #0]
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010
 80011d8:	e000e018 	.word	0xe000e018
 80011dc:	20000008 	.word	0x20000008
 80011e0:	e000e014 	.word	0xe000e014

080011e4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80011e4:	4b39      	ldr	r3, [pc, #228]	; (80012cc <xPortStartScheduler+0xe8>)
 80011e6:	4a3a      	ldr	r2, [pc, #232]	; (80012d0 <xPortStartScheduler+0xec>)
{
 80011e8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80011ea:	6819      	ldr	r1, [r3, #0]
 80011ec:	4291      	cmp	r1, r2
 80011ee:	d108      	bne.n	8001202 <xPortStartScheduler+0x1e>
	__asm volatile
 80011f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f4:	f383 8811 	msr	BASEPRI, r3
 80011f8:	f3bf 8f6f 	isb	sy
 80011fc:	f3bf 8f4f 	dsb	sy
 8001200:	e7fe      	b.n	8001200 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4b33      	ldr	r3, [pc, #204]	; (80012d4 <xPortStartScheduler+0xf0>)
 8001206:	429a      	cmp	r2, r3
 8001208:	d108      	bne.n	800121c <xPortStartScheduler+0x38>
 800120a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800120e:	f383 8811 	msr	BASEPRI, r3
 8001212:	f3bf 8f6f 	isb	sy
 8001216:	f3bf 8f4f 	dsb	sy
 800121a:	e7fe      	b.n	800121a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800121c:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <xPortStartScheduler+0xf4>)
 800121e:	781a      	ldrb	r2, [r3, #0]
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001224:	22ff      	movs	r2, #255	; 0xff
 8001226:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001228:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800122a:	4a2c      	ldr	r2, [pc, #176]	; (80012dc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001232:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001236:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800123a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800123c:	4b28      	ldr	r3, [pc, #160]	; (80012e0 <xPortStartScheduler+0xfc>)
 800123e:	2207      	movs	r2, #7
 8001240:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001242:	2100      	movs	r1, #0
 8001244:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001248:	0600      	lsls	r0, r0, #24
 800124a:	f102 34ff 	add.w	r4, r2, #4294967295
 800124e:	d40d      	bmi.n	800126c <xPortStartScheduler+0x88>
 8001250:	b101      	cbz	r1, 8001254 <xPortStartScheduler+0x70>
 8001252:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	2a03      	cmp	r2, #3
 8001258:	d011      	beq.n	800127e <xPortStartScheduler+0x9a>
 800125a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800125e:	f383 8811 	msr	BASEPRI, r3
 8001262:	f3bf 8f6f 	isb	sy
 8001266:	f3bf 8f4f 	dsb	sy
 800126a:	e7fe      	b.n	800126a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800126c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001270:	0052      	lsls	r2, r2, #1
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	f88d 2003 	strb.w	r2, [sp, #3]
 8001278:	2101      	movs	r1, #1
 800127a:	4622      	mov	r2, r4
 800127c:	e7e2      	b.n	8001244 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800127e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001280:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001284:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001286:	9b01      	ldr	r3, [sp, #4]
 8001288:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <xPortStartScheduler+0xf4>)
 800128a:	b2db      	uxtb	r3, r3
 800128c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <xPortStartScheduler+0x100>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001296:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800129e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80012a0:	f7ff ff86 	bl	80011b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80012a4:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <xPortStartScheduler+0x104>)
 80012a6:	2400      	movs	r4, #0
 80012a8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80012aa:	f7ff fecf 	bl	800104c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80012ae:	4a0f      	ldr	r2, [pc, #60]	; (80012ec <xPortStartScheduler+0x108>)
 80012b0:	6813      	ldr	r3, [r2, #0]
 80012b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80012b6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80012b8:	f7ff feb4 	bl	8001024 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80012bc:	f000 fd68 	bl	8001d90 <vTaskSwitchContext>
	prvTaskExitError();
 80012c0:	f7ff fe90 	bl	8000fe4 <prvTaskExitError>
}
 80012c4:	4620      	mov	r0, r4
 80012c6:	b002      	add	sp, #8
 80012c8:	bd10      	pop	{r4, pc}
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00
 80012d0:	410fc271 	.word	0x410fc271
 80012d4:	410fc270 	.word	0x410fc270
 80012d8:	e000e400 	.word	0xe000e400
 80012dc:	20000028 	.word	0x20000028
 80012e0:	2000002c 	.word	0x2000002c
 80012e4:	e000ed20 	.word	0xe000ed20
 80012e8:	20000004 	.word	0x20000004
 80012ec:	e000ef34 	.word	0xe000ef34

080012f0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80012f0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <prvInsertBlockIntoFreeList+0x40>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	4282      	cmp	r2, r0
 80012f8:	d318      	bcc.n	800132c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80012fa:	685c      	ldr	r4, [r3, #4]
 80012fc:	1919      	adds	r1, r3, r4
 80012fe:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001300:	bf01      	itttt	eq
 8001302:	6841      	ldreq	r1, [r0, #4]
 8001304:	4618      	moveq	r0, r3
 8001306:	1909      	addeq	r1, r1, r4
 8001308:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800130a:	6844      	ldr	r4, [r0, #4]
 800130c:	1901      	adds	r1, r0, r4
 800130e:	428a      	cmp	r2, r1
 8001310:	d107      	bne.n	8001322 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <prvInsertBlockIntoFreeList+0x44>)
 8001314:	6809      	ldr	r1, [r1, #0]
 8001316:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001318:	bf1f      	itttt	ne
 800131a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800131c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800131e:	1909      	addne	r1, r1, r4
 8001320:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001322:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001324:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001326:	bf18      	it	ne
 8001328:	6018      	strne	r0, [r3, #0]
 800132a:	bd10      	pop	{r4, pc}
 800132c:	4613      	mov	r3, r2
 800132e:	e7e1      	b.n	80012f4 <prvInsertBlockIntoFreeList+0x4>
 8001330:	20003c40 	.word	0x20003c40
 8001334:	20000030 	.word	0x20000030

08001338 <pvPortMalloc>:
{
 8001338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800133c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800133e:	f000 fbf1 	bl	8001b24 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001342:	493e      	ldr	r1, [pc, #248]	; (800143c <pvPortMalloc+0x104>)
 8001344:	4d3e      	ldr	r5, [pc, #248]	; (8001440 <pvPortMalloc+0x108>)
 8001346:	680b      	ldr	r3, [r1, #0]
 8001348:	bb0b      	cbnz	r3, 800138e <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800134a:	4a3e      	ldr	r2, [pc, #248]	; (8001444 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800134c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800134e:	bf1f      	itttt	ne
 8001350:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001352:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001356:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800135a:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800135c:	bf14      	ite	ne
 800135e:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001360:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001364:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001366:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001368:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800136c:	4e36      	ldr	r6, [pc, #216]	; (8001448 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 800136e:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001370:	2000      	movs	r0, #0
 8001372:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001374:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001376:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001378:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800137a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800137c:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800137e:	4b33      	ldr	r3, [pc, #204]	; (800144c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001380:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001382:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001384:	4b32      	ldr	r3, [pc, #200]	; (8001450 <pvPortMalloc+0x118>)
 8001386:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001388:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800138c:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800138e:	682f      	ldr	r7, [r5, #0]
 8001390:	4227      	tst	r7, r4
 8001392:	d116      	bne.n	80013c2 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001394:	2c00      	cmp	r4, #0
 8001396:	d041      	beq.n	800141c <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001398:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800139c:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800139e:	bf1c      	itt	ne
 80013a0:	f023 0307 	bicne.w	r3, r3, #7
 80013a4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80013a6:	b163      	cbz	r3, 80013c2 <pvPortMalloc+0x8a>
 80013a8:	4a29      	ldr	r2, [pc, #164]	; (8001450 <pvPortMalloc+0x118>)
 80013aa:	6816      	ldr	r6, [r2, #0]
 80013ac:	42b3      	cmp	r3, r6
 80013ae:	4690      	mov	r8, r2
 80013b0:	d807      	bhi.n	80013c2 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80013b2:	4a25      	ldr	r2, [pc, #148]	; (8001448 <pvPortMalloc+0x110>)
 80013b4:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013b6:	6868      	ldr	r0, [r5, #4]
 80013b8:	4283      	cmp	r3, r0
 80013ba:	d804      	bhi.n	80013c6 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80013bc:	6809      	ldr	r1, [r1, #0]
 80013be:	428d      	cmp	r5, r1
 80013c0:	d107      	bne.n	80013d2 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80013c2:	2400      	movs	r4, #0
 80013c4:	e02a      	b.n	800141c <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013c6:	682c      	ldr	r4, [r5, #0]
 80013c8:	2c00      	cmp	r4, #0
 80013ca:	d0f7      	beq.n	80013bc <pvPortMalloc+0x84>
 80013cc:	462a      	mov	r2, r5
 80013ce:	4625      	mov	r5, r4
 80013d0:	e7f1      	b.n	80013b6 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80013d2:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80013d4:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80013d6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80013d8:	1ac2      	subs	r2, r0, r3
 80013da:	2a10      	cmp	r2, #16
 80013dc:	d90f      	bls.n	80013fe <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80013de:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80013e0:	0741      	lsls	r1, r0, #29
 80013e2:	d008      	beq.n	80013f6 <pvPortMalloc+0xbe>
 80013e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013e8:	f383 8811 	msr	BASEPRI, r3
 80013ec:	f3bf 8f6f 	isb	sy
 80013f0:	f3bf 8f4f 	dsb	sy
 80013f4:	e7fe      	b.n	80013f4 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80013f6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80013f8:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80013fa:	f7ff ff79 	bl	80012f0 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80013fe:	4913      	ldr	r1, [pc, #76]	; (800144c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001400:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001402:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001404:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001406:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001408:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800140a:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800140e:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001412:	bf38      	it	cc
 8001414:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001416:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001418:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800141a:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800141c:	f000 fc1c 	bl	8001c58 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001420:	0763      	lsls	r3, r4, #29
 8001422:	d008      	beq.n	8001436 <pvPortMalloc+0xfe>
 8001424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001428:	f383 8811 	msr	BASEPRI, r3
 800142c:	f3bf 8f6f 	isb	sy
 8001430:	f3bf 8f4f 	dsb	sy
 8001434:	e7fe      	b.n	8001434 <pvPortMalloc+0xfc>
}
 8001436:	4620      	mov	r0, r4
 8001438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800143c:	20000030 	.word	0x20000030
 8001440:	20003c34 	.word	0x20003c34
 8001444:	20000034 	.word	0x20000034
 8001448:	20003c40 	.word	0x20003c40
 800144c:	20003c3c 	.word	0x20003c3c
 8001450:	20003c38 	.word	0x20003c38

08001454 <vPortFree>:
{
 8001454:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001456:	4604      	mov	r4, r0
 8001458:	b370      	cbz	r0, 80014b8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800145a:	4a18      	ldr	r2, [pc, #96]	; (80014bc <vPortFree+0x68>)
 800145c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	4213      	tst	r3, r2
 8001464:	d108      	bne.n	8001478 <vPortFree+0x24>
 8001466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800146a:	f383 8811 	msr	BASEPRI, r3
 800146e:	f3bf 8f6f 	isb	sy
 8001472:	f3bf 8f4f 	dsb	sy
 8001476:	e7fe      	b.n	8001476 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001478:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800147c:	b141      	cbz	r1, 8001490 <vPortFree+0x3c>
 800147e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001482:	f383 8811 	msr	BASEPRI, r3
 8001486:	f3bf 8f6f 	isb	sy
 800148a:	f3bf 8f4f 	dsb	sy
 800148e:	e7fe      	b.n	800148e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001490:	ea23 0302 	bic.w	r3, r3, r2
 8001494:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001498:	f000 fb44 	bl	8001b24 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800149c:	4a08      	ldr	r2, [pc, #32]	; (80014c0 <vPortFree+0x6c>)
 800149e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80014a2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80014a4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80014a8:	440b      	add	r3, r1
 80014aa:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80014ac:	f7ff ff20 	bl	80012f0 <prvInsertBlockIntoFreeList>
}
 80014b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80014b4:	f000 bbd0 	b.w	8001c58 <xTaskResumeAll>
 80014b8:	bd10      	pop	{r4, pc}
 80014ba:	bf00      	nop
 80014bc:	20003c34 	.word	0x20003c34
 80014c0:	20003c38 	.word	0x20003c38

080014c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80014c4:	b570      	push	{r4, r5, r6, lr}
 80014c6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80014c8:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80014ca:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 80014cc:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80014ce:	b942      	cbnz	r2, 80014e2 <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80014d0:	6805      	ldr	r5, [r0, #0]
 80014d2:	b99d      	cbnz	r5, 80014fc <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80014d4:	6840      	ldr	r0, [r0, #4]
 80014d6:	f000 fd4f 	bl	8001f78 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80014da:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80014dc:	3601      	adds	r6, #1
 80014de:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80014e0:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80014e2:	b96d      	cbnz	r5, 8001500 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80014e4:	6880      	ldr	r0, [r0, #8]
 80014e6:	f000 ff59 	bl	800239c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80014ea:	68a3      	ldr	r3, [r4, #8]
 80014ec:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80014ee:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014f0:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80014f2:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d301      	bcc.n	80014fc <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80014f8:	6823      	ldr	r3, [r4, #0]
 80014fa:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80014fc:	2000      	movs	r0, #0
 80014fe:	e7ed      	b.n	80014dc <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001500:	68c0      	ldr	r0, [r0, #12]
 8001502:	f000 ff4b 	bl	800239c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001506:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001508:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800150a:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800150c:	425b      	negs	r3, r3
 800150e:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001510:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001512:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001514:	bf3e      	ittt	cc
 8001516:	6862      	ldrcc	r2, [r4, #4]
 8001518:	189b      	addcc	r3, r3, r2
 800151a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800151c:	2d02      	cmp	r5, #2
 800151e:	d1ed      	bne.n	80014fc <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001520:	b10e      	cbz	r6, 8001526 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001522:	3e01      	subs	r6, #1
 8001524:	e7ea      	b.n	80014fc <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8001526:	4630      	mov	r0, r6
 8001528:	e7d8      	b.n	80014dc <prvCopyDataToQueue+0x18>

0800152a <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800152a:	b570      	push	{r4, r5, r6, lr}
 800152c:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800152e:	f7ff fdc1 	bl	80010b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8001532:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001536:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800153a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800153c:	2d00      	cmp	r5, #0
 800153e:	dc14      	bgt.n	800156a <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8001540:	23ff      	movs	r3, #255	; 0xff
 8001542:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8001546:	f7ff fdd7 	bl	80010f8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800154a:	f7ff fdb3 	bl	80010b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800154e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001552:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001556:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001558:	2d00      	cmp	r5, #0
 800155a:	dc12      	bgt.n	8001582 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800155c:	23ff      	movs	r3, #255	; 0xff
 800155e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8001562:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001566:	f7ff bdc7 	b.w	80010f8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800156a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0e7      	beq.n	8001540 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001570:	4630      	mov	r0, r6
 8001572:	f000 fc61 	bl	8001e38 <xTaskRemoveFromEventList>
 8001576:	b108      	cbz	r0, 800157c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001578:	f000 fce8 	bl	8001f4c <vTaskMissedYield>
 800157c:	3d01      	subs	r5, #1
 800157e:	b26d      	sxtb	r5, r5
 8001580:	e7dc      	b.n	800153c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001582:	6923      	ldr	r3, [r4, #16]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0e9      	beq.n	800155c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001588:	4630      	mov	r0, r6
 800158a:	f000 fc55 	bl	8001e38 <xTaskRemoveFromEventList>
 800158e:	b108      	cbz	r0, 8001594 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8001590:	f000 fcdc 	bl	8001f4c <vTaskMissedYield>
 8001594:	3d01      	subs	r5, #1
 8001596:	b26d      	sxtb	r5, r5
 8001598:	e7de      	b.n	8001558 <prvUnlockQueue+0x2e>
	...

0800159c <xQueueGenericReset>:
{
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80015a0:	4604      	mov	r4, r0
 80015a2:	b940      	cbnz	r0, 80015b6 <xQueueGenericReset+0x1a>
 80015a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015a8:	f383 8811 	msr	BASEPRI, r3
 80015ac:	f3bf 8f6f 	isb	sy
 80015b0:	f3bf 8f4f 	dsb	sy
 80015b4:	e7fe      	b.n	80015b4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80015b6:	f7ff fd7d 	bl	80010b4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80015ba:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80015bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015be:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80015c0:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80015c2:	4343      	muls	r3, r0
 80015c4:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80015c6:	1a1b      	subs	r3, r3, r0
 80015c8:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80015ca:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80015cc:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80015ce:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80015d0:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80015d2:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80015d4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80015d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80015dc:	b995      	cbnz	r5, 8001604 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015de:	6923      	ldr	r3, [r4, #16]
 80015e0:	b163      	cbz	r3, 80015fc <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015e2:	f104 0010 	add.w	r0, r4, #16
 80015e6:	f000 fc27 	bl	8001e38 <xTaskRemoveFromEventList>
 80015ea:	b138      	cbz	r0, 80015fc <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <xQueueGenericReset+0x7c>)
 80015ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	f3bf 8f4f 	dsb	sy
 80015f8:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80015fc:	f7ff fd7c 	bl	80010f8 <vPortExitCritical>
}
 8001600:	2001      	movs	r0, #1
 8001602:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001604:	f104 0010 	add.w	r0, r4, #16
 8001608:	f7ff fcaa 	bl	8000f60 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800160c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001610:	f7ff fca6 	bl	8000f60 <vListInitialise>
 8001614:	e7f2      	b.n	80015fc <xQueueGenericReset+0x60>
 8001616:	bf00      	nop
 8001618:	e000ed04 	.word	0xe000ed04

0800161c <xQueueGenericCreate>:
	{
 800161c:	b570      	push	{r4, r5, r6, lr}
 800161e:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001620:	4606      	mov	r6, r0
 8001622:	b940      	cbnz	r0, 8001636 <xQueueGenericCreate+0x1a>
 8001624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001628:	f383 8811 	msr	BASEPRI, r3
 800162c:	f3bf 8f6f 	isb	sy
 8001630:	f3bf 8f4f 	dsb	sy
 8001634:	e7fe      	b.n	8001634 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001636:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8001638:	3048      	adds	r0, #72	; 0x48
 800163a:	f7ff fe7d 	bl	8001338 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800163e:	4604      	mov	r4, r0
 8001640:	b138      	cbz	r0, 8001652 <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8001642:	b945      	cbnz	r5, 8001656 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001644:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8001646:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001648:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800164a:	2101      	movs	r1, #1
 800164c:	4620      	mov	r0, r4
 800164e:	f7ff ffa5 	bl	800159c <xQueueGenericReset>
	}
 8001652:	4620      	mov	r0, r4
 8001654:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8001656:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800165a:	6003      	str	r3, [r0, #0]
 800165c:	e7f3      	b.n	8001646 <xQueueGenericCreate+0x2a>
	...

08001660 <xQueueGenericSend>:
{
 8001660:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001664:	4689      	mov	r9, r1
 8001666:	9201      	str	r2, [sp, #4]
 8001668:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800166a:	4604      	mov	r4, r0
 800166c:	b940      	cbnz	r0, 8001680 <xQueueGenericSend+0x20>
 800166e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001672:	f383 8811 	msr	BASEPRI, r3
 8001676:	f3bf 8f6f 	isb	sy
 800167a:	f3bf 8f4f 	dsb	sy
 800167e:	e7fe      	b.n	800167e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001680:	2900      	cmp	r1, #0
 8001682:	f040 8088 	bne.w	8001796 <xQueueGenericSend+0x136>
 8001686:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8084 	beq.w	8001796 <xQueueGenericSend+0x136>
 800168e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001692:	f383 8811 	msr	BASEPRI, r3
 8001696:	f3bf 8f6f 	isb	sy
 800169a:	f3bf 8f4f 	dsb	sy
 800169e:	e7fe      	b.n	800169e <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80016a0:	9e01      	ldr	r6, [sp, #4]
 80016a2:	2e00      	cmp	r6, #0
 80016a4:	f000 8082 	beq.w	80017ac <xQueueGenericSend+0x14c>
 80016a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ac:	f383 8811 	msr	BASEPRI, r3
 80016b0:	f3bf 8f6f 	isb	sy
 80016b4:	f3bf 8f4f 	dsb	sy
 80016b8:	e7fe      	b.n	80016b8 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 80016ba:	9d01      	ldr	r5, [sp, #4]
 80016bc:	b91d      	cbnz	r5, 80016c6 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 80016be:	f7ff fd1b 	bl	80010f8 <vPortExitCritical>
			return errQUEUE_FULL;
 80016c2:	2000      	movs	r0, #0
 80016c4:	e058      	b.n	8001778 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 80016c6:	b916      	cbnz	r6, 80016ce <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80016c8:	a802      	add	r0, sp, #8
 80016ca:	f000 fbf7 	bl	8001ebc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80016ce:	f7ff fd13 	bl	80010f8 <vPortExitCritical>
		vTaskSuspendAll();
 80016d2:	f000 fa27 	bl	8001b24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80016d6:	f7ff fced 	bl	80010b4 <vPortEnterCritical>
 80016da:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80016de:	2bff      	cmp	r3, #255	; 0xff
 80016e0:	bf08      	it	eq
 80016e2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80016e6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80016ea:	2bff      	cmp	r3, #255	; 0xff
 80016ec:	bf08      	it	eq
 80016ee:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80016f2:	f7ff fd01 	bl	80010f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80016f6:	a901      	add	r1, sp, #4
 80016f8:	a802      	add	r0, sp, #8
 80016fa:	f000 fbeb 	bl	8001ed4 <xTaskCheckForTimeOut>
 80016fe:	2800      	cmp	r0, #0
 8001700:	d143      	bne.n	800178a <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001702:	f7ff fcd7 	bl	80010b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001706:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8001708:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800170a:	f7ff fcf5 	bl	80010f8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800170e:	42ae      	cmp	r6, r5
 8001710:	d135      	bne.n	800177e <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8001712:	9901      	ldr	r1, [sp, #4]
 8001714:	f104 0010 	add.w	r0, r4, #16
 8001718:	f000 fb74 	bl	8001e04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800171c:	4620      	mov	r0, r4
 800171e:	f7ff ff04 	bl	800152a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001722:	f000 fa99 	bl	8001c58 <xTaskResumeAll>
 8001726:	b938      	cbnz	r0, 8001738 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8001728:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800172c:	f8ca 3000 	str.w	r3, [sl]
 8001730:	f3bf 8f4f 	dsb	sy
 8001734:	f3bf 8f6f 	isb	sy
 8001738:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800173a:	f7ff fcbb 	bl	80010b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800173e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001740:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001742:	429a      	cmp	r2, r3
 8001744:	d301      	bcc.n	800174a <xQueueGenericSend+0xea>
 8001746:	2f02      	cmp	r7, #2
 8001748:	d1b7      	bne.n	80016ba <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800174a:	463a      	mov	r2, r7
 800174c:	4649      	mov	r1, r9
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff feb8 	bl	80014c4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001756:	b11b      	cbz	r3, 8001760 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001758:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800175c:	f000 fb6c 	bl	8001e38 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8001760:	b138      	cbz	r0, 8001772 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <xQueueGenericSend+0x168>)
 8001764:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f3bf 8f4f 	dsb	sy
 800176e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001772:	f7ff fcc1 	bl	80010f8 <vPortExitCritical>
				return pdPASS;
 8001776:	2001      	movs	r0, #1
}
 8001778:	b004      	add	sp, #16
 800177a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800177e:	4620      	mov	r0, r4
 8001780:	f7ff fed3 	bl	800152a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001784:	f000 fa68 	bl	8001c58 <xTaskResumeAll>
 8001788:	e7d6      	b.n	8001738 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 800178a:	4620      	mov	r0, r4
 800178c:	f7ff fecd 	bl	800152a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001790:	f000 fa62 	bl	8001c58 <xTaskResumeAll>
 8001794:	e795      	b.n	80016c2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001796:	2f02      	cmp	r7, #2
 8001798:	d102      	bne.n	80017a0 <xQueueGenericSend+0x140>
 800179a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800179c:	2b01      	cmp	r3, #1
 800179e:	d10a      	bne.n	80017b6 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80017a0:	f000 fbda 	bl	8001f58 <xTaskGetSchedulerState>
 80017a4:	2800      	cmp	r0, #0
 80017a6:	f43f af7b 	beq.w	80016a0 <xQueueGenericSend+0x40>
 80017aa:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80017ac:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80017b0:	f8df a014 	ldr.w	sl, [pc, #20]	; 80017c8 <xQueueGenericSend+0x168>
 80017b4:	e7c1      	b.n	800173a <xQueueGenericSend+0xda>
 80017b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017ba:	f383 8811 	msr	BASEPRI, r3
 80017be:	f3bf 8f6f 	isb	sy
 80017c2:	f3bf 8f4f 	dsb	sy
 80017c6:	e7fe      	b.n	80017c6 <xQueueGenericSend+0x166>
 80017c8:	e000ed04 	.word	0xe000ed04

080017cc <xQueueCreateMutex>:
	{
 80017cc:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80017ce:	4602      	mov	r2, r0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2001      	movs	r0, #1
 80017d4:	f7ff ff22 	bl	800161c <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 80017d8:	4604      	mov	r4, r0
 80017da:	b138      	cbz	r0, 80017ec <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80017e0:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80017e2:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80017e4:	461a      	mov	r2, r3
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff ff3a 	bl	8001660 <xQueueGenericSend>
	}
 80017ec:	4620      	mov	r0, r4
 80017ee:	bd10      	pop	{r4, pc}

080017f0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80017f0:	4a06      	ldr	r2, [pc, #24]	; (800180c <prvResetNextTaskUnblockTime+0x1c>)
 80017f2:	6813      	ldr	r3, [r2, #0]
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	4b06      	ldr	r3, [pc, #24]	; (8001810 <prvResetNextTaskUnblockTime+0x20>)
 80017f8:	b919      	cbnz	r1, 8001802 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80017fa:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001802:	6812      	ldr	r2, [r2, #0]
 8001804:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001806:	68d2      	ldr	r2, [r2, #12]
 8001808:	6852      	ldr	r2, [r2, #4]
 800180a:	e7f8      	b.n	80017fe <prvResetNextTaskUnblockTime+0xe>
 800180c:	20003c4c 	.word	0x20003c4c
 8001810:	20003d24 	.word	0x20003d24

08001814 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001816:	4b1b      	ldr	r3, [pc, #108]	; (8001884 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001818:	4e1b      	ldr	r6, [pc, #108]	; (8001888 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 800181a:	681d      	ldr	r5, [r3, #0]
{
 800181c:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800181e:	6830      	ldr	r0, [r6, #0]
 8001820:	3004      	adds	r0, #4
{
 8001822:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001824:	f7ff fbcd 	bl	8000fc2 <uxListRemove>
 8001828:	4633      	mov	r3, r6
 800182a:	b940      	cbnz	r0, 800183e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800182c:	6831      	ldr	r1, [r6, #0]
 800182e:	4e17      	ldr	r6, [pc, #92]	; (800188c <prvAddCurrentTaskToDelayedList+0x78>)
 8001830:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001832:	6832      	ldr	r2, [r6, #0]
 8001834:	2001      	movs	r0, #1
 8001836:	4088      	lsls	r0, r1
 8001838:	ea22 0200 	bic.w	r2, r2, r0
 800183c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800183e:	1c62      	adds	r2, r4, #1
 8001840:	d107      	bne.n	8001852 <prvAddCurrentTaskToDelayedList+0x3e>
 8001842:	b137      	cbz	r7, 8001852 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001844:	6819      	ldr	r1, [r3, #0]
 8001846:	4812      	ldr	r0, [pc, #72]	; (8001890 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001848:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800184a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800184e:	f7ff bb95 	b.w	8000f7c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001852:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001854:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001856:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001858:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800185a:	d907      	bls.n	800186c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <prvAddCurrentTaskToDelayedList+0x80>)
 800185e:	6810      	ldr	r0, [r2, #0]
 8001860:	6819      	ldr	r1, [r3, #0]
}
 8001862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001866:	3104      	adds	r1, #4
 8001868:	f7ff bb94 	b.w	8000f94 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800186c:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <prvAddCurrentTaskToDelayedList+0x84>)
 800186e:	6810      	ldr	r0, [r2, #0]
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	3104      	adds	r1, #4
 8001874:	f7ff fb8e 	bl	8000f94 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001878:	4b08      	ldr	r3, [pc, #32]	; (800189c <prvAddCurrentTaskToDelayedList+0x88>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800187e:	bf38      	it	cc
 8001880:	601c      	strcc	r4, [r3, #0]
 8001882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001884:	20003d6c 	.word	0x20003d6c
 8001888:	20003c48 	.word	0x20003c48
 800188c:	20003cf4 	.word	0x20003cf4
 8001890:	20003d44 	.word	0x20003d44
 8001894:	20003c50 	.word	0x20003c50
 8001898:	20003c4c 	.word	0x20003c4c
 800189c:	20003d24 	.word	0x20003d24

080018a0 <prvIdleTask>:
{
 80018a0:	b580      	push	{r7, lr}
				taskYIELD();
 80018a2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8001908 <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80018a6:	4f14      	ldr	r7, [pc, #80]	; (80018f8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018a8:	4c14      	ldr	r4, [pc, #80]	; (80018fc <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 80018aa:	4e15      	ldr	r6, [pc, #84]	; (8001900 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80018ac:	6823      	ldr	r3, [r4, #0]
 80018ae:	b963      	cbnz	r3, 80018ca <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <prvIdleTask+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d9f8      	bls.n	80018aa <prvIdleTask+0xa>
				taskYIELD();
 80018b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018bc:	f8c8 3000 	str.w	r3, [r8]
 80018c0:	f3bf 8f4f 	dsb	sy
 80018c4:	f3bf 8f6f 	isb	sy
 80018c8:	e7ee      	b.n	80018a8 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80018ca:	f7ff fbf3 	bl	80010b4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80018d2:	1d28      	adds	r0, r5, #4
 80018d4:	f7ff fb75 	bl	8000fc2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80018d8:	6833      	ldr	r3, [r6, #0]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 80018de:	6823      	ldr	r3, [r4, #0]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80018e4:	f7ff fc08 	bl	80010f8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 80018e8:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80018ea:	f7ff fdb3 	bl	8001454 <vPortFree>
			vPortFree( pxTCB );
 80018ee:	4628      	mov	r0, r5
 80018f0:	f7ff fdb0 	bl	8001454 <vPortFree>
 80018f4:	e7da      	b.n	80018ac <prvIdleTask+0xc>
 80018f6:	bf00      	nop
 80018f8:	20003d58 	.word	0x20003d58
 80018fc:	20003ce4 	.word	0x20003ce4
 8001900:	20003ce0 	.word	0x20003ce0
 8001904:	20003c54 	.word	0x20003c54
 8001908:	e000ed04 	.word	0xe000ed04

0800190c <xTaskCreate>:
	{
 800190c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001910:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001914:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001916:	4650      	mov	r0, sl
	{
 8001918:	460f      	mov	r7, r1
 800191a:	4699      	mov	r9, r3
 800191c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800191e:	f7ff fd0b 	bl	8001338 <pvPortMalloc>
			if( pxStack != NULL )
 8001922:	4605      	mov	r5, r0
 8001924:	2800      	cmp	r0, #0
 8001926:	f000 8096 	beq.w	8001a56 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800192a:	2054      	movs	r0, #84	; 0x54
 800192c:	f7ff fd04 	bl	8001338 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001930:	4604      	mov	r4, r0
 8001932:	2800      	cmp	r0, #0
 8001934:	f000 808c 	beq.w	8001a50 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001938:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 800193c:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800193e:	4455      	add	r5, sl
 8001940:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001942:	f025 0a07 	bic.w	sl, r5, #7
 8001946:	f100 0234 	add.w	r2, r0, #52	; 0x34
 800194a:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800194c:	7859      	ldrb	r1, [r3, #1]
 800194e:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001952:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001956:	b109      	cbz	r1, 800195c <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001958:	42bb      	cmp	r3, r7
 800195a:	d1f7      	bne.n	800194c <xTaskCreate+0x40>
 800195c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800195e:	2d06      	cmp	r5, #6
 8001960:	bf28      	it	cs
 8001962:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001964:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001968:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800196a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800196c:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800196e:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001970:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001974:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001978:	f7ff fafd 	bl	8000f76 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800197c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001980:	f104 0018 	add.w	r0, r4, #24
 8001984:	f7ff faf7 	bl	8000f76 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001988:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800198c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800198e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001990:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001992:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001996:	464a      	mov	r2, r9
 8001998:	4641      	mov	r1, r8
 800199a:	4650      	mov	r0, sl
 800199c:	f7ff fb60 	bl	8001060 <pxPortInitialiseStack>
 80019a0:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80019a2:	b106      	cbz	r6, 80019a6 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80019a4:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 80019a6:	f7ff fb85 	bl	80010b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80019aa:	4b32      	ldr	r3, [pc, #200]	; (8001a74 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 80019ac:	4e32      	ldr	r6, [pc, #200]	; (8001a78 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001aa4 <xTaskCreate+0x198>
 80019b4:	3201      	adds	r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80019b8:	6835      	ldr	r5, [r6, #0]
 80019ba:	2d00      	cmp	r5, #0
 80019bc:	d14e      	bne.n	8001a5c <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 80019be:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d11d      	bne.n	8001a02 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80019c6:	eb08 0005 	add.w	r0, r8, r5
 80019ca:	3514      	adds	r5, #20
 80019cc:	f7ff fac8 	bl	8000f60 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80019d0:	2d8c      	cmp	r5, #140	; 0x8c
 80019d2:	d1f8      	bne.n	80019c6 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 80019d4:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001aa8 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 80019d8:	4d28      	ldr	r5, [pc, #160]	; (8001a7c <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 80019da:	4648      	mov	r0, r9
 80019dc:	f7ff fac0 	bl	8000f60 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80019e0:	4628      	mov	r0, r5
 80019e2:	f7ff fabd 	bl	8000f60 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80019e6:	4826      	ldr	r0, [pc, #152]	; (8001a80 <xTaskCreate+0x174>)
 80019e8:	f7ff faba 	bl	8000f60 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 80019ec:	4825      	ldr	r0, [pc, #148]	; (8001a84 <xTaskCreate+0x178>)
 80019ee:	f7ff fab7 	bl	8000f60 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 80019f2:	4825      	ldr	r0, [pc, #148]	; (8001a88 <xTaskCreate+0x17c>)
 80019f4:	f7ff fab4 	bl	8000f60 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <xTaskCreate+0x180>)
 80019fa:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80019fe:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <xTaskCreate+0x184>)
 8001a00:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001a02:	4a24      	ldr	r2, [pc, #144]	; (8001a94 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001a04:	4924      	ldr	r1, [pc, #144]	; (8001a98 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001a06:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001a08:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001a0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a10:	2501      	movs	r5, #1
 8001a12:	fa05 f302 	lsl.w	r3, r5, r2
 8001a16:	4303      	orrs	r3, r0
 8001a18:	2014      	movs	r0, #20
 8001a1a:	600b      	str	r3, [r1, #0]
 8001a1c:	fb00 8002 	mla	r0, r0, r2, r8
 8001a20:	4639      	mov	r1, r7
 8001a22:	f7ff faab 	bl	8000f7c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001a26:	f7ff fb67 	bl	80010f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001a2a:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <xTaskCreate+0x190>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	b163      	cbz	r3, 8001a4a <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001a30:	6833      	ldr	r3, [r6, #0]
 8001a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d207      	bcs.n	8001a4a <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001a3a:	4b19      	ldr	r3, [pc, #100]	; (8001aa0 <xTaskCreate+0x194>)
 8001a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	f3bf 8f4f 	dsb	sy
 8001a46:	f3bf 8f6f 	isb	sy
	}
 8001a4a:	4628      	mov	r0, r5
 8001a4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001a50:	4628      	mov	r0, r5
 8001a52:	f7ff fcff 	bl	8001454 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a56:	f04f 35ff 	mov.w	r5, #4294967295
 8001a5a:	e7f6      	b.n	8001a4a <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <xTaskCreate+0x190>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1ce      	bne.n	8001a02 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001a64:	6833      	ldr	r3, [r6, #0]
 8001a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a6a:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001a6c:	bf98      	it	ls
 8001a6e:	6034      	strls	r4, [r6, #0]
 8001a70:	e7c7      	b.n	8001a02 <xTaskCreate+0xf6>
 8001a72:	bf00      	nop
 8001a74:	20003ce0 	.word	0x20003ce0
 8001a78:	20003c48 	.word	0x20003c48
 8001a7c:	20003d0c 	.word	0x20003d0c
 8001a80:	20003d2c 	.word	0x20003d2c
 8001a84:	20003d58 	.word	0x20003d58
 8001a88:	20003d44 	.word	0x20003d44
 8001a8c:	20003c4c 	.word	0x20003c4c
 8001a90:	20003c50 	.word	0x20003c50
 8001a94:	20003cf0 	.word	0x20003cf0
 8001a98:	20003cf4 	.word	0x20003cf4
 8001a9c:	20003d40 	.word	0x20003d40
 8001aa0:	e000ed04 	.word	0xe000ed04
 8001aa4:	20003c54 	.word	0x20003c54
 8001aa8:	20003cf8 	.word	0x20003cf8

08001aac <vTaskStartScheduler>:
{
 8001aac:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <vTaskStartScheduler+0x60>)
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	2400      	movs	r4, #0
 8001ab4:	9400      	str	r4, [sp, #0]
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	4915      	ldr	r1, [pc, #84]	; (8001b10 <vTaskStartScheduler+0x64>)
 8001abc:	4815      	ldr	r0, [pc, #84]	; (8001b14 <vTaskStartScheduler+0x68>)
 8001abe:	f7ff ff25 	bl	800190c <xTaskCreate>
	if( xReturn == pdPASS )
 8001ac2:	2801      	cmp	r0, #1
 8001ac4:	d114      	bne.n	8001af0 <vTaskStartScheduler+0x44>
 8001ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aca:	f383 8811 	msr	BASEPRI, r3
 8001ace:	f3bf 8f6f 	isb	sy
 8001ad2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <vTaskStartScheduler+0x6c>)
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8001adc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <vTaskStartScheduler+0x70>)
 8001ae0:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001ae2:	4b0f      	ldr	r3, [pc, #60]	; (8001b20 <vTaskStartScheduler+0x74>)
 8001ae4:	601c      	str	r4, [r3, #0]
}
 8001ae6:	b002      	add	sp, #8
 8001ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8001aec:	f7ff bb7a 	b.w	80011e4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001af0:	3001      	adds	r0, #1
 8001af2:	d108      	bne.n	8001b06 <vTaskStartScheduler+0x5a>
 8001af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af8:	f383 8811 	msr	BASEPRI, r3
 8001afc:	f3bf 8f6f 	isb	sy
 8001b00:	f3bf 8f4f 	dsb	sy
 8001b04:	e7fe      	b.n	8001b04 <vTaskStartScheduler+0x58>
}
 8001b06:	b002      	add	sp, #8
 8001b08:	bd10      	pop	{r4, pc}
 8001b0a:	bf00      	nop
 8001b0c:	20003d20 	.word	0x20003d20
 8001b10:	0800242c 	.word	0x0800242c
 8001b14:	080018a1 	.word	0x080018a1
 8001b18:	20003d24 	.word	0x20003d24
 8001b1c:	20003d40 	.word	0x20003d40
 8001b20:	20003d6c 	.word	0x20003d6c

08001b24 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8001b24:	4a02      	ldr	r2, [pc, #8]	; (8001b30 <vTaskSuspendAll+0xc>)
 8001b26:	6813      	ldr	r3, [r2, #0]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	20003cec 	.word	0x20003cec

08001b34 <xTaskIncrementTick>:
{
 8001b34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001b38:	4b3c      	ldr	r3, [pc, #240]	; (8001c2c <xTaskIncrementTick+0xf8>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d153      	bne.n	8001be8 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001b40:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <xTaskIncrementTick+0xfc>)
 8001b42:	681c      	ldr	r4, [r3, #0]
 8001b44:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8001b46:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001b48:	b9bc      	cbnz	r4, 8001b7a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8001b4a:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <xTaskIncrementTick+0x100>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	b142      	cbz	r2, 8001b64 <xTaskIncrementTick+0x30>
 8001b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b56:	f383 8811 	msr	BASEPRI, r3
 8001b5a:	f3bf 8f6f 	isb	sy
 8001b5e:	f3bf 8f4f 	dsb	sy
 8001b62:	e7fe      	b.n	8001b62 <xTaskIncrementTick+0x2e>
 8001b64:	4a34      	ldr	r2, [pc, #208]	; (8001c38 <xTaskIncrementTick+0x104>)
 8001b66:	6819      	ldr	r1, [r3, #0]
 8001b68:	6810      	ldr	r0, [r2, #0]
 8001b6a:	6018      	str	r0, [r3, #0]
 8001b6c:	6011      	str	r1, [r2, #0]
 8001b6e:	4a33      	ldr	r2, [pc, #204]	; (8001c3c <xTaskIncrementTick+0x108>)
 8001b70:	6813      	ldr	r3, [r2, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	6013      	str	r3, [r2, #0]
 8001b76:	f7ff fe3b 	bl	80017f0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001b7a:	4d31      	ldr	r5, [pc, #196]	; (8001c40 <xTaskIncrementTick+0x10c>)
 8001b7c:	4f31      	ldr	r7, [pc, #196]	; (8001c44 <xTaskIncrementTick+0x110>)
 8001b7e:	682b      	ldr	r3, [r5, #0]
 8001b80:	429c      	cmp	r4, r3
 8001b82:	f04f 0b00 	mov.w	fp, #0
 8001b86:	d33e      	bcc.n	8001c06 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b88:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8001c34 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8001b8c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001c54 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b90:	f8d8 2000 	ldr.w	r2, [r8]
 8001b94:	6812      	ldr	r2, [r2, #0]
 8001b96:	bb72      	cbnz	r2, 8001bf6 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	602a      	str	r2, [r5, #0]
					break;
 8001b9e:	e032      	b.n	8001c06 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ba0:	f106 0a04 	add.w	sl, r6, #4
 8001ba4:	4650      	mov	r0, sl
 8001ba6:	f7ff fa0c 	bl	8000fc2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001baa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8001bac:	b119      	cbz	r1, 8001bb6 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001bae:	f106 0018 	add.w	r0, r6, #24
 8001bb2:	f7ff fa06 	bl	8000fc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001bb6:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8001bb8:	f8d9 3000 	ldr.w	r3, [r9]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	fa02 f100 	lsl.w	r1, r2, r0
 8001bc2:	4319      	orrs	r1, r3
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <xTaskIncrementTick+0x114>)
 8001bc6:	f8c9 1000 	str.w	r1, [r9]
 8001bca:	f04f 0e14 	mov.w	lr, #20
 8001bce:	4651      	mov	r1, sl
 8001bd0:	fb0e 3000 	mla	r0, lr, r0, r3
 8001bd4:	f7ff f9d2 	bl	8000f7c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001bd8:	6838      	ldr	r0, [r7, #0]
 8001bda:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8001bdc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8001bde:	4291      	cmp	r1, r2
 8001be0:	bf28      	it	cs
 8001be2:	f04f 0b01 	movcs.w	fp, #1
 8001be6:	e7d3      	b.n	8001b90 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8001be8:	4a18      	ldr	r2, [pc, #96]	; (8001c4c <xTaskIncrementTick+0x118>)
 8001bea:	6813      	ldr	r3, [r2, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8001bf0:	f04f 0b00 	mov.w	fp, #0
 8001bf4:	e011      	b.n	8001c1a <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001bf6:	f8d8 2000 	ldr.w	r2, [r8]
 8001bfa:	68d2      	ldr	r2, [r2, #12]
 8001bfc:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001bfe:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8001c00:	428c      	cmp	r4, r1
 8001c02:	d2cd      	bcs.n	8001ba0 <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8001c04:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <xTaskIncrementTick+0x114>)
 8001c0a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c0c:	2214      	movs	r2, #20
 8001c0e:	434a      	muls	r2, r1
 8001c10:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8001c12:	2a02      	cmp	r2, #2
 8001c14:	bf28      	it	cs
 8001c16:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8001c1a:	4a0d      	ldr	r2, [pc, #52]	; (8001c50 <xTaskIncrementTick+0x11c>)
 8001c1c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8001c1e:	2a00      	cmp	r2, #0
 8001c20:	bf18      	it	ne
 8001c22:	f04f 0b01 	movne.w	fp, #1
}
 8001c26:	4658      	mov	r0, fp
 8001c28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c2c:	20003cec 	.word	0x20003cec
 8001c30:	20003d6c 	.word	0x20003d6c
 8001c34:	20003c4c 	.word	0x20003c4c
 8001c38:	20003c50 	.word	0x20003c50
 8001c3c:	20003d28 	.word	0x20003d28
 8001c40:	20003d24 	.word	0x20003d24
 8001c44:	20003c48 	.word	0x20003c48
 8001c48:	20003c54 	.word	0x20003c54
 8001c4c:	20003ce8 	.word	0x20003ce8
 8001c50:	20003d70 	.word	0x20003d70
 8001c54:	20003cf4 	.word	0x20003cf4

08001c58 <xTaskResumeAll>:
{
 8001c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8001c5c:	4c31      	ldr	r4, [pc, #196]	; (8001d24 <xTaskResumeAll+0xcc>)
 8001c5e:	6823      	ldr	r3, [r4, #0]
 8001c60:	b943      	cbnz	r3, 8001c74 <xTaskResumeAll+0x1c>
 8001c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c66:	f383 8811 	msr	BASEPRI, r3
 8001c6a:	f3bf 8f6f 	isb	sy
 8001c6e:	f3bf 8f4f 	dsb	sy
 8001c72:	e7fe      	b.n	8001c72 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8001c74:	f7ff fa1e 	bl	80010b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c7e:	6824      	ldr	r4, [r4, #0]
 8001c80:	b12c      	cbz	r4, 8001c8e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8001c82:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001c84:	f7ff fa38 	bl	80010f8 <vPortExitCritical>
}
 8001c88:	4620      	mov	r0, r4
 8001c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <xTaskResumeAll+0xd0>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f5      	beq.n	8001c82 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001c96:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8001d40 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8001c9a:	4f24      	ldr	r7, [pc, #144]	; (8001d2c <xTaskResumeAll+0xd4>)
 8001c9c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8001d44 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ca0:	f8d9 3000 	ldr.w	r3, [r9]
 8001ca4:	b9e3      	cbnz	r3, 8001ce0 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8001ca6:	b10c      	cbz	r4, 8001cac <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8001ca8:	f7ff fda2 	bl	80017f0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8001cac:	4d20      	ldr	r5, [pc, #128]	; (8001d30 <xTaskResumeAll+0xd8>)
 8001cae:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8001cb0:	b144      	cbz	r4, 8001cc4 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8001cb2:	4e20      	ldr	r6, [pc, #128]	; (8001d34 <xTaskResumeAll+0xdc>)
 8001cb4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8001cb6:	f7ff ff3d 	bl	8001b34 <xTaskIncrementTick>
 8001cba:	b100      	cbz	r0, 8001cbe <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8001cbc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001cbe:	3c01      	subs	r4, #1
 8001cc0:	d1f9      	bne.n	8001cb6 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8001cc2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <xTaskResumeAll+0xdc>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0da      	beq.n	8001c82 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8001ccc:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <xTaskResumeAll+0xe0>)
 8001cce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	f3bf 8f4f 	dsb	sy
 8001cd8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8001cdc:	2401      	movs	r4, #1
 8001cde:	e7d1      	b.n	8001c84 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8001ce0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001ce4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ce6:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ce8:	f104 0018 	add.w	r0, r4, #24
 8001cec:	f7ff f969 	bl	8000fc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	f7ff f966 	bl	8000fc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001cf6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001cf8:	6839      	ldr	r1, [r7, #0]
 8001cfa:	2501      	movs	r5, #1
 8001cfc:	fa05 f302 	lsl.w	r3, r5, r2
 8001d00:	2014      	movs	r0, #20
 8001d02:	430b      	orrs	r3, r1
 8001d04:	fb00 8002 	mla	r0, r0, r2, r8
 8001d08:	4631      	mov	r1, r6
 8001d0a:	603b      	str	r3, [r7, #0]
 8001d0c:	f7ff f936 	bl	8000f7c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d10:	4b0a      	ldr	r3, [pc, #40]	; (8001d3c <xTaskResumeAll+0xe4>)
 8001d12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8001d1a:	bf24      	itt	cs
 8001d1c:	4b05      	ldrcs	r3, [pc, #20]	; (8001d34 <xTaskResumeAll+0xdc>)
 8001d1e:	601d      	strcs	r5, [r3, #0]
 8001d20:	e7be      	b.n	8001ca0 <xTaskResumeAll+0x48>
 8001d22:	bf00      	nop
 8001d24:	20003cec 	.word	0x20003cec
 8001d28:	20003ce0 	.word	0x20003ce0
 8001d2c:	20003cf4 	.word	0x20003cf4
 8001d30:	20003ce8 	.word	0x20003ce8
 8001d34:	20003d70 	.word	0x20003d70
 8001d38:	e000ed04 	.word	0xe000ed04
 8001d3c:	20003c48 	.word	0x20003c48
 8001d40:	20003d2c 	.word	0x20003d2c
 8001d44:	20003c54 	.word	0x20003c54

08001d48 <vTaskDelay>:
	{
 8001d48:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001d4a:	b940      	cbnz	r0, 8001d5e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <vTaskDelay+0x40>)
 8001d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	f3bf 8f4f 	dsb	sy
 8001d58:	f3bf 8f6f 	isb	sy
 8001d5c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <vTaskDelay+0x44>)
 8001d60:	6819      	ldr	r1, [r3, #0]
 8001d62:	b141      	cbz	r1, 8001d76 <vTaskDelay+0x2e>
 8001d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d68:	f383 8811 	msr	BASEPRI, r3
 8001d6c:	f3bf 8f6f 	isb	sy
 8001d70:	f3bf 8f4f 	dsb	sy
 8001d74:	e7fe      	b.n	8001d74 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001d76:	f7ff fed5 	bl	8001b24 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001d7a:	f7ff fd4b 	bl	8001814 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8001d7e:	f7ff ff6b 	bl	8001c58 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8001d82:	2800      	cmp	r0, #0
 8001d84:	d0e2      	beq.n	8001d4c <vTaskDelay+0x4>
 8001d86:	bd08      	pop	{r3, pc}
 8001d88:	e000ed04 	.word	0xe000ed04
 8001d8c:	20003cec 	.word	0x20003cec

08001d90 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d90:	4b17      	ldr	r3, [pc, #92]	; (8001df0 <vTaskSwitchContext+0x60>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b17      	ldr	r3, [pc, #92]	; (8001df4 <vTaskSwitchContext+0x64>)
{
 8001d96:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001d98:	b112      	cbz	r2, 8001da0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8001d9a:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8001da0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001da2:	4b15      	ldr	r3, [pc, #84]	; (8001df8 <vTaskSwitchContext+0x68>)
 8001da4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001da6:	fab3 f383 	clz	r3, r3
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	f1c3 031f 	rsb	r3, r3, #31
 8001db0:	2214      	movs	r2, #20
 8001db2:	4912      	ldr	r1, [pc, #72]	; (8001dfc <vTaskSwitchContext+0x6c>)
 8001db4:	435a      	muls	r2, r3
 8001db6:	1888      	adds	r0, r1, r2
 8001db8:	588c      	ldr	r4, [r1, r2]
 8001dba:	b944      	cbnz	r4, 8001dce <vTaskSwitchContext+0x3e>
	__asm volatile
 8001dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc0:	f383 8811 	msr	BASEPRI, r3
 8001dc4:	f3bf 8f6f 	isb	sy
 8001dc8:	f3bf 8f4f 	dsb	sy
 8001dcc:	e7fe      	b.n	8001dcc <vTaskSwitchContext+0x3c>
 8001dce:	6844      	ldr	r4, [r0, #4]
 8001dd0:	3208      	adds	r2, #8
 8001dd2:	6864      	ldr	r4, [r4, #4]
 8001dd4:	6044      	str	r4, [r0, #4]
 8001dd6:	440a      	add	r2, r1
 8001dd8:	4294      	cmp	r4, r2
 8001dda:	bf04      	itt	eq
 8001ddc:	6862      	ldreq	r2, [r4, #4]
 8001dde:	6042      	streq	r2, [r0, #4]
 8001de0:	2214      	movs	r2, #20
 8001de2:	fb02 1303 	mla	r3, r2, r3, r1
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <vTaskSwitchContext+0x70>)
 8001dec:	e7d6      	b.n	8001d9c <vTaskSwitchContext+0xc>
 8001dee:	bf00      	nop
 8001df0:	20003cec 	.word	0x20003cec
 8001df4:	20003d70 	.word	0x20003d70
 8001df8:	20003cf4 	.word	0x20003cf4
 8001dfc:	20003c54 	.word	0x20003c54
 8001e00:	20003c48 	.word	0x20003c48

08001e04 <vTaskPlaceOnEventList>:
{
 8001e04:	b510      	push	{r4, lr}
 8001e06:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8001e08:	b940      	cbnz	r0, 8001e1c <vTaskPlaceOnEventList+0x18>
 8001e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e0e:	f383 8811 	msr	BASEPRI, r3
 8001e12:	f3bf 8f6f 	isb	sy
 8001e16:	f3bf 8f4f 	dsb	sy
 8001e1a:	e7fe      	b.n	8001e1a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <vTaskPlaceOnEventList+0x30>)
 8001e1e:	6819      	ldr	r1, [r3, #0]
 8001e20:	3118      	adds	r1, #24
 8001e22:	f7ff f8b7 	bl	8000f94 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001e26:	4620      	mov	r0, r4
 8001e28:	2101      	movs	r1, #1
}
 8001e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001e2e:	f7ff bcf1 	b.w	8001814 <prvAddCurrentTaskToDelayedList>
 8001e32:	bf00      	nop
 8001e34:	20003c48 	.word	0x20003c48

08001e38 <xTaskRemoveFromEventList>:
{
 8001e38:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8001e3a:	68c3      	ldr	r3, [r0, #12]
 8001e3c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8001e3e:	b944      	cbnz	r4, 8001e52 <xTaskRemoveFromEventList+0x1a>
 8001e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e44:	f383 8811 	msr	BASEPRI, r3
 8001e48:	f3bf 8f6f 	isb	sy
 8001e4c:	f3bf 8f4f 	dsb	sy
 8001e50:	e7fe      	b.n	8001e50 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001e52:	f104 0518 	add.w	r5, r4, #24
 8001e56:	4628      	mov	r0, r5
 8001e58:	f7ff f8b3 	bl	8000fc2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <xTaskRemoveFromEventList+0x6c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	b9e3      	cbnz	r3, 8001e9c <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001e62:	1d25      	adds	r5, r4, #4
 8001e64:	4628      	mov	r0, r5
 8001e66:	f7ff f8ac 	bl	8000fc2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001e6a:	490f      	ldr	r1, [pc, #60]	; (8001ea8 <xTaskRemoveFromEventList+0x70>)
 8001e6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e6e:	6808      	ldr	r0, [r1, #0]
 8001e70:	2301      	movs	r3, #1
 8001e72:	4093      	lsls	r3, r2
 8001e74:	4303      	orrs	r3, r0
 8001e76:	600b      	str	r3, [r1, #0]
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <xTaskRemoveFromEventList+0x74>)
 8001e7a:	2014      	movs	r0, #20
 8001e7c:	4629      	mov	r1, r5
 8001e7e:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e82:	f7ff f87b 	bl	8000f7c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001e86:	4b0a      	ldr	r3, [pc, #40]	; (8001eb0 <xTaskRemoveFromEventList+0x78>)
 8001e88:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8001e90:	bf83      	ittte	hi
 8001e92:	4b08      	ldrhi	r3, [pc, #32]	; (8001eb4 <xTaskRemoveFromEventList+0x7c>)
 8001e94:	2001      	movhi	r0, #1
 8001e96:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8001e98:	2000      	movls	r0, #0
}
 8001e9a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <xTaskRemoveFromEventList+0x80>)
 8001ea0:	e7ef      	b.n	8001e82 <xTaskRemoveFromEventList+0x4a>
 8001ea2:	bf00      	nop
 8001ea4:	20003cec 	.word	0x20003cec
 8001ea8:	20003cf4 	.word	0x20003cf4
 8001eac:	20003c54 	.word	0x20003c54
 8001eb0:	20003c48 	.word	0x20003c48
 8001eb4:	20003d70 	.word	0x20003d70
 8001eb8:	20003d2c 	.word	0x20003d2c

08001ebc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001ebc:	4b03      	ldr	r3, [pc, #12]	; (8001ecc <vTaskInternalSetTimeOutState+0x10>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001ec2:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <vTaskInternalSetTimeOutState+0x14>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	6043      	str	r3, [r0, #4]
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20003d28 	.word	0x20003d28
 8001ed0:	20003d6c 	.word	0x20003d6c

08001ed4 <xTaskCheckForTimeOut>:
{
 8001ed4:	b570      	push	{r4, r5, r6, lr}
 8001ed6:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8001ed8:	4605      	mov	r5, r0
 8001eda:	b940      	cbnz	r0, 8001eee <xTaskCheckForTimeOut+0x1a>
 8001edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ee0:	f383 8811 	msr	BASEPRI, r3
 8001ee4:	f3bf 8f6f 	isb	sy
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	e7fe      	b.n	8001eec <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8001eee:	b941      	cbnz	r1, 8001f02 <xTaskCheckForTimeOut+0x2e>
 8001ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ef4:	f383 8811 	msr	BASEPRI, r3
 8001ef8:	f3bf 8f6f 	isb	sy
 8001efc:	f3bf 8f4f 	dsb	sy
 8001f00:	e7fe      	b.n	8001f00 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8001f02:	f7ff f8d7 	bl	80010b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f08:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8001f0a:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	1c58      	adds	r0, r3, #1
 8001f10:	d00e      	beq.n	8001f30 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001f12:	480d      	ldr	r0, [pc, #52]	; (8001f48 <xTaskCheckForTimeOut+0x74>)
 8001f14:	682e      	ldr	r6, [r5, #0]
 8001f16:	6800      	ldr	r0, [r0, #0]
 8001f18:	4286      	cmp	r6, r0
 8001f1a:	d001      	beq.n	8001f20 <xTaskCheckForTimeOut+0x4c>
 8001f1c:	428a      	cmp	r2, r1
 8001f1e:	d20e      	bcs.n	8001f3e <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001f20:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d209      	bcs.n	8001f3a <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8001f26:	1a9b      	subs	r3, r3, r2
 8001f28:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001f2a:	4628      	mov	r0, r5
 8001f2c:	f7ff ffc6 	bl	8001ebc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8001f30:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8001f32:	f7ff f8e1 	bl	80010f8 <vPortExitCritical>
}
 8001f36:	4620      	mov	r0, r4
 8001f38:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8001f3e:	2401      	movs	r4, #1
 8001f40:	e7f7      	b.n	8001f32 <xTaskCheckForTimeOut+0x5e>
 8001f42:	bf00      	nop
 8001f44:	20003d6c 	.word	0x20003d6c
 8001f48:	20003d28 	.word	0x20003d28

08001f4c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8001f4c:	4b01      	ldr	r3, [pc, #4]	; (8001f54 <vTaskMissedYield+0x8>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	4770      	bx	lr
 8001f54:	20003d70 	.word	0x20003d70

08001f58 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8001f58:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <xTaskGetSchedulerState+0x18>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	b133      	cbz	r3, 8001f6c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <xTaskGetSchedulerState+0x1c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8001f64:	bf0c      	ite	eq
 8001f66:	2002      	moveq	r0, #2
 8001f68:	2000      	movne	r0, #0
 8001f6a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001f6c:	2001      	movs	r0, #1
	}
 8001f6e:	4770      	bx	lr
 8001f70:	20003d40 	.word	0x20003d40
 8001f74:	20003cec 	.word	0x20003cec

08001f78 <xTaskPriorityDisinherit>:
	{
 8001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	b908      	cbnz	r0, 8001f82 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8001f7e:	2000      	movs	r0, #0
 8001f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8001f82:	4b22      	ldr	r3, [pc, #136]	; (800200c <xTaskPriorityDisinherit+0x94>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4298      	cmp	r0, r3
 8001f88:	d008      	beq.n	8001f9c <xTaskPriorityDisinherit+0x24>
 8001f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f8e:	f383 8811 	msr	BASEPRI, r3
 8001f92:	f3bf 8f6f 	isb	sy
 8001f96:	f3bf 8f4f 	dsb	sy
 8001f9a:	e7fe      	b.n	8001f9a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8001f9c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8001f9e:	b943      	cbnz	r3, 8001fb2 <xTaskPriorityDisinherit+0x3a>
 8001fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa4:	f383 8811 	msr	BASEPRI, r3
 8001fa8:	f3bf 8f6f 	isb	sy
 8001fac:	f3bf 8f4f 	dsb	sy
 8001fb0:	e7fe      	b.n	8001fb0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001fb2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001fb4:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8001fb6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001fb8:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8001fba:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001fbc:	d0df      	beq.n	8001f7e <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1dd      	bne.n	8001f7e <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001fc2:	1d05      	adds	r5, r0, #4
 8001fc4:	4628      	mov	r0, r5
 8001fc6:	f7fe fffc 	bl	8000fc2 <uxListRemove>
 8001fca:	4e11      	ldr	r6, [pc, #68]	; (8002010 <xTaskPriorityDisinherit+0x98>)
 8001fcc:	4a11      	ldr	r2, [pc, #68]	; (8002014 <xTaskPriorityDisinherit+0x9c>)
 8001fce:	b950      	cbnz	r0, 8001fe6 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001fd0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8001fd2:	2114      	movs	r1, #20
 8001fd4:	4379      	muls	r1, r7
 8001fd6:	5873      	ldr	r3, [r6, r1]
 8001fd8:	b92b      	cbnz	r3, 8001fe6 <xTaskPriorityDisinherit+0x6e>
 8001fda:	6813      	ldr	r3, [r2, #0]
 8001fdc:	2001      	movs	r0, #1
 8001fde:	40b8      	lsls	r0, r7
 8001fe0:	ea23 0300 	bic.w	r3, r3, r0
 8001fe4:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8001fe6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fe8:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001fea:	f1c3 0107 	rsb	r1, r3, #7
 8001fee:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8001ff0:	6811      	ldr	r1, [r2, #0]
 8001ff2:	2401      	movs	r4, #1
 8001ff4:	fa04 f003 	lsl.w	r0, r4, r3
 8001ff8:	4308      	orrs	r0, r1
 8001ffa:	6010      	str	r0, [r2, #0]
 8001ffc:	2014      	movs	r0, #20
 8001ffe:	fb00 6003 	mla	r0, r0, r3, r6
 8002002:	4629      	mov	r1, r5
 8002004:	f7fe ffba 	bl	8000f7c <vListInsertEnd>
					xReturn = pdTRUE;
 8002008:	4620      	mov	r0, r4
	}
 800200a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800200c:	20003c48 	.word	0x20003c48
 8002010:	20003c54 	.word	0x20003c54
 8002014:	20003cf4 	.word	0x20003cf4

08002018 <vLed03Task>:
 8002018:	b508      	push	{r3, lr}
 800201a:	2001      	movs	r0, #1
 800201c:	f7fe ff95 	bl	8000f4a <osDelay>
 8002020:	e7fb      	b.n	800201a <vLed03Task+0x2>

08002022 <vLed02Task>:
 8002022:	b508      	push	{r3, lr}
 8002024:	2001      	movs	r0, #1
 8002026:	f7fe ff90 	bl	8000f4a <osDelay>
 800202a:	e7fb      	b.n	8002024 <vLed02Task+0x2>

0800202c <StartDefaultTask>:
 800202c:	b508      	push	{r3, lr}
 800202e:	2001      	movs	r0, #1
 8002030:	f7fe ff8b 	bl	8000f4a <osDelay>
 8002034:	e7fb      	b.n	800202e <StartDefaultTask+0x2>

08002036 <vLed01Task>:
 8002036:	b508      	push	{r3, lr}
 8002038:	2001      	movs	r0, #1
 800203a:	f7fe ff86 	bl	8000f4a <osDelay>
 800203e:	e7fb      	b.n	8002038 <vLed01Task+0x2>

08002040 <SystemClock_Config>:
 8002040:	b530      	push	{r4, r5, lr}
 8002042:	b095      	sub	sp, #84	; 0x54
 8002044:	2230      	movs	r2, #48	; 0x30
 8002046:	2100      	movs	r1, #0
 8002048:	a808      	add	r0, sp, #32
 800204a:	f000 f9b2 	bl	80023b2 <memset>
 800204e:	2100      	movs	r1, #0
 8002050:	2214      	movs	r2, #20
 8002052:	a803      	add	r0, sp, #12
 8002054:	f000 f9ad 	bl	80023b2 <memset>
 8002058:	2400      	movs	r4, #0
 800205a:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <SystemClock_Config+0x8c>)
 800205c:	9401      	str	r4, [sp, #4]
 800205e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002060:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002064:	641a      	str	r2, [r3, #64]	; 0x40
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	9b01      	ldr	r3, [sp, #4]
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <SystemClock_Config+0x90>)
 8002072:	9402      	str	r4, [sp, #8]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	940f      	str	r4, [sp, #60]	; 0x3c
 8002080:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002084:	9302      	str	r3, [sp, #8]
 8002086:	9b02      	ldr	r3, [sp, #8]
 8002088:	2301      	movs	r3, #1
 800208a:	930b      	str	r3, [sp, #44]	; 0x2c
 800208c:	2310      	movs	r3, #16
 800208e:	930c      	str	r3, [sp, #48]	; 0x30
 8002090:	2308      	movs	r3, #8
 8002092:	9310      	str	r3, [sp, #64]	; 0x40
 8002094:	23a8      	movs	r3, #168	; 0xa8
 8002096:	2502      	movs	r5, #2
 8002098:	9311      	str	r3, [sp, #68]	; 0x44
 800209a:	a808      	add	r0, sp, #32
 800209c:	2307      	movs	r3, #7
 800209e:	9313      	str	r3, [sp, #76]	; 0x4c
 80020a0:	9508      	str	r5, [sp, #32]
 80020a2:	950e      	str	r5, [sp, #56]	; 0x38
 80020a4:	9512      	str	r5, [sp, #72]	; 0x48
 80020a6:	f7fe fb81 	bl	80007ac <HAL_RCC_OscConfig>
 80020aa:	230f      	movs	r3, #15
 80020ac:	9303      	str	r3, [sp, #12]
 80020ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020b2:	9306      	str	r3, [sp, #24]
 80020b4:	2105      	movs	r1, #5
 80020b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ba:	a803      	add	r0, sp, #12
 80020bc:	9504      	str	r5, [sp, #16]
 80020be:	9405      	str	r4, [sp, #20]
 80020c0:	9307      	str	r3, [sp, #28]
 80020c2:	f7fe fd23 	bl	8000b0c <HAL_RCC_ClockConfig>
 80020c6:	b015      	add	sp, #84	; 0x54
 80020c8:	bd30      	pop	{r4, r5, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40007000 	.word	0x40007000

080020d4 <main>:
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b096      	sub	sp, #88	; 0x58
 80020d8:	f7fe fa02 	bl	80004e0 <HAL_Init>
 80020dc:	f7ff ffb0 	bl	8002040 <SystemClock_Config>
 80020e0:	2214      	movs	r2, #20
 80020e2:	2100      	movs	r1, #0
 80020e4:	a811      	add	r0, sp, #68	; 0x44
 80020e6:	f000 f964 	bl	80023b2 <memset>
 80020ea:	2500      	movs	r5, #0
 80020ec:	4b2b      	ldr	r3, [pc, #172]	; (800219c <main+0xc8>)
 80020ee:	9501      	str	r5, [sp, #4]
 80020f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020f2:	482b      	ldr	r0, [pc, #172]	; (80021a0 <main+0xcc>)
 80020f4:	4c2b      	ldr	r4, [pc, #172]	; (80021a4 <main+0xd0>)
 80020f6:	f042 0208 	orr.w	r2, r2, #8
 80020fa:	631a      	str	r2, [r3, #48]	; 0x30
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0308 	and.w	r3, r3, #8
 8002102:	462a      	mov	r2, r5
 8002104:	9301      	str	r3, [sp, #4]
 8002106:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800210a:	9b01      	ldr	r3, [sp, #4]
 800210c:	f7fe fb48 	bl	80007a0 <HAL_GPIO_WritePin>
 8002110:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002114:	a911      	add	r1, sp, #68	; 0x44
 8002116:	9311      	str	r3, [sp, #68]	; 0x44
 8002118:	4821      	ldr	r0, [pc, #132]	; (80021a0 <main+0xcc>)
 800211a:	9513      	str	r5, [sp, #76]	; 0x4c
 800211c:	2301      	movs	r3, #1
 800211e:	9312      	str	r3, [sp, #72]	; 0x48
 8002120:	9514      	str	r5, [sp, #80]	; 0x50
 8002122:	f7fe fa5d 	bl	80005e0 <HAL_GPIO_Init>
 8002126:	a816      	add	r0, sp, #88	; 0x58
 8002128:	af02      	add	r7, sp, #8
 800212a:	f840 5d58 	str.w	r5, [r0, #-88]!
 800212e:	f7fe ff14 	bl	8000f5a <osMutexCreate>
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <main+0xd4>)
 8002134:	6018      	str	r0, [r3, #0]
 8002136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002138:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800213a:	4626      	mov	r6, r4
 800213c:	4629      	mov	r1, r5
 800213e:	f856 3b04 	ldr.w	r3, [r6], #4
 8002142:	603b      	str	r3, [r7, #0]
 8002144:	a802      	add	r0, sp, #8
 8002146:	f7fe fee8 	bl	8000f1a <osThreadCreate>
 800214a:	4b18      	ldr	r3, [pc, #96]	; (80021ac <main+0xd8>)
 800214c:	6018      	str	r0, [r3, #0]
 800214e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002150:	af07      	add	r7, sp, #28
 8002152:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8002154:	6833      	ldr	r3, [r6, #0]
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	4629      	mov	r1, r5
 800215a:	a807      	add	r0, sp, #28
 800215c:	f7fe fedd 	bl	8000f1a <osThreadCreate>
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <main+0xdc>)
 8002162:	f104 0718 	add.w	r7, r4, #24
 8002166:	6018      	str	r0, [r3, #0]
 8002168:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800216a:	ae0c      	add	r6, sp, #48	; 0x30
 800216c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6033      	str	r3, [r6, #0]
 8002172:	4629      	mov	r1, r5
 8002174:	a80c      	add	r0, sp, #48	; 0x30
 8002176:	f7fe fed0 	bl	8000f1a <osThreadCreate>
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <main+0xe0>)
 800217c:	342c      	adds	r4, #44	; 0x2c
 800217e:	6018      	str	r0, [r3, #0]
 8002180:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002182:	ae11      	add	r6, sp, #68	; 0x44
 8002184:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	6033      	str	r3, [r6, #0]
 800218a:	4629      	mov	r1, r5
 800218c:	a811      	add	r0, sp, #68	; 0x44
 800218e:	f7fe fec4 	bl	8000f1a <osThreadCreate>
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <main+0xe4>)
 8002194:	6018      	str	r0, [r3, #0]
 8002196:	f7fe febb 	bl	8000f10 <osKernelStart>
 800219a:	e7fe      	b.n	800219a <main+0xc6>
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020c00 	.word	0x40020c00
 80021a4:	080023dc 	.word	0x080023dc
 80021a8:	20003d88 	.word	0x20003d88
 80021ac:	20003d78 	.word	0x20003d78
 80021b0:	20003d7c 	.word	0x20003d7c
 80021b4:	20003d84 	.word	0x20003d84
 80021b8:	20003d80 	.word	0x20003d80

080021bc <HAL_TIM_PeriodElapsedCallback>:
 80021bc:	6803      	ldr	r3, [r0, #0]
 80021be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c2:	d101      	bne.n	80021c8 <HAL_TIM_PeriodElapsedCallback+0xc>
 80021c4:	f7fe b9a6 	b.w	8000514 <HAL_IncTick>
 80021c8:	4770      	bx	lr
	...

080021cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021cc:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ce:	4b13      	ldr	r3, [pc, #76]	; (800221c <HAL_MspInit+0x50>)
 80021d0:	2400      	movs	r4, #0
 80021d2:	9400      	str	r4, [sp, #0]
 80021d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021da:	645a      	str	r2, [r3, #68]	; 0x44
 80021dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021e6:	9401      	str	r4, [sp, #4]
 80021e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f6:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021f8:	4622      	mov	r2, r4
 80021fa:	210f      	movs	r1, #15
 80021fc:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002200:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002202:	f7fe f9ab 	bl	800055c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002206:	2105      	movs	r1, #5
 8002208:	4608      	mov	r0, r1
 800220a:	4622      	mov	r2, r4
 800220c:	f7fe f9a6 	bl	800055c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002210:	2005      	movs	r0, #5
 8002212:	f7fe f9d7 	bl	80005c4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002216:	b002      	add	sp, #8
 8002218:	bd10      	pop	{r4, pc}
 800221a:	bf00      	nop
 800221c:	40023800 	.word	0x40023800

08002220 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002220:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8002222:	4601      	mov	r1, r0
{
 8002224:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8002226:	2200      	movs	r2, #0
 8002228:	201c      	movs	r0, #28
 800222a:	f7fe f997 	bl	800055c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800222e:	201c      	movs	r0, #28
 8002230:	f7fe f9c8 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002234:	2500      	movs	r5, #0
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_InitTick+0x6c>)
 8002238:	9502      	str	r5, [sp, #8]
 800223a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 800223c:	4c14      	ldr	r4, [pc, #80]	; (8002290 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 800223e:	f042 0201 	orr.w	r2, r2, #1
 8002242:	641a      	str	r2, [r3, #64]	; 0x40
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800224c:	a901      	add	r1, sp, #4
 800224e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002250:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002252:	f7fe fd05 	bl	8000c60 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002256:	f7fe fcf3 	bl	8000c40 <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 800225a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800225e:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002260:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002264:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002266:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <HAL_InitTick+0x74>)
 800226a:	fbb0 f0f3 	udiv	r0, r0, r3
 800226e:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8002270:	6060      	str	r0, [r4, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002272:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 8002274:	6125      	str	r5, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002276:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002278:	f7fe fe2e 	bl	8000ed8 <HAL_TIM_Base_Init>
 800227c:	b920      	cbnz	r0, 8002288 <HAL_InitTick+0x68>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 800227e:	4620      	mov	r0, r4
 8002280:	f7fe fd0d 	bl	8000c9e <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002284:	b009      	add	sp, #36	; 0x24
 8002286:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8002288:	2001      	movs	r0, #1
 800228a:	e7fb      	b.n	8002284 <HAL_InitTick+0x64>
 800228c:	40023800 	.word	0x40023800
 8002290:	20003d8c 	.word	0x20003d8c
 8002294:	000f4240 	.word	0x000f4240

08002298 <NMI_Handler>:
 8002298:	4770      	bx	lr

0800229a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229a:	e7fe      	b.n	800229a <HardFault_Handler>

0800229c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800229c:	e7fe      	b.n	800229c <MemManage_Handler>

0800229e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229e:	e7fe      	b.n	800229e <BusFault_Handler>

080022a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a0:	e7fe      	b.n	80022a0 <UsageFault_Handler>

080022a2 <DebugMon_Handler>:
 80022a2:	4770      	bx	lr

080022a4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80022a4:	4770      	bx	lr
	...

080022a8 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80022a8:	4801      	ldr	r0, [pc, #4]	; (80022b0 <TIM2_IRQHandler+0x8>)
 80022aa:	f7fe bd0c 	b.w	8000cc6 <HAL_TIM_IRQHandler>
 80022ae:	bf00      	nop
 80022b0:	20003d8c 	.word	0x20003d8c

080022b4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022b4:	490f      	ldr	r1, [pc, #60]	; (80022f4 <SystemInit+0x40>)
 80022b6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80022ba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80022c2:	4b0d      	ldr	r3, [pc, #52]	; (80022f8 <SystemInit+0x44>)
 80022c4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80022c6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80022c8:	f042 0201 	orr.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80022ce:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80022d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80022da:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80022dc:	4a07      	ldr	r2, [pc, #28]	; (80022fc <SystemInit+0x48>)
 80022de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022e6:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80022e8:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022ee:	608b      	str	r3, [r1, #8]
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	e000ed00 	.word	0xe000ed00
 80022f8:	40023800 	.word	0x40023800
 80022fc:	24003010 	.word	0x24003010

08002300 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002338 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002304:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002306:	e003      	b.n	8002310 <LoopCopyDataInit>

08002308 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800230a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800230c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800230e:	3104      	adds	r1, #4

08002310 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002310:	480b      	ldr	r0, [pc, #44]	; (8002340 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002314:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002316:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002318:	d3f6      	bcc.n	8002308 <CopyDataInit>
  ldr  r2, =_sbss
 800231a:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800231c:	e002      	b.n	8002324 <LoopFillZerobss>

0800231e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800231e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002320:	f842 3b04 	str.w	r3, [r2], #4

08002324 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002326:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002328:	d3f9      	bcc.n	800231e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800232a:	f7ff ffc3 	bl	80022b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800232e:	f000 f811 	bl	8002354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002332:	f7ff fecf 	bl	80020d4 <main>
  bx  lr    
 8002336:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002338:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800233c:	08002484 	.word	0x08002484
  ldr  r0, =_sdata
 8002340:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002344:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002348:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800234c:	20003dcc 	.word	0x20003dcc

08002350 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC_IRQHandler>
	...

08002354 <__libc_init_array>:
 8002354:	b570      	push	{r4, r5, r6, lr}
 8002356:	4e0d      	ldr	r6, [pc, #52]	; (800238c <__libc_init_array+0x38>)
 8002358:	4c0d      	ldr	r4, [pc, #52]	; (8002390 <__libc_init_array+0x3c>)
 800235a:	1ba4      	subs	r4, r4, r6
 800235c:	10a4      	asrs	r4, r4, #2
 800235e:	2500      	movs	r5, #0
 8002360:	42a5      	cmp	r5, r4
 8002362:	d109      	bne.n	8002378 <__libc_init_array+0x24>
 8002364:	4e0b      	ldr	r6, [pc, #44]	; (8002394 <__libc_init_array+0x40>)
 8002366:	4c0c      	ldr	r4, [pc, #48]	; (8002398 <__libc_init_array+0x44>)
 8002368:	f000 f82c 	bl	80023c4 <_init>
 800236c:	1ba4      	subs	r4, r4, r6
 800236e:	10a4      	asrs	r4, r4, #2
 8002370:	2500      	movs	r5, #0
 8002372:	42a5      	cmp	r5, r4
 8002374:	d105      	bne.n	8002382 <__libc_init_array+0x2e>
 8002376:	bd70      	pop	{r4, r5, r6, pc}
 8002378:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800237c:	4798      	blx	r3
 800237e:	3501      	adds	r5, #1
 8002380:	e7ee      	b.n	8002360 <__libc_init_array+0xc>
 8002382:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002386:	4798      	blx	r3
 8002388:	3501      	adds	r5, #1
 800238a:	e7f2      	b.n	8002372 <__libc_init_array+0x1e>
 800238c:	0800247c 	.word	0x0800247c
 8002390:	0800247c 	.word	0x0800247c
 8002394:	0800247c 	.word	0x0800247c
 8002398:	08002480 	.word	0x08002480

0800239c <memcpy>:
 800239c:	b510      	push	{r4, lr}
 800239e:	1e43      	subs	r3, r0, #1
 80023a0:	440a      	add	r2, r1
 80023a2:	4291      	cmp	r1, r2
 80023a4:	d100      	bne.n	80023a8 <memcpy+0xc>
 80023a6:	bd10      	pop	{r4, pc}
 80023a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80023ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80023b0:	e7f7      	b.n	80023a2 <memcpy+0x6>

080023b2 <memset>:
 80023b2:	4402      	add	r2, r0
 80023b4:	4603      	mov	r3, r0
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d100      	bne.n	80023bc <memset+0xa>
 80023ba:	4770      	bx	lr
 80023bc:	f803 1b01 	strb.w	r1, [r3], #1
 80023c0:	e7f9      	b.n	80023b6 <memset+0x4>
	...

080023c4 <_init>:
 80023c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023c6:	bf00      	nop
 80023c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023ca:	bc08      	pop	{r3}
 80023cc:	469e      	mov	lr, r3
 80023ce:	4770      	bx	lr

080023d0 <_fini>:
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	bf00      	nop
 80023d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d6:	bc08      	pop	{r3}
 80023d8:	469e      	mov	lr, r3
 80023da:	4770      	bx	lr
