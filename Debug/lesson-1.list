
lesson-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  0800400c  0800400c  0001400c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000084  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000108  08004134  08004134  00014134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08004244  08004244  00014244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000100  20000000  08004248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
  9 .bss          00003dd8  20000100  20000100  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003ed8  20003ed8  00020100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138c4  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e82  00000000  00000000  000339f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000081c6  00000000  00000000  00036876  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000c70  00000000  00000000  0003ea40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000f78  00000000  00000000  0003f6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006222  00000000  00000000  00040628  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000534a  00000000  00000000  0004684a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0004bb94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024d8  00000000  00000000  0004bc10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ff4 	.word	0x08003ff4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08003ff4 	.word	0x08003ff4

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f001 b8f6 	b.w	80013d4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <selfrel_offset31>:
 80004dc:	6803      	ldr	r3, [r0, #0]
 80004de:	005a      	lsls	r2, r3, #1
 80004e0:	bf4c      	ite	mi
 80004e2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80004e6:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80004ea:	4418      	add	r0, r3
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <search_EIT_table>:
 80004f0:	b361      	cbz	r1, 800054c <search_EIT_table+0x5c>
 80004f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004f6:	f101 3aff 	add.w	sl, r1, #4294967295
 80004fa:	4690      	mov	r8, r2
 80004fc:	4606      	mov	r6, r0
 80004fe:	46d1      	mov	r9, sl
 8000500:	2700      	movs	r7, #0
 8000502:	eb07 0409 	add.w	r4, r7, r9
 8000506:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800050a:	1064      	asrs	r4, r4, #1
 800050c:	00e5      	lsls	r5, r4, #3
 800050e:	1971      	adds	r1, r6, r5
 8000510:	4608      	mov	r0, r1
 8000512:	f7ff ffe3 	bl	80004dc <selfrel_offset31>
 8000516:	45a2      	cmp	sl, r4
 8000518:	4683      	mov	fp, r0
 800051a:	f105 0008 	add.w	r0, r5, #8
 800051e:	4430      	add	r0, r6
 8000520:	d009      	beq.n	8000536 <search_EIT_table+0x46>
 8000522:	f7ff ffdb 	bl	80004dc <selfrel_offset31>
 8000526:	45c3      	cmp	fp, r8
 8000528:	f100 30ff 	add.w	r0, r0, #4294967295
 800052c:	d805      	bhi.n	800053a <search_EIT_table+0x4a>
 800052e:	4540      	cmp	r0, r8
 8000530:	d209      	bcs.n	8000546 <search_EIT_table+0x56>
 8000532:	1c67      	adds	r7, r4, #1
 8000534:	e7e5      	b.n	8000502 <search_EIT_table+0x12>
 8000536:	45c3      	cmp	fp, r8
 8000538:	d905      	bls.n	8000546 <search_EIT_table+0x56>
 800053a:	42a7      	cmp	r7, r4
 800053c:	d002      	beq.n	8000544 <search_EIT_table+0x54>
 800053e:	f104 39ff 	add.w	r9, r4, #4294967295
 8000542:	e7de      	b.n	8000502 <search_EIT_table+0x12>
 8000544:	2100      	movs	r1, #0
 8000546:	4608      	mov	r0, r1
 8000548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800054c:	4608      	mov	r0, r1
 800054e:	4770      	bx	lr

08000550 <__gnu_unwind_get_pr_addr>:
 8000550:	2801      	cmp	r0, #1
 8000552:	d007      	beq.n	8000564 <__gnu_unwind_get_pr_addr+0x14>
 8000554:	2802      	cmp	r0, #2
 8000556:	d007      	beq.n	8000568 <__gnu_unwind_get_pr_addr+0x18>
 8000558:	4b04      	ldr	r3, [pc, #16]	; (800056c <__gnu_unwind_get_pr_addr+0x1c>)
 800055a:	2800      	cmp	r0, #0
 800055c:	bf0c      	ite	eq
 800055e:	4618      	moveq	r0, r3
 8000560:	2000      	movne	r0, #0
 8000562:	4770      	bx	lr
 8000564:	4802      	ldr	r0, [pc, #8]	; (8000570 <__gnu_unwind_get_pr_addr+0x20>)
 8000566:	4770      	bx	lr
 8000568:	4802      	ldr	r0, [pc, #8]	; (8000574 <__gnu_unwind_get_pr_addr+0x24>)
 800056a:	4770      	bx	lr
 800056c:	08000c55 	.word	0x08000c55
 8000570:	08000c59 	.word	0x08000c59
 8000574:	08000c5d 	.word	0x08000c5d

08000578 <get_eit_entry>:
 8000578:	b530      	push	{r4, r5, lr}
 800057a:	4b24      	ldr	r3, [pc, #144]	; (800060c <get_eit_entry+0x94>)
 800057c:	b083      	sub	sp, #12
 800057e:	4604      	mov	r4, r0
 8000580:	1e8d      	subs	r5, r1, #2
 8000582:	b37b      	cbz	r3, 80005e4 <get_eit_entry+0x6c>
 8000584:	a901      	add	r1, sp, #4
 8000586:	4628      	mov	r0, r5
 8000588:	f3af 8000 	nop.w
 800058c:	b320      	cbz	r0, 80005d8 <get_eit_entry+0x60>
 800058e:	9901      	ldr	r1, [sp, #4]
 8000590:	462a      	mov	r2, r5
 8000592:	f7ff ffad 	bl	80004f0 <search_EIT_table>
 8000596:	4601      	mov	r1, r0
 8000598:	b1f0      	cbz	r0, 80005d8 <get_eit_entry+0x60>
 800059a:	f7ff ff9f 	bl	80004dc <selfrel_offset31>
 800059e:	684b      	ldr	r3, [r1, #4]
 80005a0:	64a0      	str	r0, [r4, #72]	; 0x48
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d012      	beq.n	80005cc <get_eit_entry+0x54>
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	f101 0004 	add.w	r0, r1, #4
 80005ac:	db20      	blt.n	80005f0 <get_eit_entry+0x78>
 80005ae:	f7ff ff95 	bl	80004dc <selfrel_offset31>
 80005b2:	2300      	movs	r3, #0
 80005b4:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005b6:	6523      	str	r3, [r4, #80]	; 0x50
 80005b8:	6803      	ldr	r3, [r0, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	db1c      	blt.n	80005f8 <get_eit_entry+0x80>
 80005be:	f7ff ff8d 	bl	80004dc <selfrel_offset31>
 80005c2:	2300      	movs	r3, #0
 80005c4:	6120      	str	r0, [r4, #16]
 80005c6:	4618      	mov	r0, r3
 80005c8:	b003      	add	sp, #12
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	2300      	movs	r3, #0
 80005ce:	6123      	str	r3, [r4, #16]
 80005d0:	2305      	movs	r3, #5
 80005d2:	4618      	mov	r0, r3
 80005d4:	b003      	add	sp, #12
 80005d6:	bd30      	pop	{r4, r5, pc}
 80005d8:	2300      	movs	r3, #0
 80005da:	6123      	str	r3, [r4, #16]
 80005dc:	2309      	movs	r3, #9
 80005de:	4618      	mov	r0, r3
 80005e0:	b003      	add	sp, #12
 80005e2:	bd30      	pop	{r4, r5, pc}
 80005e4:	490a      	ldr	r1, [pc, #40]	; (8000610 <get_eit_entry+0x98>)
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <get_eit_entry+0x9c>)
 80005e8:	1a09      	subs	r1, r1, r0
 80005ea:	10c9      	asrs	r1, r1, #3
 80005ec:	9101      	str	r1, [sp, #4]
 80005ee:	e7cf      	b.n	8000590 <get_eit_entry+0x18>
 80005f0:	2301      	movs	r3, #1
 80005f2:	64e0      	str	r0, [r4, #76]	; 0x4c
 80005f4:	6523      	str	r3, [r4, #80]	; 0x50
 80005f6:	e7df      	b.n	80005b8 <get_eit_entry+0x40>
 80005f8:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80005fc:	f7ff ffa8 	bl	8000550 <__gnu_unwind_get_pr_addr>
 8000600:	2800      	cmp	r0, #0
 8000602:	6120      	str	r0, [r4, #16]
 8000604:	bf14      	ite	ne
 8000606:	2300      	movne	r3, #0
 8000608:	2309      	moveq	r3, #9
 800060a:	e7dc      	b.n	80005c6 <get_eit_entry+0x4e>
 800060c:	00000000 	.word	0x00000000
 8000610:	0800423c 	.word	0x0800423c
 8000614:	08004134 	.word	0x08004134

08000618 <restore_non_core_regs>:
 8000618:	6803      	ldr	r3, [r0, #0]
 800061a:	07da      	lsls	r2, r3, #31
 800061c:	b510      	push	{r4, lr}
 800061e:	4604      	mov	r4, r0
 8000620:	d406      	bmi.n	8000630 <restore_non_core_regs+0x18>
 8000622:	079b      	lsls	r3, r3, #30
 8000624:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000628:	d509      	bpl.n	800063e <restore_non_core_regs+0x26>
 800062a:	f000 fc51 	bl	8000ed0 <__gnu_Unwind_Restore_VFP_D>
 800062e:	6823      	ldr	r3, [r4, #0]
 8000630:	0759      	lsls	r1, r3, #29
 8000632:	d509      	bpl.n	8000648 <restore_non_core_regs+0x30>
 8000634:	071a      	lsls	r2, r3, #28
 8000636:	d50e      	bpl.n	8000656 <restore_non_core_regs+0x3e>
 8000638:	06db      	lsls	r3, r3, #27
 800063a:	d513      	bpl.n	8000664 <restore_non_core_regs+0x4c>
 800063c:	bd10      	pop	{r4, pc}
 800063e:	f000 fc3f 	bl	8000ec0 <__gnu_Unwind_Restore_VFP>
 8000642:	6823      	ldr	r3, [r4, #0]
 8000644:	0759      	lsls	r1, r3, #29
 8000646:	d4f5      	bmi.n	8000634 <restore_non_core_regs+0x1c>
 8000648:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800064c:	f000 fc48 	bl	8000ee0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000650:	6823      	ldr	r3, [r4, #0]
 8000652:	071a      	lsls	r2, r3, #28
 8000654:	d4f0      	bmi.n	8000638 <restore_non_core_regs+0x20>
 8000656:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800065a:	f000 fc49 	bl	8000ef0 <__gnu_Unwind_Restore_WMMXD>
 800065e:	6823      	ldr	r3, [r4, #0]
 8000660:	06db      	lsls	r3, r3, #27
 8000662:	d4eb      	bmi.n	800063c <restore_non_core_regs+0x24>
 8000664:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000668:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800066c:	f000 bc84 	b.w	8000f78 <__gnu_Unwind_Restore_WMMXC>

08000670 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000670:	6803      	ldr	r3, [r0, #0]
 8000672:	b103      	cbz	r3, 8000676 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000674:	4403      	add	r3, r0
 8000676:	4618      	mov	r0, r3
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__gnu_unwind_24bit.isra.1>:
 800067c:	2009      	movs	r0, #9
 800067e:	4770      	bx	lr

08000680 <_Unwind_DebugHook>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <unwind_phase2>:
 8000684:	b570      	push	{r4, r5, r6, lr}
 8000686:	4604      	mov	r4, r0
 8000688:	460d      	mov	r5, r1
 800068a:	e008      	b.n	800069e <unwind_phase2+0x1a>
 800068c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800068e:	6163      	str	r3, [r4, #20]
 8000690:	462a      	mov	r2, r5
 8000692:	6923      	ldr	r3, [r4, #16]
 8000694:	4621      	mov	r1, r4
 8000696:	2001      	movs	r0, #1
 8000698:	4798      	blx	r3
 800069a:	2808      	cmp	r0, #8
 800069c:	d108      	bne.n	80006b0 <unwind_phase2+0x2c>
 800069e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006a0:	4620      	mov	r0, r4
 80006a2:	f7ff ff69 	bl	8000578 <get_eit_entry>
 80006a6:	4606      	mov	r6, r0
 80006a8:	2800      	cmp	r0, #0
 80006aa:	d0ef      	beq.n	800068c <unwind_phase2+0x8>
 80006ac:	f003 fc57 	bl	8003f5e <abort>
 80006b0:	2807      	cmp	r0, #7
 80006b2:	d1fb      	bne.n	80006ac <unwind_phase2+0x28>
 80006b4:	4630      	mov	r0, r6
 80006b6:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80006b8:	f7ff ffe2 	bl	8000680 <_Unwind_DebugHook>
 80006bc:	1d28      	adds	r0, r5, #4
 80006be:	f000 fbf3 	bl	8000ea8 <__restore_core_regs>
 80006c2:	bf00      	nop

080006c4 <unwind_phase2_forced>:
 80006c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006c8:	1d0c      	adds	r4, r1, #4
 80006ca:	4605      	mov	r5, r0
 80006cc:	4692      	mov	sl, r2
 80006ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006d0:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 80006d4:	ae03      	add	r6, sp, #12
 80006d6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006da:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80006de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80006e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80006e4:	ac02      	add	r4, sp, #8
 80006e6:	f8d5 800c 	ldr.w	r8, [r5, #12]
 80006ea:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80006ee:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80006f2:	2300      	movs	r3, #0
 80006f4:	4628      	mov	r0, r5
 80006f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80006f8:	6023      	str	r3, [r4, #0]
 80006fa:	f7ff ff3d 	bl	8000578 <get_eit_entry>
 80006fe:	f1ba 0f00 	cmp.w	sl, #0
 8000702:	4607      	mov	r7, r0
 8000704:	bf14      	ite	ne
 8000706:	260a      	movne	r6, #10
 8000708:	2609      	moveq	r6, #9
 800070a:	b17f      	cbz	r7, 800072c <unwind_phase2_forced+0x68>
 800070c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800070e:	f046 0110 	orr.w	r1, r6, #16
 8000712:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000716:	462a      	mov	r2, r5
 8000718:	6463      	str	r3, [r4, #68]	; 0x44
 800071a:	2001      	movs	r0, #1
 800071c:	462b      	mov	r3, r5
 800071e:	47c0      	blx	r8
 8000720:	bb78      	cbnz	r0, 8000782 <unwind_phase2_forced+0xbe>
 8000722:	4638      	mov	r0, r7
 8000724:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800072e:	616b      	str	r3, [r5, #20]
 8000730:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000734:	4621      	mov	r1, r4
 8000736:	a87a      	add	r0, sp, #488	; 0x1e8
 8000738:	f003 fbfe 	bl	8003f38 <memcpy>
 800073c:	692b      	ldr	r3, [r5, #16]
 800073e:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000740:	4629      	mov	r1, r5
 8000742:	4630      	mov	r0, r6
 8000744:	4798      	blx	r3
 8000746:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000748:	4682      	mov	sl, r0
 800074a:	e88d 0210 	stmia.w	sp, {r4, r9}
 800074e:	4631      	mov	r1, r6
 8000750:	6463      	str	r3, [r4, #68]	; 0x44
 8000752:	462a      	mov	r2, r5
 8000754:	462b      	mov	r3, r5
 8000756:	2001      	movs	r0, #1
 8000758:	47c0      	blx	r8
 800075a:	b990      	cbnz	r0, 8000782 <unwind_phase2_forced+0xbe>
 800075c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000760:	a97a      	add	r1, sp, #488	; 0x1e8
 8000762:	4620      	mov	r0, r4
 8000764:	f003 fbe8 	bl	8003f38 <memcpy>
 8000768:	f1ba 0f08 	cmp.w	sl, #8
 800076c:	d106      	bne.n	800077c <unwind_phase2_forced+0xb8>
 800076e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000770:	4628      	mov	r0, r5
 8000772:	f7ff ff01 	bl	8000578 <get_eit_entry>
 8000776:	2609      	movs	r6, #9
 8000778:	4607      	mov	r7, r0
 800077a:	e7c6      	b.n	800070a <unwind_phase2_forced+0x46>
 800077c:	f1ba 0f07 	cmp.w	sl, #7
 8000780:	d005      	beq.n	800078e <unwind_phase2_forced+0xca>
 8000782:	2709      	movs	r7, #9
 8000784:	4638      	mov	r0, r7
 8000786:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800078a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800078e:	4638      	mov	r0, r7
 8000790:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000792:	f7ff ff75 	bl	8000680 <_Unwind_DebugHook>
 8000796:	a803      	add	r0, sp, #12
 8000798:	f000 fb86 	bl	8000ea8 <__restore_core_regs>

0800079c <_Unwind_GetCFA>:
 800079c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800079e:	4770      	bx	lr

080007a0 <__gnu_Unwind_RaiseException>:
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 80007a4:	640b      	str	r3, [r1, #64]	; 0x40
 80007a6:	1d0e      	adds	r6, r1, #4
 80007a8:	460f      	mov	r7, r1
 80007aa:	4604      	mov	r4, r0
 80007ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ae:	b0f9      	sub	sp, #484	; 0x1e4
 80007b0:	ad01      	add	r5, sp, #4
 80007b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007c0:	f04f 36ff 	mov.w	r6, #4294967295
 80007c4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007c8:	9600      	str	r6, [sp, #0]
 80007ca:	e006      	b.n	80007da <__gnu_Unwind_RaiseException+0x3a>
 80007cc:	6923      	ldr	r3, [r4, #16]
 80007ce:	466a      	mov	r2, sp
 80007d0:	4621      	mov	r1, r4
 80007d2:	4798      	blx	r3
 80007d4:	2808      	cmp	r0, #8
 80007d6:	4605      	mov	r5, r0
 80007d8:	d108      	bne.n	80007ec <__gnu_Unwind_RaiseException+0x4c>
 80007da:	9910      	ldr	r1, [sp, #64]	; 0x40
 80007dc:	4620      	mov	r0, r4
 80007de:	f7ff fecb 	bl	8000578 <get_eit_entry>
 80007e2:	2800      	cmp	r0, #0
 80007e4:	d0f2      	beq.n	80007cc <__gnu_Unwind_RaiseException+0x2c>
 80007e6:	2009      	movs	r0, #9
 80007e8:	b079      	add	sp, #484	; 0x1e4
 80007ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ec:	4668      	mov	r0, sp
 80007ee:	f7ff ff13 	bl	8000618 <restore_non_core_regs>
 80007f2:	2d06      	cmp	r5, #6
 80007f4:	d1f7      	bne.n	80007e6 <__gnu_Unwind_RaiseException+0x46>
 80007f6:	4639      	mov	r1, r7
 80007f8:	4620      	mov	r0, r4
 80007fa:	f7ff ff43 	bl	8000684 <unwind_phase2>
 80007fe:	bf00      	nop

08000800 <__gnu_Unwind_ForcedUnwind>:
 8000800:	b430      	push	{r4, r5}
 8000802:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8000804:	60c1      	str	r1, [r0, #12]
 8000806:	6182      	str	r2, [r0, #24]
 8000808:	4619      	mov	r1, r3
 800080a:	641d      	str	r5, [r3, #64]	; 0x40
 800080c:	2200      	movs	r2, #0
 800080e:	bc30      	pop	{r4, r5}
 8000810:	e758      	b.n	80006c4 <unwind_phase2_forced>
 8000812:	bf00      	nop

08000814 <__gnu_Unwind_Resume>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	68c6      	ldr	r6, [r0, #12]
 8000818:	6943      	ldr	r3, [r0, #20]
 800081a:	640b      	str	r3, [r1, #64]	; 0x40
 800081c:	b126      	cbz	r6, 8000828 <__gnu_Unwind_Resume+0x14>
 800081e:	2201      	movs	r2, #1
 8000820:	f7ff ff50 	bl	80006c4 <unwind_phase2_forced>
 8000824:	f003 fb9b 	bl	8003f5e <abort>
 8000828:	6903      	ldr	r3, [r0, #16]
 800082a:	460a      	mov	r2, r1
 800082c:	4604      	mov	r4, r0
 800082e:	460d      	mov	r5, r1
 8000830:	4601      	mov	r1, r0
 8000832:	2002      	movs	r0, #2
 8000834:	4798      	blx	r3
 8000836:	2807      	cmp	r0, #7
 8000838:	d007      	beq.n	800084a <__gnu_Unwind_Resume+0x36>
 800083a:	2808      	cmp	r0, #8
 800083c:	d103      	bne.n	8000846 <__gnu_Unwind_Resume+0x32>
 800083e:	4629      	mov	r1, r5
 8000840:	4620      	mov	r0, r4
 8000842:	f7ff ff1f 	bl	8000684 <unwind_phase2>
 8000846:	f003 fb8a 	bl	8003f5e <abort>
 800084a:	4630      	mov	r0, r6
 800084c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800084e:	f7ff ff17 	bl	8000680 <_Unwind_DebugHook>
 8000852:	1d28      	adds	r0, r5, #4
 8000854:	f000 fb28 	bl	8000ea8 <__restore_core_regs>

08000858 <__gnu_Unwind_Resume_or_Rethrow>:
 8000858:	68c2      	ldr	r2, [r0, #12]
 800085a:	b11a      	cbz	r2, 8000864 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 800085c:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800085e:	640a      	str	r2, [r1, #64]	; 0x40
 8000860:	2200      	movs	r2, #0
 8000862:	e72f      	b.n	80006c4 <unwind_phase2_forced>
 8000864:	e79c      	b.n	80007a0 <__gnu_Unwind_RaiseException>
 8000866:	bf00      	nop

08000868 <_Unwind_Complete>:
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop

0800086c <_Unwind_DeleteException>:
 800086c:	6883      	ldr	r3, [r0, #8]
 800086e:	b113      	cbz	r3, 8000876 <_Unwind_DeleteException+0xa>
 8000870:	4601      	mov	r1, r0
 8000872:	2001      	movs	r0, #1
 8000874:	4718      	bx	r3
 8000876:	4770      	bx	lr

08000878 <_Unwind_VRS_Get>:
 8000878:	b500      	push	{lr}
 800087a:	2904      	cmp	r1, #4
 800087c:	d807      	bhi.n	800088e <_Unwind_VRS_Get+0x16>
 800087e:	e8df f001 	tbb	[pc, r1]
 8000882:	0903      	.short	0x0903
 8000884:	0906      	.short	0x0906
 8000886:	09          	.byte	0x09
 8000887:	00          	.byte	0x00
 8000888:	b90b      	cbnz	r3, 800088e <_Unwind_VRS_Get+0x16>
 800088a:	2a0f      	cmp	r2, #15
 800088c:	d905      	bls.n	800089a <_Unwind_VRS_Get+0x22>
 800088e:	2002      	movs	r0, #2
 8000890:	f85d fb04 	ldr.w	pc, [sp], #4
 8000894:	2001      	movs	r0, #1
 8000896:	f85d fb04 	ldr.w	pc, [sp], #4
 800089a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800089e:	4618      	mov	r0, r3
 80008a0:	6853      	ldr	r3, [r2, #4]
 80008a2:	9a01      	ldr	r2, [sp, #4]
 80008a4:	6013      	str	r3, [r2, #0]
 80008a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80008aa:	bf00      	nop

080008ac <_Unwind_GetGR>:
 80008ac:	b510      	push	{r4, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	2300      	movs	r3, #0
 80008b2:	ac03      	add	r4, sp, #12
 80008b4:	460a      	mov	r2, r1
 80008b6:	9400      	str	r4, [sp, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f7ff ffdd 	bl	8000878 <_Unwind_VRS_Get>
 80008be:	9803      	ldr	r0, [sp, #12]
 80008c0:	b004      	add	sp, #16
 80008c2:	bd10      	pop	{r4, pc}

080008c4 <_Unwind_VRS_Set>:
 80008c4:	b500      	push	{lr}
 80008c6:	2904      	cmp	r1, #4
 80008c8:	d807      	bhi.n	80008da <_Unwind_VRS_Set+0x16>
 80008ca:	e8df f001 	tbb	[pc, r1]
 80008ce:	0903      	.short	0x0903
 80008d0:	0906      	.short	0x0906
 80008d2:	09          	.byte	0x09
 80008d3:	00          	.byte	0x00
 80008d4:	b90b      	cbnz	r3, 80008da <_Unwind_VRS_Set+0x16>
 80008d6:	2a0f      	cmp	r2, #15
 80008d8:	d905      	bls.n	80008e6 <_Unwind_VRS_Set+0x22>
 80008da:	2002      	movs	r0, #2
 80008dc:	f85d fb04 	ldr.w	pc, [sp], #4
 80008e0:	2001      	movs	r0, #1
 80008e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80008e6:	9901      	ldr	r1, [sp, #4]
 80008e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80008ec:	6809      	ldr	r1, [r1, #0]
 80008ee:	6051      	str	r1, [r2, #4]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80008f6:	bf00      	nop

080008f8 <_Unwind_SetGR>:
 80008f8:	b510      	push	{r4, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	ac04      	add	r4, sp, #16
 80008fe:	2300      	movs	r3, #0
 8000900:	f844 2d04 	str.w	r2, [r4, #-4]!
 8000904:	460a      	mov	r2, r1
 8000906:	9400      	str	r4, [sp, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f7ff ffdb 	bl	80008c4 <_Unwind_VRS_Set>
 800090e:	b004      	add	sp, #16
 8000910:	bd10      	pop	{r4, pc}
 8000912:	bf00      	nop

08000914 <__gnu_Unwind_Backtrace>:
 8000914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000916:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000918:	6413      	str	r3, [r2, #64]	; 0x40
 800091a:	1d15      	adds	r5, r2, #4
 800091c:	4607      	mov	r7, r0
 800091e:	460e      	mov	r6, r1
 8000920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000922:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000926:	ac17      	add	r4, sp, #92	; 0x5c
 8000928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000930:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000932:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000936:	f04f 35ff 	mov.w	r5, #4294967295
 800093a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800093e:	9516      	str	r5, [sp, #88]	; 0x58
 8000940:	e010      	b.n	8000964 <__gnu_Unwind_Backtrace+0x50>
 8000942:	a816      	add	r0, sp, #88	; 0x58
 8000944:	f7ff ffd8 	bl	80008f8 <_Unwind_SetGR>
 8000948:	4631      	mov	r1, r6
 800094a:	a816      	add	r0, sp, #88	; 0x58
 800094c:	47b8      	blx	r7
 800094e:	aa16      	add	r2, sp, #88	; 0x58
 8000950:	4669      	mov	r1, sp
 8000952:	b978      	cbnz	r0, 8000974 <__gnu_Unwind_Backtrace+0x60>
 8000954:	9b04      	ldr	r3, [sp, #16]
 8000956:	2008      	movs	r0, #8
 8000958:	4798      	blx	r3
 800095a:	2805      	cmp	r0, #5
 800095c:	4604      	mov	r4, r0
 800095e:	d00a      	beq.n	8000976 <__gnu_Unwind_Backtrace+0x62>
 8000960:	2809      	cmp	r0, #9
 8000962:	d007      	beq.n	8000974 <__gnu_Unwind_Backtrace+0x60>
 8000964:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000966:	4668      	mov	r0, sp
 8000968:	f7ff fe06 	bl	8000578 <get_eit_entry>
 800096c:	466a      	mov	r2, sp
 800096e:	210c      	movs	r1, #12
 8000970:	2800      	cmp	r0, #0
 8000972:	d0e6      	beq.n	8000942 <__gnu_Unwind_Backtrace+0x2e>
 8000974:	2409      	movs	r4, #9
 8000976:	a816      	add	r0, sp, #88	; 0x58
 8000978:	f7ff fe4e 	bl	8000618 <restore_non_core_regs>
 800097c:	4620      	mov	r0, r4
 800097e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000982:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000984 <__gnu_unwind_pr_common>:
 8000984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000988:	460d      	mov	r5, r1
 800098a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800098c:	b08b      	sub	sp, #44	; 0x2c
 800098e:	1d0c      	adds	r4, r1, #4
 8000990:	6809      	ldr	r1, [r1, #0]
 8000992:	9107      	str	r1, [sp, #28]
 8000994:	4691      	mov	r9, r2
 8000996:	9408      	str	r4, [sp, #32]
 8000998:	f000 0b03 	and.w	fp, r0, #3
 800099c:	461e      	mov	r6, r3
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d160      	bne.n	8000a64 <__gnu_unwind_pr_common+0xe0>
 80009a2:	0209      	lsls	r1, r1, #8
 80009a4:	2303      	movs	r3, #3
 80009a6:	9107      	str	r1, [sp, #28]
 80009a8:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 80009ac:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80009b0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80009b2:	f1bb 0f02 	cmp.w	fp, #2
 80009b6:	bf08      	it	eq
 80009b8:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 80009ba:	f013 0301 	ands.w	r3, r3, #1
 80009be:	d140      	bne.n	8000a42 <__gnu_unwind_pr_common+0xbe>
 80009c0:	9301      	str	r3, [sp, #4]
 80009c2:	f000 0308 	and.w	r3, r0, #8
 80009c6:	9303      	str	r3, [sp, #12]
 80009c8:	f8d4 8000 	ldr.w	r8, [r4]
 80009cc:	f1b8 0f00 	cmp.w	r8, #0
 80009d0:	d039      	beq.n	8000a46 <__gnu_unwind_pr_common+0xc2>
 80009d2:	2e02      	cmp	r6, #2
 80009d4:	d043      	beq.n	8000a5e <__gnu_unwind_pr_common+0xda>
 80009d6:	f8b4 8000 	ldrh.w	r8, [r4]
 80009da:	8867      	ldrh	r7, [r4, #2]
 80009dc:	3404      	adds	r4, #4
 80009de:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80009e0:	f027 0a01 	bic.w	sl, r7, #1
 80009e4:	210f      	movs	r1, #15
 80009e6:	4648      	mov	r0, r9
 80009e8:	449a      	add	sl, r3
 80009ea:	f7ff ff5f 	bl	80008ac <_Unwind_GetGR>
 80009ee:	4582      	cmp	sl, r0
 80009f0:	d833      	bhi.n	8000a5a <__gnu_unwind_pr_common+0xd6>
 80009f2:	f028 0301 	bic.w	r3, r8, #1
 80009f6:	449a      	add	sl, r3
 80009f8:	4550      	cmp	r0, sl
 80009fa:	bf2c      	ite	cs
 80009fc:	2000      	movcs	r0, #0
 80009fe:	2001      	movcc	r0, #1
 8000a00:	007f      	lsls	r7, r7, #1
 8000a02:	f007 0702 	and.w	r7, r7, #2
 8000a06:	f008 0801 	and.w	r8, r8, #1
 8000a0a:	ea47 0708 	orr.w	r7, r7, r8
 8000a0e:	2f01      	cmp	r7, #1
 8000a10:	d03e      	beq.n	8000a90 <__gnu_unwind_pr_common+0x10c>
 8000a12:	d335      	bcc.n	8000a80 <__gnu_unwind_pr_common+0xfc>
 8000a14:	2f02      	cmp	r7, #2
 8000a16:	d11c      	bne.n	8000a52 <__gnu_unwind_pr_common+0xce>
 8000a18:	6823      	ldr	r3, [r4, #0]
 8000a1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000a1e:	9202      	str	r2, [sp, #8]
 8000a20:	f1bb 0f00 	cmp.w	fp, #0
 8000a24:	d176      	bne.n	8000b14 <__gnu_unwind_pr_common+0x190>
 8000a26:	b128      	cbz	r0, 8000a34 <__gnu_unwind_pr_common+0xb0>
 8000a28:	9903      	ldr	r1, [sp, #12]
 8000a2a:	2900      	cmp	r1, #0
 8000a2c:	d07e      	beq.n	8000b2c <__gnu_unwind_pr_common+0x1a8>
 8000a2e:	2a00      	cmp	r2, #0
 8000a30:	f000 80a6 	beq.w	8000b80 <__gnu_unwind_pr_common+0x1fc>
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	db77      	blt.n	8000b28 <__gnu_unwind_pr_common+0x1a4>
 8000a38:	9b02      	ldr	r3, [sp, #8]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000a40:	e7c2      	b.n	80009c8 <__gnu_unwind_pr_common+0x44>
 8000a42:	2300      	movs	r3, #0
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	2e02      	cmp	r6, #2
 8000a48:	dd3e      	ble.n	8000ac8 <__gnu_unwind_pr_common+0x144>
 8000a4a:	f7ff fe17 	bl	800067c <__gnu_unwind_24bit.isra.1>
 8000a4e:	2800      	cmp	r0, #0
 8000a50:	d040      	beq.n	8000ad4 <__gnu_unwind_pr_common+0x150>
 8000a52:	2009      	movs	r0, #9
 8000a54:	b00b      	add	sp, #44	; 0x2c
 8000a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	e7d0      	b.n	8000a00 <__gnu_unwind_pr_common+0x7c>
 8000a5e:	6867      	ldr	r7, [r4, #4]
 8000a60:	3408      	adds	r4, #8
 8000a62:	e7bc      	b.n	80009de <__gnu_unwind_pr_common+0x5a>
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	dca3      	bgt.n	80009b0 <__gnu_unwind_pr_common+0x2c>
 8000a68:	0c0b      	lsrs	r3, r1, #16
 8000a6a:	b2da      	uxtb	r2, r3
 8000a6c:	0409      	lsls	r1, r1, #16
 8000a6e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000a72:	2302      	movs	r3, #2
 8000a74:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000a78:	9107      	str	r1, [sp, #28]
 8000a7a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a7e:	e797      	b.n	80009b0 <__gnu_unwind_pr_common+0x2c>
 8000a80:	f1bb 0f00 	cmp.w	fp, #0
 8000a84:	d002      	beq.n	8000a8c <__gnu_unwind_pr_common+0x108>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	f040 80bd 	bne.w	8000c06 <__gnu_unwind_pr_common+0x282>
 8000a8c:	3404      	adds	r4, #4
 8000a8e:	e79b      	b.n	80009c8 <__gnu_unwind_pr_common+0x44>
 8000a90:	f1bb 0f00 	cmp.w	fp, #0
 8000a94:	d125      	bne.n	8000ae2 <__gnu_unwind_pr_common+0x15e>
 8000a96:	b1a8      	cbz	r0, 8000ac4 <__gnu_unwind_pr_common+0x140>
 8000a98:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000a9c:	1c99      	adds	r1, r3, #2
 8000a9e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000aa2:	d0d6      	beq.n	8000a52 <__gnu_unwind_pr_common+0xce>
 8000aa4:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	9106      	str	r1, [sp, #24]
 8000aac:	f000 80a3 	beq.w	8000bf6 <__gnu_unwind_pr_common+0x272>
 8000ab0:	1d20      	adds	r0, r4, #4
 8000ab2:	f7ff fddd 	bl	8000670 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000ab6:	ab06      	add	r3, sp, #24
 8000ab8:	4601      	mov	r1, r0
 8000aba:	4628      	mov	r0, r5
 8000abc:	f3af 8000 	nop.w
 8000ac0:	2800      	cmp	r0, #0
 8000ac2:	d177      	bne.n	8000bb4 <__gnu_unwind_pr_common+0x230>
 8000ac4:	3408      	adds	r4, #8
 8000ac6:	e77f      	b.n	80009c8 <__gnu_unwind_pr_common+0x44>
 8000ac8:	a907      	add	r1, sp, #28
 8000aca:	4648      	mov	r0, r9
 8000acc:	f000 faee 	bl	80010ac <__gnu_unwind_execute>
 8000ad0:	2800      	cmp	r0, #0
 8000ad2:	d1be      	bne.n	8000a52 <__gnu_unwind_pr_common+0xce>
 8000ad4:	9b01      	ldr	r3, [sp, #4]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d15c      	bne.n	8000b94 <__gnu_unwind_pr_common+0x210>
 8000ada:	2008      	movs	r0, #8
 8000adc:	b00b      	add	sp, #44	; 0x2c
 8000ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ae2:	210d      	movs	r1, #13
 8000ae4:	4648      	mov	r0, r9
 8000ae6:	6a2f      	ldr	r7, [r5, #32]
 8000ae8:	f7ff fee0 	bl	80008ac <_Unwind_GetGR>
 8000aec:	4287      	cmp	r7, r0
 8000aee:	d1e9      	bne.n	8000ac4 <__gnu_unwind_pr_common+0x140>
 8000af0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000af2:	429c      	cmp	r4, r3
 8000af4:	d1e6      	bne.n	8000ac4 <__gnu_unwind_pr_common+0x140>
 8000af6:	4620      	mov	r0, r4
 8000af8:	f7ff fcf0 	bl	80004dc <selfrel_offset31>
 8000afc:	210f      	movs	r1, #15
 8000afe:	4602      	mov	r2, r0
 8000b00:	4648      	mov	r0, r9
 8000b02:	f7ff fef9 	bl	80008f8 <_Unwind_SetGR>
 8000b06:	4648      	mov	r0, r9
 8000b08:	462a      	mov	r2, r5
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	f7ff fef4 	bl	80008f8 <_Unwind_SetGR>
 8000b10:	2007      	movs	r0, #7
 8000b12:	e79f      	b.n	8000a54 <__gnu_unwind_pr_common+0xd0>
 8000b14:	210d      	movs	r1, #13
 8000b16:	4648      	mov	r0, r9
 8000b18:	6a2f      	ldr	r7, [r5, #32]
 8000b1a:	f7ff fec7 	bl	80008ac <_Unwind_GetGR>
 8000b1e:	4287      	cmp	r7, r0
 8000b20:	d058      	beq.n	8000bd4 <__gnu_unwind_pr_common+0x250>
 8000b22:	6823      	ldr	r3, [r4, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	da87      	bge.n	8000a38 <__gnu_unwind_pr_common+0xb4>
 8000b28:	3404      	adds	r4, #4
 8000b2a:	e785      	b.n	8000a38 <__gnu_unwind_pr_common+0xb4>
 8000b2c:	9b02      	ldr	r3, [sp, #8]
 8000b2e:	b33b      	cbz	r3, 8000b80 <__gnu_unwind_pr_common+0x1fc>
 8000b30:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000b34:	1d27      	adds	r7, r4, #4
 8000b36:	f8cd b010 	str.w	fp, [sp, #16]
 8000b3a:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000b3e:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000b42:	9605      	str	r6, [sp, #20]
 8000b44:	46a3      	mov	fp, r4
 8000b46:	461c      	mov	r4, r3
 8000b48:	e002      	b.n	8000b50 <__gnu_unwind_pr_common+0x1cc>
 8000b4a:	45b2      	cmp	sl, r6
 8000b4c:	46b0      	mov	r8, r6
 8000b4e:	d016      	beq.n	8000b7e <__gnu_unwind_pr_common+0x1fa>
 8000b50:	4638      	mov	r0, r7
 8000b52:	9406      	str	r4, [sp, #24]
 8000b54:	f7ff fd8c 	bl	8000670 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b58:	ab06      	add	r3, sp, #24
 8000b5a:	4601      	mov	r1, r0
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4628      	mov	r0, r5
 8000b60:	f3af 8000 	nop.w
 8000b64:	f108 0601 	add.w	r6, r8, #1
 8000b68:	3704      	adds	r7, #4
 8000b6a:	2800      	cmp	r0, #0
 8000b6c:	d0ed      	beq.n	8000b4a <__gnu_unwind_pr_common+0x1c6>
 8000b6e:	9b02      	ldr	r3, [sp, #8]
 8000b70:	9e05      	ldr	r6, [sp, #20]
 8000b72:	4543      	cmp	r3, r8
 8000b74:	465c      	mov	r4, fp
 8000b76:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000b7a:	d1d2      	bne.n	8000b22 <__gnu_unwind_pr_common+0x19e>
 8000b7c:	e000      	b.n	8000b80 <__gnu_unwind_pr_common+0x1fc>
 8000b7e:	465c      	mov	r4, fp
 8000b80:	4648      	mov	r0, r9
 8000b82:	210d      	movs	r1, #13
 8000b84:	f7ff fe92 	bl	80008ac <_Unwind_GetGR>
 8000b88:	9b06      	ldr	r3, [sp, #24]
 8000b8a:	6228      	str	r0, [r5, #32]
 8000b8c:	62ac      	str	r4, [r5, #40]	; 0x28
 8000b8e:	626b      	str	r3, [r5, #36]	; 0x24
 8000b90:	2006      	movs	r0, #6
 8000b92:	e75f      	b.n	8000a54 <__gnu_unwind_pr_common+0xd0>
 8000b94:	210f      	movs	r1, #15
 8000b96:	4648      	mov	r0, r9
 8000b98:	f7ff fe88 	bl	80008ac <_Unwind_GetGR>
 8000b9c:	210e      	movs	r1, #14
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	4648      	mov	r0, r9
 8000ba2:	f7ff fea9 	bl	80008f8 <_Unwind_SetGR>
 8000ba6:	4648      	mov	r0, r9
 8000ba8:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <__gnu_unwind_pr_common+0x2cc>)
 8000baa:	210f      	movs	r1, #15
 8000bac:	f7ff fea4 	bl	80008f8 <_Unwind_SetGR>
 8000bb0:	2007      	movs	r0, #7
 8000bb2:	e74f      	b.n	8000a54 <__gnu_unwind_pr_common+0xd0>
 8000bb4:	4607      	mov	r7, r0
 8000bb6:	210d      	movs	r1, #13
 8000bb8:	4648      	mov	r0, r9
 8000bba:	f7ff fe77 	bl	80008ac <_Unwind_GetGR>
 8000bbe:	2f02      	cmp	r7, #2
 8000bc0:	6228      	str	r0, [r5, #32]
 8000bc2:	d11d      	bne.n	8000c00 <__gnu_unwind_pr_common+0x27c>
 8000bc4:	462b      	mov	r3, r5
 8000bc6:	9a06      	ldr	r2, [sp, #24]
 8000bc8:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000bcc:	626b      	str	r3, [r5, #36]	; 0x24
 8000bce:	62ac      	str	r4, [r5, #40]	; 0x28
 8000bd0:	2006      	movs	r0, #6
 8000bd2:	e73f      	b.n	8000a54 <__gnu_unwind_pr_common+0xd0>
 8000bd4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bd6:	429c      	cmp	r4, r3
 8000bd8:	d1a3      	bne.n	8000b22 <__gnu_unwind_pr_common+0x19e>
 8000bda:	2204      	movs	r2, #4
 8000bdc:	2700      	movs	r7, #0
 8000bde:	18a3      	adds	r3, r4, r2
 8000be0:	9902      	ldr	r1, [sp, #8]
 8000be2:	62a9      	str	r1, [r5, #40]	; 0x28
 8000be4:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000be6:	632a      	str	r2, [r5, #48]	; 0x30
 8000be8:	636b      	str	r3, [r5, #52]	; 0x34
 8000bea:	6823      	ldr	r3, [r4, #0]
 8000bec:	42bb      	cmp	r3, r7
 8000bee:	db1d      	blt.n	8000c2c <__gnu_unwind_pr_common+0x2a8>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	e720      	b.n	8000a38 <__gnu_unwind_pr_common+0xb4>
 8000bf6:	4648      	mov	r0, r9
 8000bf8:	210d      	movs	r1, #13
 8000bfa:	f7ff fe57 	bl	80008ac <_Unwind_GetGR>
 8000bfe:	6228      	str	r0, [r5, #32]
 8000c00:	9b06      	ldr	r3, [sp, #24]
 8000c02:	626b      	str	r3, [r5, #36]	; 0x24
 8000c04:	e7e3      	b.n	8000bce <__gnu_unwind_pr_common+0x24a>
 8000c06:	4620      	mov	r0, r4
 8000c08:	f7ff fc68 	bl	80004dc <selfrel_offset31>
 8000c0c:	3404      	adds	r4, #4
 8000c0e:	4606      	mov	r6, r0
 8000c10:	63ac      	str	r4, [r5, #56]	; 0x38
 8000c12:	4628      	mov	r0, r5
 8000c14:	f3af 8000 	nop.w
 8000c18:	2800      	cmp	r0, #0
 8000c1a:	f43f af1a 	beq.w	8000a52 <__gnu_unwind_pr_common+0xce>
 8000c1e:	4648      	mov	r0, r9
 8000c20:	4632      	mov	r2, r6
 8000c22:	210f      	movs	r1, #15
 8000c24:	f7ff fe68 	bl	80008f8 <_Unwind_SetGR>
 8000c28:	2007      	movs	r0, #7
 8000c2a:	e713      	b.n	8000a54 <__gnu_unwind_pr_common+0xd0>
 8000c2c:	4608      	mov	r0, r1
 8000c2e:	3001      	adds	r0, #1
 8000c30:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000c34:	f7ff fc52 	bl	80004dc <selfrel_offset31>
 8000c38:	210f      	movs	r1, #15
 8000c3a:	4602      	mov	r2, r0
 8000c3c:	4648      	mov	r0, r9
 8000c3e:	f7ff fe5b 	bl	80008f8 <_Unwind_SetGR>
 8000c42:	4648      	mov	r0, r9
 8000c44:	462a      	mov	r2, r5
 8000c46:	4639      	mov	r1, r7
 8000c48:	f7ff fe56 	bl	80008f8 <_Unwind_SetGR>
 8000c4c:	2007      	movs	r0, #7
 8000c4e:	e701      	b.n	8000a54 <__gnu_unwind_pr_common+0xd0>
 8000c50:	00000000 	.word	0x00000000

08000c54 <__aeabi_unwind_cpp_pr0>:
 8000c54:	2300      	movs	r3, #0
 8000c56:	e695      	b.n	8000984 <__gnu_unwind_pr_common>

08000c58 <__aeabi_unwind_cpp_pr1>:
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e693      	b.n	8000984 <__gnu_unwind_pr_common>

08000c5c <__aeabi_unwind_cpp_pr2>:
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	e691      	b.n	8000984 <__gnu_unwind_pr_common>

08000c60 <_Unwind_VRS_Pop>:
 8000c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c62:	4604      	mov	r4, r0
 8000c64:	b0c5      	sub	sp, #276	; 0x114
 8000c66:	2904      	cmp	r1, #4
 8000c68:	d80d      	bhi.n	8000c86 <_Unwind_VRS_Pop+0x26>
 8000c6a:	e8df f001 	tbb	[pc, r1]
 8000c6e:	0353      	.short	0x0353
 8000c70:	310c      	.short	0x310c
 8000c72:	0f          	.byte	0x0f
 8000c73:	00          	.byte	0x00
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000c7a:	b295      	uxth	r5, r2
 8000c7c:	d162      	bne.n	8000d44 <_Unwind_VRS_Pop+0xe4>
 8000c7e:	1972      	adds	r2, r6, r5
 8000c80:	2a10      	cmp	r2, #16
 8000c82:	f240 809b 	bls.w	8000dbc <_Unwind_VRS_Pop+0x15c>
 8000c86:	2002      	movs	r0, #2
 8000c88:	b045      	add	sp, #276	; 0x114
 8000c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d1fa      	bne.n	8000c86 <_Unwind_VRS_Pop+0x26>
 8000c90:	2a10      	cmp	r2, #16
 8000c92:	d8f8      	bhi.n	8000c86 <_Unwind_VRS_Pop+0x26>
 8000c94:	6823      	ldr	r3, [r4, #0]
 8000c96:	06d8      	lsls	r0, r3, #27
 8000c98:	f100 80c6 	bmi.w	8000e28 <_Unwind_VRS_Pop+0x1c8>
 8000c9c:	ae22      	add	r6, sp, #136	; 0x88
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	9201      	str	r2, [sp, #4]
 8000ca2:	f000 f973 	bl	8000f8c <__gnu_Unwind_Save_WMMXC>
 8000ca6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000ca8:	9a01      	ldr	r2, [sp, #4]
 8000caa:	2300      	movs	r3, #0
 8000cac:	2501      	movs	r5, #1
 8000cae:	fa05 f103 	lsl.w	r1, r5, r3
 8000cb2:	4211      	tst	r1, r2
 8000cb4:	d003      	beq.n	8000cbe <_Unwind_VRS_Pop+0x5e>
 8000cb6:	6801      	ldr	r1, [r0, #0]
 8000cb8:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000cbc:	3004      	adds	r0, #4
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	d1f4      	bne.n	8000cae <_Unwind_VRS_Pop+0x4e>
 8000cc4:	63a0      	str	r0, [r4, #56]	; 0x38
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	f000 f956 	bl	8000f78 <__gnu_Unwind_Restore_WMMXC>
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e7db      	b.n	8000c88 <_Unwind_VRS_Pop+0x28>
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d1d8      	bne.n	8000c86 <_Unwind_VRS_Pop+0x26>
 8000cd4:	0c15      	lsrs	r5, r2, #16
 8000cd6:	b297      	uxth	r7, r2
 8000cd8:	19eb      	adds	r3, r5, r7
 8000cda:	2b10      	cmp	r3, #16
 8000cdc:	d8d3      	bhi.n	8000c86 <_Unwind_VRS_Pop+0x26>
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	071e      	lsls	r6, r3, #28
 8000ce2:	f100 80b5 	bmi.w	8000e50 <_Unwind_VRS_Pop+0x1f0>
 8000ce6:	ae22      	add	r6, sp, #136	; 0x88
 8000ce8:	4630      	mov	r0, r6
 8000cea:	f000 f923 	bl	8000f34 <__gnu_Unwind_Save_WMMXD>
 8000cee:	00ed      	lsls	r5, r5, #3
 8000cf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000cf2:	b14f      	cbz	r7, 8000d08 <_Unwind_VRS_Pop+0xa8>
 8000cf4:	3d04      	subs	r5, #4
 8000cf6:	1971      	adds	r1, r6, r5
 8000cf8:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000cfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8000d00:	f841 2f04 	str.w	r2, [r1, #4]!
 8000d04:	4283      	cmp	r3, r0
 8000d06:	d1f9      	bne.n	8000cfc <_Unwind_VRS_Pop+0x9c>
 8000d08:	4630      	mov	r0, r6
 8000d0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8000d0c:	f000 f8f0 	bl	8000ef0 <__gnu_Unwind_Restore_WMMXD>
 8000d10:	2000      	movs	r0, #0
 8000d12:	e7b9      	b.n	8000c88 <_Unwind_VRS_Pop+0x28>
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d1b6      	bne.n	8000c86 <_Unwind_VRS_Pop+0x26>
 8000d18:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000d1a:	b297      	uxth	r7, r2
 8000d1c:	1d20      	adds	r0, r4, #4
 8000d1e:	2601      	movs	r6, #1
 8000d20:	fa06 f103 	lsl.w	r1, r6, r3
 8000d24:	4239      	tst	r1, r7
 8000d26:	f103 0301 	add.w	r3, r3, #1
 8000d2a:	d002      	beq.n	8000d32 <_Unwind_VRS_Pop+0xd2>
 8000d2c:	6829      	ldr	r1, [r5, #0]
 8000d2e:	6001      	str	r1, [r0, #0]
 8000d30:	3504      	adds	r5, #4
 8000d32:	2b10      	cmp	r3, #16
 8000d34:	f100 0004 	add.w	r0, r0, #4
 8000d38:	d1f2      	bne.n	8000d20 <_Unwind_VRS_Pop+0xc0>
 8000d3a:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000d3e:	d13b      	bne.n	8000db8 <_Unwind_VRS_Pop+0x158>
 8000d40:	63a5      	str	r5, [r4, #56]	; 0x38
 8000d42:	e7a1      	b.n	8000c88 <_Unwind_VRS_Pop+0x28>
 8000d44:	2b05      	cmp	r3, #5
 8000d46:	d19e      	bne.n	8000c86 <_Unwind_VRS_Pop+0x26>
 8000d48:	1977      	adds	r7, r6, r5
 8000d4a:	2f20      	cmp	r7, #32
 8000d4c:	d89b      	bhi.n	8000c86 <_Unwind_VRS_Pop+0x26>
 8000d4e:	2e0f      	cmp	r6, #15
 8000d50:	d966      	bls.n	8000e20 <_Unwind_VRS_Pop+0x1c0>
 8000d52:	462f      	mov	r7, r5
 8000d54:	2d00      	cmp	r5, #0
 8000d56:	d13a      	bne.n	8000dce <_Unwind_VRS_Pop+0x16e>
 8000d58:	462a      	mov	r2, r5
 8000d5a:	2700      	movs	r7, #0
 8000d5c:	2a00      	cmp	r2, #0
 8000d5e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d60:	dd72      	ble.n	8000e48 <_Unwind_VRS_Pop+0x1e8>
 8000d62:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000d66:	4601      	mov	r1, r0
 8000d68:	a844      	add	r0, sp, #272	; 0x110
 8000d6a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000d6e:	388c      	subs	r0, #140	; 0x8c
 8000d70:	f851 5b04 	ldr.w	r5, [r1], #4
 8000d74:	f840 5f04 	str.w	r5, [r0, #4]!
 8000d78:	4291      	cmp	r1, r2
 8000d7a:	d1f9      	bne.n	8000d70 <_Unwind_VRS_Pop+0x110>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	b197      	cbz	r7, 8000da6 <_Unwind_VRS_Pop+0x146>
 8000d80:	2e10      	cmp	r6, #16
 8000d82:	4632      	mov	r2, r6
 8000d84:	a944      	add	r1, sp, #272	; 0x110
 8000d86:	bf38      	it	cc
 8000d88:	2210      	movcc	r2, #16
 8000d8a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000d8e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000d92:	0079      	lsls	r1, r7, #1
 8000d94:	3a04      	subs	r2, #4
 8000d96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000d9a:	f850 5b04 	ldr.w	r5, [r0], #4
 8000d9e:	f842 5f04 	str.w	r5, [r2, #4]!
 8000da2:	4288      	cmp	r0, r1
 8000da4:	d1f9      	bne.n	8000d9a <_Unwind_VRS_Pop+0x13a>
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d048      	beq.n	8000e3c <_Unwind_VRS_Pop+0x1dc>
 8000daa:	2e0f      	cmp	r6, #15
 8000dac:	63a1      	str	r1, [r4, #56]	; 0x38
 8000dae:	d933      	bls.n	8000e18 <_Unwind_VRS_Pop+0x1b8>
 8000db0:	b117      	cbz	r7, 8000db8 <_Unwind_VRS_Pop+0x158>
 8000db2:	a802      	add	r0, sp, #8
 8000db4:	f000 f894 	bl	8000ee0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000db8:	2000      	movs	r0, #0
 8000dba:	e765      	b.n	8000c88 <_Unwind_VRS_Pop+0x28>
 8000dbc:	2e0f      	cmp	r6, #15
 8000dbe:	f63f af62 	bhi.w	8000c86 <_Unwind_VRS_Pop+0x26>
 8000dc2:	2700      	movs	r7, #0
 8000dc4:	6822      	ldr	r2, [r4, #0]
 8000dc6:	07d1      	lsls	r1, r2, #31
 8000dc8:	d417      	bmi.n	8000dfa <_Unwind_VRS_Pop+0x19a>
 8000dca:	2f00      	cmp	r7, #0
 8000dcc:	d060      	beq.n	8000e90 <_Unwind_VRS_Pop+0x230>
 8000dce:	6822      	ldr	r2, [r4, #0]
 8000dd0:	0751      	lsls	r1, r2, #29
 8000dd2:	d445      	bmi.n	8000e60 <_Unwind_VRS_Pop+0x200>
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d04d      	beq.n	8000e74 <_Unwind_VRS_Pop+0x214>
 8000dd8:	2e0f      	cmp	r6, #15
 8000dda:	d806      	bhi.n	8000dea <_Unwind_VRS_Pop+0x18a>
 8000ddc:	a822      	add	r0, sp, #136	; 0x88
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	f000 f87a 	bl	8000ed8 <__gnu_Unwind_Save_VFP_D>
 8000de4:	9b01      	ldr	r3, [sp, #4]
 8000de6:	2f00      	cmp	r7, #0
 8000de8:	d0b6      	beq.n	8000d58 <_Unwind_VRS_Pop+0xf8>
 8000dea:	a802      	add	r0, sp, #8
 8000dec:	9301      	str	r3, [sp, #4]
 8000dee:	f000 f87b 	bl	8000ee8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000df2:	9b01      	ldr	r3, [sp, #4]
 8000df4:	f1c6 0210 	rsb	r2, r6, #16
 8000df8:	e7b0      	b.n	8000d5c <_Unwind_VRS_Pop+0xfc>
 8000dfa:	f022 0101 	bic.w	r1, r2, #1
 8000dfe:	2b05      	cmp	r3, #5
 8000e00:	6021      	str	r1, [r4, #0]
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	4620      	mov	r0, r4
 8000e06:	d03b      	beq.n	8000e80 <_Unwind_VRS_Pop+0x220>
 8000e08:	f022 0203 	bic.w	r2, r2, #3
 8000e0c:	f840 2b48 	str.w	r2, [r0], #72
 8000e10:	f000 f85a 	bl	8000ec8 <__gnu_Unwind_Save_VFP>
 8000e14:	9b01      	ldr	r3, [sp, #4]
 8000e16:	e7d8      	b.n	8000dca <_Unwind_VRS_Pop+0x16a>
 8000e18:	a822      	add	r0, sp, #136	; 0x88
 8000e1a:	f000 f859 	bl	8000ed0 <__gnu_Unwind_Restore_VFP_D>
 8000e1e:	e7c7      	b.n	8000db0 <_Unwind_VRS_Pop+0x150>
 8000e20:	2f10      	cmp	r7, #16
 8000e22:	d9ce      	bls.n	8000dc2 <_Unwind_VRS_Pop+0x162>
 8000e24:	3f10      	subs	r7, #16
 8000e26:	e7cd      	b.n	8000dc4 <_Unwind_VRS_Pop+0x164>
 8000e28:	f023 0310 	bic.w	r3, r3, #16
 8000e2c:	6023      	str	r3, [r4, #0]
 8000e2e:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000e32:	9201      	str	r2, [sp, #4]
 8000e34:	f000 f8aa 	bl	8000f8c <__gnu_Unwind_Save_WMMXC>
 8000e38:	9a01      	ldr	r2, [sp, #4]
 8000e3a:	e72f      	b.n	8000c9c <_Unwind_VRS_Pop+0x3c>
 8000e3c:	3104      	adds	r1, #4
 8000e3e:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e40:	a822      	add	r0, sp, #136	; 0x88
 8000e42:	f000 f83d 	bl	8000ec0 <__gnu_Unwind_Restore_VFP>
 8000e46:	e7b7      	b.n	8000db8 <_Unwind_VRS_Pop+0x158>
 8000e48:	2f00      	cmp	r7, #0
 8000e4a:	d199      	bne.n	8000d80 <_Unwind_VRS_Pop+0x120>
 8000e4c:	4601      	mov	r1, r0
 8000e4e:	e7aa      	b.n	8000da6 <_Unwind_VRS_Pop+0x146>
 8000e50:	f023 0308 	bic.w	r3, r3, #8
 8000e54:	6023      	str	r3, [r4, #0]
 8000e56:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000e5a:	f000 f86b 	bl	8000f34 <__gnu_Unwind_Save_WMMXD>
 8000e5e:	e742      	b.n	8000ce6 <_Unwind_VRS_Pop+0x86>
 8000e60:	4620      	mov	r0, r4
 8000e62:	f022 0204 	bic.w	r2, r2, #4
 8000e66:	f840 2bd0 	str.w	r2, [r0], #208
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	f000 f83c 	bl	8000ee8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e70:	9b01      	ldr	r3, [sp, #4]
 8000e72:	e7af      	b.n	8000dd4 <_Unwind_VRS_Pop+0x174>
 8000e74:	a822      	add	r0, sp, #136	; 0x88
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	f000 f826 	bl	8000ec8 <__gnu_Unwind_Save_VFP>
 8000e7c:	9b01      	ldr	r3, [sp, #4]
 8000e7e:	e7b9      	b.n	8000df4 <_Unwind_VRS_Pop+0x194>
 8000e80:	f041 0102 	orr.w	r1, r1, #2
 8000e84:	f840 1b48 	str.w	r1, [r0], #72
 8000e88:	f000 f826 	bl	8000ed8 <__gnu_Unwind_Save_VFP_D>
 8000e8c:	9b01      	ldr	r3, [sp, #4]
 8000e8e:	e79c      	b.n	8000dca <_Unwind_VRS_Pop+0x16a>
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d003      	beq.n	8000e9c <_Unwind_VRS_Pop+0x23c>
 8000e94:	2e0f      	cmp	r6, #15
 8000e96:	f63f af5f 	bhi.w	8000d58 <_Unwind_VRS_Pop+0xf8>
 8000e9a:	e79f      	b.n	8000ddc <_Unwind_VRS_Pop+0x17c>
 8000e9c:	a822      	add	r0, sp, #136	; 0x88
 8000e9e:	9301      	str	r3, [sp, #4]
 8000ea0:	f000 f812 	bl	8000ec8 <__gnu_Unwind_Save_VFP>
 8000ea4:	9b01      	ldr	r3, [sp, #4]
 8000ea6:	e757      	b.n	8000d58 <_Unwind_VRS_Pop+0xf8>

08000ea8 <__restore_core_regs>:
 8000ea8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000eac:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000eb0:	469c      	mov	ip, r3
 8000eb2:	46a6      	mov	lr, r4
 8000eb4:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000eb8:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000ebc:	46e5      	mov	sp, ip
 8000ebe:	bd00      	pop	{pc}

08000ec0 <__gnu_Unwind_Restore_VFP>:
 8000ec0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <__gnu_Unwind_Save_VFP>:
 8000ec8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <__gnu_Unwind_Restore_VFP_D>:
 8000ed0:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <__gnu_Unwind_Save_VFP_D>:
 8000ed8:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop

08000ee0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000ee0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000ee8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <__gnu_Unwind_Restore_WMMXD>:
 8000ef0:	ecf0 0102 	ldfe	f0, [r0], #8
 8000ef4:	ecf0 1102 	ldfe	f1, [r0], #8
 8000ef8:	ecf0 2102 	ldfe	f2, [r0], #8
 8000efc:	ecf0 3102 	ldfe	f3, [r0], #8
 8000f00:	ecf0 4102 	ldfe	f4, [r0], #8
 8000f04:	ecf0 5102 	ldfe	f5, [r0], #8
 8000f08:	ecf0 6102 	ldfe	f6, [r0], #8
 8000f0c:	ecf0 7102 	ldfe	f7, [r0], #8
 8000f10:	ecf0 8102 	ldfp	f0, [r0], #8
 8000f14:	ecf0 9102 	ldfp	f1, [r0], #8
 8000f18:	ecf0 a102 	ldfp	f2, [r0], #8
 8000f1c:	ecf0 b102 	ldfp	f3, [r0], #8
 8000f20:	ecf0 c102 	ldfp	f4, [r0], #8
 8000f24:	ecf0 d102 	ldfp	f5, [r0], #8
 8000f28:	ecf0 e102 	ldfp	f6, [r0], #8
 8000f2c:	ecf0 f102 	ldfp	f7, [r0], #8
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <__gnu_Unwind_Save_WMMXD>:
 8000f34:	ece0 0102 	stfe	f0, [r0], #8
 8000f38:	ece0 1102 	stfe	f1, [r0], #8
 8000f3c:	ece0 2102 	stfe	f2, [r0], #8
 8000f40:	ece0 3102 	stfe	f3, [r0], #8
 8000f44:	ece0 4102 	stfe	f4, [r0], #8
 8000f48:	ece0 5102 	stfe	f5, [r0], #8
 8000f4c:	ece0 6102 	stfe	f6, [r0], #8
 8000f50:	ece0 7102 	stfe	f7, [r0], #8
 8000f54:	ece0 8102 	stfp	f0, [r0], #8
 8000f58:	ece0 9102 	stfp	f1, [r0], #8
 8000f5c:	ece0 a102 	stfp	f2, [r0], #8
 8000f60:	ece0 b102 	stfp	f3, [r0], #8
 8000f64:	ece0 c102 	stfp	f4, [r0], #8
 8000f68:	ece0 d102 	stfp	f5, [r0], #8
 8000f6c:	ece0 e102 	stfp	f6, [r0], #8
 8000f70:	ece0 f102 	stfp	f7, [r0], #8
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <__gnu_Unwind_Restore_WMMXC>:
 8000f78:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000f7c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000f80:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000f84:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__gnu_Unwind_Save_WMMXC>:
 8000f8c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000f90:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000f94:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000f98:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <_Unwind_RaiseException>:
 8000fa0:	46ec      	mov	ip, sp
 8000fa2:	b500      	push	{lr}
 8000fa4:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fa8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fb4:	a901      	add	r1, sp, #4
 8000fb6:	f7ff fbf3 	bl	80007a0 <__gnu_Unwind_RaiseException>
 8000fba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000fbe:	b012      	add	sp, #72	; 0x48
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <_Unwind_Resume>:
 8000fc4:	46ec      	mov	ip, sp
 8000fc6:	b500      	push	{lr}
 8000fc8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000fcc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000fd0:	f04f 0300 	mov.w	r3, #0
 8000fd4:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000fd8:	a901      	add	r1, sp, #4
 8000fda:	f7ff fc1b 	bl	8000814 <__gnu_Unwind_Resume>
 8000fde:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000fe2:	b012      	add	sp, #72	; 0x48
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <_Unwind_Resume_or_Rethrow>:
 8000fe8:	46ec      	mov	ip, sp
 8000fea:	b500      	push	{lr}
 8000fec:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000ff0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000ff4:	f04f 0300 	mov.w	r3, #0
 8000ff8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ffc:	a901      	add	r1, sp, #4
 8000ffe:	f7ff fc2b 	bl	8000858 <__gnu_Unwind_Resume_or_Rethrow>
 8001002:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001006:	b012      	add	sp, #72	; 0x48
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <_Unwind_ForcedUnwind>:
 800100c:	46ec      	mov	ip, sp
 800100e:	b500      	push	{lr}
 8001010:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001014:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001018:	f04f 0300 	mov.w	r3, #0
 800101c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001020:	ab01      	add	r3, sp, #4
 8001022:	f7ff fbed 	bl	8000800 <__gnu_Unwind_ForcedUnwind>
 8001026:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800102a:	b012      	add	sp, #72	; 0x48
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <_Unwind_Backtrace>:
 8001030:	46ec      	mov	ip, sp
 8001032:	b500      	push	{lr}
 8001034:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001038:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001044:	aa01      	add	r2, sp, #4
 8001046:	f7ff fc65 	bl	8000914 <__gnu_Unwind_Backtrace>
 800104a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800104e:	b012      	add	sp, #72	; 0x48
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <next_unwind_byte>:
 8001054:	7a02      	ldrb	r2, [r0, #8]
 8001056:	b91a      	cbnz	r2, 8001060 <next_unwind_byte+0xc>
 8001058:	7a43      	ldrb	r3, [r0, #9]
 800105a:	b943      	cbnz	r3, 800106e <next_unwind_byte+0x1a>
 800105c:	20b0      	movs	r0, #176	; 0xb0
 800105e:	4770      	bx	lr
 8001060:	6803      	ldr	r3, [r0, #0]
 8001062:	3a01      	subs	r2, #1
 8001064:	7202      	strb	r2, [r0, #8]
 8001066:	021a      	lsls	r2, r3, #8
 8001068:	6002      	str	r2, [r0, #0]
 800106a:	0e18      	lsrs	r0, r3, #24
 800106c:	4770      	bx	lr
 800106e:	6842      	ldr	r2, [r0, #4]
 8001070:	3b01      	subs	r3, #1
 8001072:	b410      	push	{r4}
 8001074:	7243      	strb	r3, [r0, #9]
 8001076:	6813      	ldr	r3, [r2, #0]
 8001078:	2103      	movs	r1, #3
 800107a:	1d14      	adds	r4, r2, #4
 800107c:	7201      	strb	r1, [r0, #8]
 800107e:	021a      	lsls	r2, r3, #8
 8001080:	6044      	str	r4, [r0, #4]
 8001082:	6002      	str	r2, [r0, #0]
 8001084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001088:	0e18      	lsrs	r0, r3, #24
 800108a:	4770      	bx	lr

0800108c <_Unwind_GetGR.constprop.0>:
 800108c:	b500      	push	{lr}
 800108e:	b085      	sub	sp, #20
 8001090:	aa03      	add	r2, sp, #12
 8001092:	2300      	movs	r3, #0
 8001094:	9200      	str	r2, [sp, #0]
 8001096:	4619      	mov	r1, r3
 8001098:	220c      	movs	r2, #12
 800109a:	f7ff fbed 	bl	8000878 <_Unwind_VRS_Get>
 800109e:	9803      	ldr	r0, [sp, #12]
 80010a0:	b005      	add	sp, #20
 80010a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80010a6:	bf00      	nop

080010a8 <unwind_UCB_from_context>:
 80010a8:	e7f0      	b.n	800108c <_Unwind_GetGR.constprop.0>
 80010aa:	bf00      	nop

080010ac <__gnu_unwind_execute>:
 80010ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80010b0:	4606      	mov	r6, r0
 80010b2:	b085      	sub	sp, #20
 80010b4:	460f      	mov	r7, r1
 80010b6:	f04f 0800 	mov.w	r8, #0
 80010ba:	4638      	mov	r0, r7
 80010bc:	f7ff ffca 	bl	8001054 <next_unwind_byte>
 80010c0:	28b0      	cmp	r0, #176	; 0xb0
 80010c2:	4604      	mov	r4, r0
 80010c4:	d023      	beq.n	800110e <__gnu_unwind_execute+0x62>
 80010c6:	0605      	lsls	r5, r0, #24
 80010c8:	d427      	bmi.n	800111a <__gnu_unwind_execute+0x6e>
 80010ca:	2300      	movs	r3, #0
 80010cc:	f10d 090c 	add.w	r9, sp, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	0085      	lsls	r5, r0, #2
 80010d4:	220d      	movs	r2, #13
 80010d6:	f8cd 9000 	str.w	r9, [sp]
 80010da:	4630      	mov	r0, r6
 80010dc:	f7ff fbcc 	bl	8000878 <_Unwind_VRS_Get>
 80010e0:	b2ed      	uxtb	r5, r5
 80010e2:	9b03      	ldr	r3, [sp, #12]
 80010e4:	f8cd 9000 	str.w	r9, [sp]
 80010e8:	0660      	lsls	r0, r4, #25
 80010ea:	f105 0504 	add.w	r5, r5, #4
 80010ee:	bf4c      	ite	mi
 80010f0:	1b5d      	submi	r5, r3, r5
 80010f2:	18ed      	addpl	r5, r5, r3
 80010f4:	2300      	movs	r3, #0
 80010f6:	4619      	mov	r1, r3
 80010f8:	220d      	movs	r2, #13
 80010fa:	4630      	mov	r0, r6
 80010fc:	9503      	str	r5, [sp, #12]
 80010fe:	f7ff fbe1 	bl	80008c4 <_Unwind_VRS_Set>
 8001102:	4638      	mov	r0, r7
 8001104:	f7ff ffa6 	bl	8001054 <next_unwind_byte>
 8001108:	28b0      	cmp	r0, #176	; 0xb0
 800110a:	4604      	mov	r4, r0
 800110c:	d1db      	bne.n	80010c6 <__gnu_unwind_execute+0x1a>
 800110e:	f1b8 0f00 	cmp.w	r8, #0
 8001112:	f000 8095 	beq.w	8001240 <__gnu_unwind_execute+0x194>
 8001116:	2000      	movs	r0, #0
 8001118:	e01c      	b.n	8001154 <__gnu_unwind_execute+0xa8>
 800111a:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 800111e:	2b80      	cmp	r3, #128	; 0x80
 8001120:	d05d      	beq.n	80011de <__gnu_unwind_execute+0x132>
 8001122:	2b90      	cmp	r3, #144	; 0x90
 8001124:	d019      	beq.n	800115a <__gnu_unwind_execute+0xae>
 8001126:	2ba0      	cmp	r3, #160	; 0xa0
 8001128:	d02c      	beq.n	8001184 <__gnu_unwind_execute+0xd8>
 800112a:	2bb0      	cmp	r3, #176	; 0xb0
 800112c:	d03f      	beq.n	80011ae <__gnu_unwind_execute+0x102>
 800112e:	2bc0      	cmp	r3, #192	; 0xc0
 8001130:	d06c      	beq.n	800120c <__gnu_unwind_execute+0x160>
 8001132:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001136:	2bd0      	cmp	r3, #208	; 0xd0
 8001138:	d10b      	bne.n	8001152 <__gnu_unwind_execute+0xa6>
 800113a:	f000 0207 	and.w	r2, r0, #7
 800113e:	3201      	adds	r2, #1
 8001140:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001144:	2305      	movs	r3, #5
 8001146:	2101      	movs	r1, #1
 8001148:	4630      	mov	r0, r6
 800114a:	f7ff fd89 	bl	8000c60 <_Unwind_VRS_Pop>
 800114e:	2800      	cmp	r0, #0
 8001150:	d0b3      	beq.n	80010ba <__gnu_unwind_execute+0xe>
 8001152:	2009      	movs	r0, #9
 8001154:	b005      	add	sp, #20
 8001156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800115a:	f000 030d 	and.w	r3, r0, #13
 800115e:	2b0d      	cmp	r3, #13
 8001160:	d0f7      	beq.n	8001152 <__gnu_unwind_execute+0xa6>
 8001162:	ad03      	add	r5, sp, #12
 8001164:	2300      	movs	r3, #0
 8001166:	f000 020f 	and.w	r2, r0, #15
 800116a:	4619      	mov	r1, r3
 800116c:	9500      	str	r5, [sp, #0]
 800116e:	4630      	mov	r0, r6
 8001170:	f7ff fb82 	bl	8000878 <_Unwind_VRS_Get>
 8001174:	2300      	movs	r3, #0
 8001176:	9500      	str	r5, [sp, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	220d      	movs	r2, #13
 800117c:	4630      	mov	r0, r6
 800117e:	f7ff fba1 	bl	80008c4 <_Unwind_VRS_Set>
 8001182:	e79a      	b.n	80010ba <__gnu_unwind_execute+0xe>
 8001184:	43c2      	mvns	r2, r0
 8001186:	f002 0307 	and.w	r3, r2, #7
 800118a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800118e:	411a      	asrs	r2, r3
 8001190:	0701      	lsls	r1, r0, #28
 8001192:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	bf48      	it	mi
 800119c:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 80011a0:	4619      	mov	r1, r3
 80011a2:	4630      	mov	r0, r6
 80011a4:	f7ff fd5c 	bl	8000c60 <_Unwind_VRS_Pop>
 80011a8:	2800      	cmp	r0, #0
 80011aa:	d1d2      	bne.n	8001152 <__gnu_unwind_execute+0xa6>
 80011ac:	e785      	b.n	80010ba <__gnu_unwind_execute+0xe>
 80011ae:	28b1      	cmp	r0, #177	; 0xb1
 80011b0:	d057      	beq.n	8001262 <__gnu_unwind_execute+0x1b6>
 80011b2:	28b2      	cmp	r0, #178	; 0xb2
 80011b4:	d068      	beq.n	8001288 <__gnu_unwind_execute+0x1dc>
 80011b6:	28b3      	cmp	r0, #179	; 0xb3
 80011b8:	f000 8095 	beq.w	80012e6 <__gnu_unwind_execute+0x23a>
 80011bc:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80011c0:	2bb4      	cmp	r3, #180	; 0xb4
 80011c2:	d0c6      	beq.n	8001152 <__gnu_unwind_execute+0xa6>
 80011c4:	f000 0207 	and.w	r2, r0, #7
 80011c8:	3201      	adds	r2, #1
 80011ca:	2301      	movs	r3, #1
 80011cc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011d0:	4619      	mov	r1, r3
 80011d2:	4630      	mov	r0, r6
 80011d4:	f7ff fd44 	bl	8000c60 <_Unwind_VRS_Pop>
 80011d8:	2800      	cmp	r0, #0
 80011da:	d1ba      	bne.n	8001152 <__gnu_unwind_execute+0xa6>
 80011dc:	e76d      	b.n	80010ba <__gnu_unwind_execute+0xe>
 80011de:	4638      	mov	r0, r7
 80011e0:	f7ff ff38 	bl	8001054 <next_unwind_byte>
 80011e4:	0224      	lsls	r4, r4, #8
 80011e6:	4304      	orrs	r4, r0
 80011e8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80011ec:	d0b1      	beq.n	8001152 <__gnu_unwind_execute+0xa6>
 80011ee:	0124      	lsls	r4, r4, #4
 80011f0:	2300      	movs	r3, #0
 80011f2:	b2a2      	uxth	r2, r4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4630      	mov	r0, r6
 80011f8:	f7ff fd32 	bl	8000c60 <_Unwind_VRS_Pop>
 80011fc:	2800      	cmp	r0, #0
 80011fe:	d1a8      	bne.n	8001152 <__gnu_unwind_execute+0xa6>
 8001200:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001204:	bf18      	it	ne
 8001206:	f04f 0801 	movne.w	r8, #1
 800120a:	e756      	b.n	80010ba <__gnu_unwind_execute+0xe>
 800120c:	28c6      	cmp	r0, #198	; 0xc6
 800120e:	d07d      	beq.n	800130c <__gnu_unwind_execute+0x260>
 8001210:	28c7      	cmp	r0, #199	; 0xc7
 8001212:	f000 8086 	beq.w	8001322 <__gnu_unwind_execute+0x276>
 8001216:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 800121a:	2bc0      	cmp	r3, #192	; 0xc0
 800121c:	f000 8094 	beq.w	8001348 <__gnu_unwind_execute+0x29c>
 8001220:	28c8      	cmp	r0, #200	; 0xc8
 8001222:	f000 809f 	beq.w	8001364 <__gnu_unwind_execute+0x2b8>
 8001226:	28c9      	cmp	r0, #201	; 0xc9
 8001228:	d193      	bne.n	8001152 <__gnu_unwind_execute+0xa6>
 800122a:	4638      	mov	r0, r7
 800122c:	f7ff ff12 	bl	8001054 <next_unwind_byte>
 8001230:	0302      	lsls	r2, r0, #12
 8001232:	f000 000f 	and.w	r0, r0, #15
 8001236:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 800123a:	3001      	adds	r0, #1
 800123c:	4302      	orrs	r2, r0
 800123e:	e781      	b.n	8001144 <__gnu_unwind_execute+0x98>
 8001240:	ac03      	add	r4, sp, #12
 8001242:	4643      	mov	r3, r8
 8001244:	220e      	movs	r2, #14
 8001246:	4641      	mov	r1, r8
 8001248:	9400      	str	r4, [sp, #0]
 800124a:	4630      	mov	r0, r6
 800124c:	f7ff fb14 	bl	8000878 <_Unwind_VRS_Get>
 8001250:	9400      	str	r4, [sp, #0]
 8001252:	4630      	mov	r0, r6
 8001254:	4643      	mov	r3, r8
 8001256:	220f      	movs	r2, #15
 8001258:	4641      	mov	r1, r8
 800125a:	f7ff fb33 	bl	80008c4 <_Unwind_VRS_Set>
 800125e:	4640      	mov	r0, r8
 8001260:	e778      	b.n	8001154 <__gnu_unwind_execute+0xa8>
 8001262:	4638      	mov	r0, r7
 8001264:	f7ff fef6 	bl	8001054 <next_unwind_byte>
 8001268:	2800      	cmp	r0, #0
 800126a:	f43f af72 	beq.w	8001152 <__gnu_unwind_execute+0xa6>
 800126e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001272:	f47f af6e 	bne.w	8001152 <__gnu_unwind_execute+0xa6>
 8001276:	4602      	mov	r2, r0
 8001278:	4619      	mov	r1, r3
 800127a:	4630      	mov	r0, r6
 800127c:	f7ff fcf0 	bl	8000c60 <_Unwind_VRS_Pop>
 8001280:	2800      	cmp	r0, #0
 8001282:	f47f af66 	bne.w	8001152 <__gnu_unwind_execute+0xa6>
 8001286:	e718      	b.n	80010ba <__gnu_unwind_execute+0xe>
 8001288:	2300      	movs	r3, #0
 800128a:	f10d 090c 	add.w	r9, sp, #12
 800128e:	220d      	movs	r2, #13
 8001290:	4619      	mov	r1, r3
 8001292:	f8cd 9000 	str.w	r9, [sp]
 8001296:	4630      	mov	r0, r6
 8001298:	f7ff faee 	bl	8000878 <_Unwind_VRS_Get>
 800129c:	4638      	mov	r0, r7
 800129e:	f7ff fed9 	bl	8001054 <next_unwind_byte>
 80012a2:	0602      	lsls	r2, r0, #24
 80012a4:	f04f 0402 	mov.w	r4, #2
 80012a8:	d50c      	bpl.n	80012c4 <__gnu_unwind_execute+0x218>
 80012aa:	9b03      	ldr	r3, [sp, #12]
 80012ac:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80012b0:	40a0      	lsls	r0, r4
 80012b2:	4403      	add	r3, r0
 80012b4:	4638      	mov	r0, r7
 80012b6:	9303      	str	r3, [sp, #12]
 80012b8:	f7ff fecc 	bl	8001054 <next_unwind_byte>
 80012bc:	0603      	lsls	r3, r0, #24
 80012be:	f104 0407 	add.w	r4, r4, #7
 80012c2:	d4f2      	bmi.n	80012aa <__gnu_unwind_execute+0x1fe>
 80012c4:	9b03      	ldr	r3, [sp, #12]
 80012c6:	f8cd 9000 	str.w	r9, [sp]
 80012ca:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 80012ce:	40a2      	lsls	r2, r4
 80012d0:	f503 7401 	add.w	r4, r3, #516	; 0x204
 80012d4:	2300      	movs	r3, #0
 80012d6:	4414      	add	r4, r2
 80012d8:	4619      	mov	r1, r3
 80012da:	220d      	movs	r2, #13
 80012dc:	4630      	mov	r0, r6
 80012de:	9403      	str	r4, [sp, #12]
 80012e0:	f7ff faf0 	bl	80008c4 <_Unwind_VRS_Set>
 80012e4:	e6e9      	b.n	80010ba <__gnu_unwind_execute+0xe>
 80012e6:	4638      	mov	r0, r7
 80012e8:	f7ff feb4 	bl	8001054 <next_unwind_byte>
 80012ec:	0301      	lsls	r1, r0, #12
 80012ee:	f000 000f 	and.w	r0, r0, #15
 80012f2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80012f6:	1c42      	adds	r2, r0, #1
 80012f8:	2301      	movs	r3, #1
 80012fa:	430a      	orrs	r2, r1
 80012fc:	4630      	mov	r0, r6
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fcae 	bl	8000c60 <_Unwind_VRS_Pop>
 8001304:	2800      	cmp	r0, #0
 8001306:	f47f af24 	bne.w	8001152 <__gnu_unwind_execute+0xa6>
 800130a:	e6d6      	b.n	80010ba <__gnu_unwind_execute+0xe>
 800130c:	4638      	mov	r0, r7
 800130e:	f7ff fea1 	bl	8001054 <next_unwind_byte>
 8001312:	0301      	lsls	r1, r0, #12
 8001314:	f000 000f 	and.w	r0, r0, #15
 8001318:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800131c:	1c42      	adds	r2, r0, #1
 800131e:	2303      	movs	r3, #3
 8001320:	e7eb      	b.n	80012fa <__gnu_unwind_execute+0x24e>
 8001322:	4638      	mov	r0, r7
 8001324:	f7ff fe96 	bl	8001054 <next_unwind_byte>
 8001328:	2800      	cmp	r0, #0
 800132a:	f43f af12 	beq.w	8001152 <__gnu_unwind_execute+0xa6>
 800132e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001332:	f47f af0e 	bne.w	8001152 <__gnu_unwind_execute+0xa6>
 8001336:	4602      	mov	r2, r0
 8001338:	2104      	movs	r1, #4
 800133a:	4630      	mov	r0, r6
 800133c:	f7ff fc90 	bl	8000c60 <_Unwind_VRS_Pop>
 8001340:	2800      	cmp	r0, #0
 8001342:	f47f af06 	bne.w	8001152 <__gnu_unwind_execute+0xa6>
 8001346:	e6b8      	b.n	80010ba <__gnu_unwind_execute+0xe>
 8001348:	f000 020f 	and.w	r2, r0, #15
 800134c:	3201      	adds	r2, #1
 800134e:	2303      	movs	r3, #3
 8001350:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001354:	4619      	mov	r1, r3
 8001356:	4630      	mov	r0, r6
 8001358:	f7ff fc82 	bl	8000c60 <_Unwind_VRS_Pop>
 800135c:	2800      	cmp	r0, #0
 800135e:	f47f aef8 	bne.w	8001152 <__gnu_unwind_execute+0xa6>
 8001362:	e6aa      	b.n	80010ba <__gnu_unwind_execute+0xe>
 8001364:	4638      	mov	r0, r7
 8001366:	f7ff fe75 	bl	8001054 <next_unwind_byte>
 800136a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800136e:	f000 030f 	and.w	r3, r0, #15
 8001372:	3210      	adds	r2, #16
 8001374:	3301      	adds	r3, #1
 8001376:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800137a:	e6e3      	b.n	8001144 <__gnu_unwind_execute+0x98>

0800137c <__gnu_unwind_frame>:
 800137c:	b510      	push	{r4, lr}
 800137e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001380:	b084      	sub	sp, #16
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	2003      	movs	r0, #3
 8001386:	f88d 000c 	strb.w	r0, [sp, #12]
 800138a:	79dc      	ldrb	r4, [r3, #7]
 800138c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001390:	0212      	lsls	r2, r2, #8
 8001392:	3308      	adds	r3, #8
 8001394:	4608      	mov	r0, r1
 8001396:	a901      	add	r1, sp, #4
 8001398:	9201      	str	r2, [sp, #4]
 800139a:	9302      	str	r3, [sp, #8]
 800139c:	f7ff fe86 	bl	80010ac <__gnu_unwind_execute>
 80013a0:	b004      	add	sp, #16
 80013a2:	bd10      	pop	{r4, pc}

080013a4 <_Unwind_GetRegionStart>:
 80013a4:	b508      	push	{r3, lr}
 80013a6:	f7ff fe7f 	bl	80010a8 <unwind_UCB_from_context>
 80013aa:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80013ac:	bd08      	pop	{r3, pc}
 80013ae:	bf00      	nop

080013b0 <_Unwind_GetLanguageSpecificData>:
 80013b0:	b508      	push	{r3, lr}
 80013b2:	f7ff fe79 	bl	80010a8 <unwind_UCB_from_context>
 80013b6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80013b8:	79c3      	ldrb	r3, [r0, #7]
 80013ba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80013be:	3008      	adds	r0, #8
 80013c0:	bd08      	pop	{r3, pc}
 80013c2:	bf00      	nop

080013c4 <_Unwind_GetTextRelBase>:
 80013c4:	b508      	push	{r3, lr}
 80013c6:	f002 fdca 	bl	8003f5e <abort>
 80013ca:	bf00      	nop

080013cc <_Unwind_GetDataRelBase>:
 80013cc:	b508      	push	{r3, lr}
 80013ce:	f7ff fff9 	bl	80013c4 <_Unwind_GetTextRelBase>
 80013d2:	bf00      	nop

080013d4 <__aeabi_idiv0>:
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop

080013d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <HAL_Init+0x30>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e2:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e4:	681a      	ldr	r2, [r3, #0]
 80013e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013ea:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013f4:	2003      	movs	r0, #3
 80013f6:	f000 f81b 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013fa:	2000      	movs	r0, #0
 80013fc:	f002 fcc8 	bl	8003d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001400:	f002 fc9c 	bl	8003d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001404:	2000      	movs	r0, #0
 8001406:	bd08      	pop	{r3, pc}
 8001408:	40023c00 	.word	0x40023c00

0800140c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800140c:	4a03      	ldr	r2, [pc, #12]	; (800141c <HAL_IncTick+0x10>)
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <HAL_IncTick+0x14>)
 8001410:	6811      	ldr	r1, [r2, #0]
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	440b      	add	r3, r1
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20003e90 	.word	0x20003e90
 8001420:	20000000 	.word	0x20000000

08001424 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001424:	4b01      	ldr	r3, [pc, #4]	; (800142c <HAL_GetTick+0x8>)
 8001426:	6818      	ldr	r0, [r3, #0]
}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20003e90 	.word	0x20003e90

08001430 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001430:	4a07      	ldr	r2, [pc, #28]	; (8001450 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001432:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001434:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001438:	041b      	lsls	r3, r3, #16
 800143a:	0c1b      	lsrs	r3, r3, #16
 800143c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001440:	0200      	lsls	r0, r0, #8
 8001442:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001446:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800144a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800144c:	60d3      	str	r3, [r2, #12]
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001456:	b530      	push	{r4, r5, lr}
 8001458:	68dc      	ldr	r4, [r3, #12]
 800145a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800145e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001462:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001464:	2b04      	cmp	r3, #4
 8001466:	bf28      	it	cs
 8001468:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 0501 	mov.w	r5, #1
 8001470:	fa05 f303 	lsl.w	r3, r5, r3
 8001474:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001478:	bf8c      	ite	hi
 800147a:	3c03      	subhi	r4, #3
 800147c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800147e:	4019      	ands	r1, r3
 8001480:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001482:	fa05 f404 	lsl.w	r4, r5, r4
 8001486:	3c01      	subs	r4, #1
 8001488:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800148a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	ea42 0201 	orr.w	r2, r2, r1
 8001490:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	bfad      	iteet	ge
 8001496:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	f000 000f 	andlt.w	r0, r0, #15
 800149e:	4b06      	ldrlt	r3, [pc, #24]	; (80014b8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a4:	bfb5      	itete	lt
 80014a6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80014b0:	bd30      	pop	{r4, r5, pc}
 80014b2:	bf00      	nop
 80014b4:	e000ed00 	.word	0xe000ed00
 80014b8:	e000ed14 	.word	0xe000ed14

080014bc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80014bc:	2800      	cmp	r0, #0
 80014be:	db08      	blt.n	80014d2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014c0:	0942      	lsrs	r2, r0, #5
 80014c2:	2301      	movs	r3, #1
 80014c4:	f000 001f 	and.w	r0, r0, #31
 80014c8:	fa03 f000 	lsl.w	r0, r3, r0
 80014cc:	4b01      	ldr	r3, [pc, #4]	; (80014d4 <HAL_NVIC_EnableIRQ+0x18>)
 80014ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014dc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001690 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e4:	4a68      	ldr	r2, [pc, #416]	; (8001688 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8001694 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ea:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ec:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80014ee:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80014f4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80014fc:	45b6      	cmp	lr, r6
 80014fe:	f040 80ae 	bne.w	800165e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001502:	684c      	ldr	r4, [r1, #4]
 8001504:	f024 0710 	bic.w	r7, r4, #16
 8001508:	2f02      	cmp	r7, #2
 800150a:	d116      	bne.n	800153a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800150c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001510:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001514:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001518:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800151c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001520:	f04f 0c0f 	mov.w	ip, #15
 8001524:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001528:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800152c:	690d      	ldr	r5, [r1, #16]
 800152e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001532:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001536:	f8ca 5020 	str.w	r5, [sl, #32]
 800153a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800153e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001540:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001544:	fa05 f50a 	lsl.w	r5, r5, sl
 8001548:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800154a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800154e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001552:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001556:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001558:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800155c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800155e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001562:	d811      	bhi.n	8001588 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001564:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001566:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800156a:	68cf      	ldr	r7, [r1, #12]
 800156c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001570:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001574:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001576:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001578:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800157c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001580:	409f      	lsls	r7, r3
 8001582:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001586:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001588:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800158a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800158c:	688f      	ldr	r7, [r1, #8]
 800158e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001592:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001594:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001596:	00e5      	lsls	r5, r4, #3
 8001598:	d561      	bpl.n	800165e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	f04f 0b00 	mov.w	fp, #0
 800159e:	f8cd b00c 	str.w	fp, [sp, #12]
 80015a2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015a6:	4d39      	ldr	r5, [pc, #228]	; (800168c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80015ac:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80015b0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80015b4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80015b8:	9703      	str	r7, [sp, #12]
 80015ba:	9f03      	ldr	r7, [sp, #12]
 80015bc:	f023 0703 	bic.w	r7, r3, #3
 80015c0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80015c4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015c8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80015cc:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015d0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80015d4:	f04f 0e0f 	mov.w	lr, #15
 80015d8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015dc:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80015de:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015e2:	d043      	beq.n	800166c <HAL_GPIO_Init+0x194>
 80015e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015e8:	42a8      	cmp	r0, r5
 80015ea:	d041      	beq.n	8001670 <HAL_GPIO_Init+0x198>
 80015ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015f0:	42a8      	cmp	r0, r5
 80015f2:	d03f      	beq.n	8001674 <HAL_GPIO_Init+0x19c>
 80015f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80015f8:	42a8      	cmp	r0, r5
 80015fa:	d03d      	beq.n	8001678 <HAL_GPIO_Init+0x1a0>
 80015fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001600:	42a8      	cmp	r0, r5
 8001602:	d03b      	beq.n	800167c <HAL_GPIO_Init+0x1a4>
 8001604:	4548      	cmp	r0, r9
 8001606:	d03b      	beq.n	8001680 <HAL_GPIO_Init+0x1a8>
 8001608:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800160c:	42a8      	cmp	r0, r5
 800160e:	d039      	beq.n	8001684 <HAL_GPIO_Init+0x1ac>
 8001610:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001614:	42a8      	cmp	r0, r5
 8001616:	bf14      	ite	ne
 8001618:	2508      	movne	r5, #8
 800161a:	2507      	moveq	r5, #7
 800161c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001620:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001624:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001626:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001628:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800162a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800162e:	bf0c      	ite	eq
 8001630:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001632:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001634:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001636:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001638:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800163c:	bf0c      	ite	eq
 800163e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001640:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001642:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001644:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001646:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800164a:	bf0c      	ite	eq
 800164c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800164e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001650:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001652:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001654:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001656:	bf54      	ite	pl
 8001658:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800165a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800165c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	3301      	adds	r3, #1
 8001660:	2b10      	cmp	r3, #16
 8001662:	f47f af44 	bne.w	80014ee <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001666:	b005      	add	sp, #20
 8001668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166c:	465d      	mov	r5, fp
 800166e:	e7d5      	b.n	800161c <HAL_GPIO_Init+0x144>
 8001670:	2501      	movs	r5, #1
 8001672:	e7d3      	b.n	800161c <HAL_GPIO_Init+0x144>
 8001674:	2502      	movs	r5, #2
 8001676:	e7d1      	b.n	800161c <HAL_GPIO_Init+0x144>
 8001678:	2503      	movs	r5, #3
 800167a:	e7cf      	b.n	800161c <HAL_GPIO_Init+0x144>
 800167c:	2504      	movs	r5, #4
 800167e:	e7cd      	b.n	800161c <HAL_GPIO_Init+0x144>
 8001680:	2505      	movs	r5, #5
 8001682:	e7cb      	b.n	800161c <HAL_GPIO_Init+0x144>
 8001684:	2506      	movs	r5, #6
 8001686:	e7c9      	b.n	800161c <HAL_GPIO_Init+0x144>
 8001688:	40013c00 	.word	0x40013c00
 800168c:	40020000 	.word	0x40020000
 8001690:	40023800 	.word	0x40023800
 8001694:	40021400 	.word	0x40021400

08001698 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001698:	b10a      	cbz	r2, 800169e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800169a:	6181      	str	r1, [r0, #24]
 800169c:	4770      	bx	lr
 800169e:	0409      	lsls	r1, r1, #16
 80016a0:	e7fb      	b.n	800169a <HAL_GPIO_WritePin+0x2>

080016a2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016a2:	6943      	ldr	r3, [r0, #20]
 80016a4:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016a8:	bf08      	it	eq
 80016aa:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ac:	6181      	str	r1, [r0, #24]
 80016ae:	4770      	bx	lr

080016b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b4:	4604      	mov	r4, r0
 80016b6:	b918      	cbnz	r0, 80016c0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80016b8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80016ba:	b002      	add	sp, #8
 80016bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016c0:	6803      	ldr	r3, [r0, #0]
 80016c2:	07dd      	lsls	r5, r3, #31
 80016c4:	d410      	bmi.n	80016e8 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016c6:	6823      	ldr	r3, [r4, #0]
 80016c8:	0798      	lsls	r0, r3, #30
 80016ca:	d458      	bmi.n	800177e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	071a      	lsls	r2, r3, #28
 80016d0:	f100 809a 	bmi.w	8001808 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016d4:	6823      	ldr	r3, [r4, #0]
 80016d6:	075b      	lsls	r3, r3, #29
 80016d8:	f100 80b8 	bmi.w	800184c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016dc:	69a2      	ldr	r2, [r4, #24]
 80016de:	2a00      	cmp	r2, #0
 80016e0:	f040 8119 	bne.w	8001916 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80016e4:	2000      	movs	r0, #0
 80016e6:	e7e8      	b.n	80016ba <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016e8:	4ba6      	ldr	r3, [pc, #664]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	f002 020c 	and.w	r2, r2, #12
 80016f0:	2a04      	cmp	r2, #4
 80016f2:	d007      	beq.n	8001704 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016fa:	2a08      	cmp	r2, #8
 80016fc:	d10a      	bne.n	8001714 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	0259      	lsls	r1, r3, #9
 8001702:	d507      	bpl.n	8001714 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	4b9f      	ldr	r3, [pc, #636]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	039a      	lsls	r2, r3, #14
 800170a:	d5dc      	bpl.n	80016c6 <HAL_RCC_OscConfig+0x16>
 800170c:	6863      	ldr	r3, [r4, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d1d9      	bne.n	80016c6 <HAL_RCC_OscConfig+0x16>
 8001712:	e7d1      	b.n	80016b8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001714:	6863      	ldr	r3, [r4, #4]
 8001716:	4d9b      	ldr	r5, [pc, #620]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d111      	bne.n	8001742 <HAL_RCC_OscConfig+0x92>
 800171e:	682b      	ldr	r3, [r5, #0]
 8001720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001724:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001726:	f7ff fe7d 	bl	8001424 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172a:	4d96      	ldr	r5, [pc, #600]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800172c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800172e:	682b      	ldr	r3, [r5, #0]
 8001730:	039b      	lsls	r3, r3, #14
 8001732:	d4c8      	bmi.n	80016c6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fe76 	bl	8001424 <HAL_GetTick>
 8001738:	1b80      	subs	r0, r0, r6
 800173a:	2864      	cmp	r0, #100	; 0x64
 800173c:	d9f7      	bls.n	800172e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800173e:	2003      	movs	r0, #3
 8001740:	e7bb      	b.n	80016ba <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001746:	d104      	bne.n	8001752 <HAL_RCC_OscConfig+0xa2>
 8001748:	682b      	ldr	r3, [r5, #0]
 800174a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174e:	602b      	str	r3, [r5, #0]
 8001750:	e7e5      	b.n	800171e <HAL_RCC_OscConfig+0x6e>
 8001752:	682a      	ldr	r2, [r5, #0]
 8001754:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001758:	602a      	str	r2, [r5, #0]
 800175a:	682a      	ldr	r2, [r5, #0]
 800175c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001760:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1df      	bne.n	8001726 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001766:	f7ff fe5d 	bl	8001424 <HAL_GetTick>
 800176a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176c:	682b      	ldr	r3, [r5, #0]
 800176e:	039f      	lsls	r7, r3, #14
 8001770:	d5a9      	bpl.n	80016c6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001772:	f7ff fe57 	bl	8001424 <HAL_GetTick>
 8001776:	1b80      	subs	r0, r0, r6
 8001778:	2864      	cmp	r0, #100	; 0x64
 800177a:	d9f7      	bls.n	800176c <HAL_RCC_OscConfig+0xbc>
 800177c:	e7df      	b.n	800173e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800177e:	4b81      	ldr	r3, [pc, #516]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	f012 0f0c 	tst.w	r2, #12
 8001786:	d007      	beq.n	8001798 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800178e:	2a08      	cmp	r2, #8
 8001790:	d111      	bne.n	80017b6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	025e      	lsls	r6, r3, #9
 8001796:	d40e      	bmi.n	80017b6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001798:	4b7a      	ldr	r3, [pc, #488]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	0795      	lsls	r5, r2, #30
 800179e:	d502      	bpl.n	80017a6 <HAL_RCC_OscConfig+0xf6>
 80017a0:	68e2      	ldr	r2, [r4, #12]
 80017a2:	2a01      	cmp	r2, #1
 80017a4:	d188      	bne.n	80016b8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	6921      	ldr	r1, [r4, #16]
 80017aa:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80017ae:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80017b2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b4:	e78a      	b.n	80016cc <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017b6:	68e2      	ldr	r2, [r4, #12]
 80017b8:	4b73      	ldr	r3, [pc, #460]	; (8001988 <HAL_RCC_OscConfig+0x2d8>)
 80017ba:	b1b2      	cbz	r2, 80017ea <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017c0:	f7ff fe30 	bl	8001424 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c4:	4d6f      	ldr	r5, [pc, #444]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80017c6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	0798      	lsls	r0, r3, #30
 80017cc:	d507      	bpl.n	80017de <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	682b      	ldr	r3, [r5, #0]
 80017d0:	6922      	ldr	r2, [r4, #16]
 80017d2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017d6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017da:	602b      	str	r3, [r5, #0]
 80017dc:	e776      	b.n	80016cc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017de:	f7ff fe21 	bl	8001424 <HAL_GetTick>
 80017e2:	1b80      	subs	r0, r0, r6
 80017e4:	2802      	cmp	r0, #2
 80017e6:	d9ef      	bls.n	80017c8 <HAL_RCC_OscConfig+0x118>
 80017e8:	e7a9      	b.n	800173e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80017ea:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017ec:	f7ff fe1a 	bl	8001424 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f0:	4d64      	ldr	r5, [pc, #400]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80017f2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017f4:	682b      	ldr	r3, [r5, #0]
 80017f6:	0799      	lsls	r1, r3, #30
 80017f8:	f57f af68 	bpl.w	80016cc <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fc:	f7ff fe12 	bl	8001424 <HAL_GetTick>
 8001800:	1b80      	subs	r0, r0, r6
 8001802:	2802      	cmp	r0, #2
 8001804:	d9f6      	bls.n	80017f4 <HAL_RCC_OscConfig+0x144>
 8001806:	e79a      	b.n	800173e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001808:	6962      	ldr	r2, [r4, #20]
 800180a:	4b60      	ldr	r3, [pc, #384]	; (800198c <HAL_RCC_OscConfig+0x2dc>)
 800180c:	b17a      	cbz	r2, 800182e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800180e:	2201      	movs	r2, #1
 8001810:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001812:	f7ff fe07 	bl	8001424 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001816:	4d5b      	ldr	r5, [pc, #364]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001818:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800181a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800181c:	079f      	lsls	r7, r3, #30
 800181e:	f53f af59 	bmi.w	80016d4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff fdff 	bl	8001424 <HAL_GetTick>
 8001826:	1b80      	subs	r0, r0, r6
 8001828:	2802      	cmp	r0, #2
 800182a:	d9f6      	bls.n	800181a <HAL_RCC_OscConfig+0x16a>
 800182c:	e787      	b.n	800173e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800182e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001830:	f7ff fdf8 	bl	8001424 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001834:	4d53      	ldr	r5, [pc, #332]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001836:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800183a:	0798      	lsls	r0, r3, #30
 800183c:	f57f af4a 	bpl.w	80016d4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff fdf0 	bl	8001424 <HAL_GetTick>
 8001844:	1b80      	subs	r0, r0, r6
 8001846:	2802      	cmp	r0, #2
 8001848:	d9f6      	bls.n	8001838 <HAL_RCC_OscConfig+0x188>
 800184a:	e778      	b.n	800173e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184c:	4b4d      	ldr	r3, [pc, #308]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
 800184e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001850:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001854:	d128      	bne.n	80018a8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001856:	9201      	str	r2, [sp, #4]
 8001858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800185a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800185e:	641a      	str	r2, [r3, #64]	; 0x40
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800186a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	4d48      	ldr	r5, [pc, #288]	; (8001990 <HAL_RCC_OscConfig+0x2e0>)
 800186e:	682b      	ldr	r3, [r5, #0]
 8001870:	05d9      	lsls	r1, r3, #23
 8001872:	d51b      	bpl.n	80018ac <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001874:	68a3      	ldr	r3, [r4, #8]
 8001876:	4d43      	ldr	r5, [pc, #268]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
 8001878:	2b01      	cmp	r3, #1
 800187a:	d127      	bne.n	80018cc <HAL_RCC_OscConfig+0x21c>
 800187c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001884:	f7ff fdce 	bl	8001424 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001888:	4d3e      	ldr	r5, [pc, #248]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800188a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001890:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001892:	079b      	lsls	r3, r3, #30
 8001894:	d539      	bpl.n	800190a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001896:	2e00      	cmp	r6, #0
 8001898:	f43f af20 	beq.w	80016dc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800189c:	4a39      	ldr	r2, [pc, #228]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
 800189e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80018a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
 80018a6:	e719      	b.n	80016dc <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80018a8:	2600      	movs	r6, #0
 80018aa:	e7df      	b.n	800186c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ac:	682b      	ldr	r3, [r5, #0]
 80018ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80018b4:	f7ff fdb6 	bl	8001424 <HAL_GetTick>
 80018b8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ba:	682b      	ldr	r3, [r5, #0]
 80018bc:	05da      	lsls	r2, r3, #23
 80018be:	d4d9      	bmi.n	8001874 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018c0:	f7ff fdb0 	bl	8001424 <HAL_GetTick>
 80018c4:	1bc0      	subs	r0, r0, r7
 80018c6:	2802      	cmp	r0, #2
 80018c8:	d9f7      	bls.n	80018ba <HAL_RCC_OscConfig+0x20a>
 80018ca:	e738      	b.n	800173e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018cc:	2b05      	cmp	r3, #5
 80018ce:	d104      	bne.n	80018da <HAL_RCC_OscConfig+0x22a>
 80018d0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018d2:	f043 0304 	orr.w	r3, r3, #4
 80018d6:	672b      	str	r3, [r5, #112]	; 0x70
 80018d8:	e7d0      	b.n	800187c <HAL_RCC_OscConfig+0x1cc>
 80018da:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018dc:	f022 0201 	bic.w	r2, r2, #1
 80018e0:	672a      	str	r2, [r5, #112]	; 0x70
 80018e2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80018e4:	f022 0204 	bic.w	r2, r2, #4
 80018e8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1ca      	bne.n	8001884 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80018ee:	f7ff fd99 	bl	8001424 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80018f6:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80018fa:	0798      	lsls	r0, r3, #30
 80018fc:	d5cb      	bpl.n	8001896 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018fe:	f7ff fd91 	bl	8001424 <HAL_GetTick>
 8001902:	1bc0      	subs	r0, r0, r7
 8001904:	4540      	cmp	r0, r8
 8001906:	d9f7      	bls.n	80018f8 <HAL_RCC_OscConfig+0x248>
 8001908:	e719      	b.n	800173e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190a:	f7ff fd8b 	bl	8001424 <HAL_GetTick>
 800190e:	1bc0      	subs	r0, r0, r7
 8001910:	4540      	cmp	r0, r8
 8001912:	d9bd      	bls.n	8001890 <HAL_RCC_OscConfig+0x1e0>
 8001914:	e713      	b.n	800173e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001916:	4d1b      	ldr	r5, [pc, #108]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
 8001918:	68ab      	ldr	r3, [r5, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b08      	cmp	r3, #8
 8001920:	f43f aeca 	beq.w	80016b8 <HAL_RCC_OscConfig+0x8>
 8001924:	4e1b      	ldr	r6, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x2e4>)
 8001926:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001928:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800192a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192c:	d134      	bne.n	8001998 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 800192e:	f7ff fd79 	bl	8001424 <HAL_GetTick>
 8001932:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	0199      	lsls	r1, r3, #6
 8001938:	d41e      	bmi.n	8001978 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800193a:	6a22      	ldr	r2, [r4, #32]
 800193c:	69e3      	ldr	r3, [r4, #28]
 800193e:	4313      	orrs	r3, r2
 8001940:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001942:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001946:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001948:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800194c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194e:	4c0d      	ldr	r4, [pc, #52]	; (8001984 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001950:	0852      	lsrs	r2, r2, #1
 8001952:	3a01      	subs	r2, #1
 8001954:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001958:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800195a:	2301      	movs	r3, #1
 800195c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800195e:	f7ff fd61 	bl	8001424 <HAL_GetTick>
 8001962:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001964:	6823      	ldr	r3, [r4, #0]
 8001966:	019a      	lsls	r2, r3, #6
 8001968:	f53f aebc 	bmi.w	80016e4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff fd5a 	bl	8001424 <HAL_GetTick>
 8001970:	1b40      	subs	r0, r0, r5
 8001972:	2802      	cmp	r0, #2
 8001974:	d9f6      	bls.n	8001964 <HAL_RCC_OscConfig+0x2b4>
 8001976:	e6e2      	b.n	800173e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff fd54 	bl	8001424 <HAL_GetTick>
 800197c:	1bc0      	subs	r0, r0, r7
 800197e:	2802      	cmp	r0, #2
 8001980:	d9d8      	bls.n	8001934 <HAL_RCC_OscConfig+0x284>
 8001982:	e6dc      	b.n	800173e <HAL_RCC_OscConfig+0x8e>
 8001984:	40023800 	.word	0x40023800
 8001988:	42470000 	.word	0x42470000
 800198c:	42470e80 	.word	0x42470e80
 8001990:	40007000 	.word	0x40007000
 8001994:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001998:	f7ff fd44 	bl	8001424 <HAL_GetTick>
 800199c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800199e:	682b      	ldr	r3, [r5, #0]
 80019a0:	019b      	lsls	r3, r3, #6
 80019a2:	f57f ae9f 	bpl.w	80016e4 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a6:	f7ff fd3d 	bl	8001424 <HAL_GetTick>
 80019aa:	1b00      	subs	r0, r0, r4
 80019ac:	2802      	cmp	r0, #2
 80019ae:	d9f6      	bls.n	800199e <HAL_RCC_OscConfig+0x2ee>
 80019b0:	e6c5      	b.n	800173e <HAL_RCC_OscConfig+0x8e>
 80019b2:	bf00      	nop

080019b4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b4:	4913      	ldr	r1, [pc, #76]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80019b6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019b8:	688b      	ldr	r3, [r1, #8]
 80019ba:	f003 030c 	and.w	r3, r3, #12
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d003      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x16>
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019c6:	4810      	ldr	r0, [pc, #64]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019c8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80019ca:	4810      	ldr	r0, [pc, #64]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x58>)
 80019cc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019ce:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019d4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019d8:	bf14      	ite	ne
 80019da:	480c      	ldrne	r0, [pc, #48]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019dc:	480a      	ldreq	r0, [pc, #40]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019de:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019e2:	bf18      	it	ne
 80019e4:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ea:	fba1 0100 	umull	r0, r1, r1, r0
 80019ee:	f7fe fbef 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019f2:	4b04      	ldr	r3, [pc, #16]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x50>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019fa:	3301      	adds	r3, #1
 80019fc:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80019fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a02:	bd08      	pop	{r3, pc}
 8001a04:	40023800 	.word	0x40023800
 8001a08:	00f42400 	.word	0x00f42400
 8001a0c:	007a1200 	.word	0x007a1200

08001a10 <HAL_RCC_ClockConfig>:
{
 8001a10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a14:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001a16:	4604      	mov	r4, r0
 8001a18:	b910      	cbnz	r0, 8001a20 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a20:	4b44      	ldr	r3, [pc, #272]	; (8001b34 <HAL_RCC_ClockConfig+0x124>)
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	f002 020f 	and.w	r2, r2, #15
 8001a28:	428a      	cmp	r2, r1
 8001a2a:	d328      	bcc.n	8001a7e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	6821      	ldr	r1, [r4, #0]
 8001a2e:	078f      	lsls	r7, r1, #30
 8001a30:	d42d      	bmi.n	8001a8e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a32:	07c8      	lsls	r0, r1, #31
 8001a34:	d440      	bmi.n	8001ab8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a36:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <HAL_RCC_ClockConfig+0x124>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	f002 020f 	and.w	r2, r2, #15
 8001a3e:	4295      	cmp	r5, r2
 8001a40:	d366      	bcc.n	8001b10 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a42:	6822      	ldr	r2, [r4, #0]
 8001a44:	0751      	lsls	r1, r2, #29
 8001a46:	d46c      	bmi.n	8001b22 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a48:	0713      	lsls	r3, r2, #28
 8001a4a:	d507      	bpl.n	8001a5c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a4c:	4a3a      	ldr	r2, [pc, #232]	; (8001b38 <HAL_RCC_ClockConfig+0x128>)
 8001a4e:	6921      	ldr	r1, [r4, #16]
 8001a50:	6893      	ldr	r3, [r2, #8]
 8001a52:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a56:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a5a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a5c:	f7ff ffaa 	bl	80019b4 <HAL_RCC_GetSysClockFreq>
 8001a60:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <HAL_RCC_ClockConfig+0x128>)
 8001a62:	4a36      	ldr	r2, [pc, #216]	; (8001b3c <HAL_RCC_ClockConfig+0x12c>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a6a:	5cd3      	ldrb	r3, [r2, r3]
 8001a6c:	40d8      	lsrs	r0, r3
 8001a6e:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <HAL_RCC_ClockConfig+0x130>)
 8001a70:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f002 f98c 	bl	8003d90 <HAL_InitTick>
  return HAL_OK;
 8001a78:	2000      	movs	r0, #0
 8001a7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7e:	b2ca      	uxtb	r2, r1
 8001a80:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	4299      	cmp	r1, r3
 8001a8a:	d1c6      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xa>
 8001a8c:	e7ce      	b.n	8001a2c <HAL_RCC_ClockConfig+0x1c>
 8001a8e:	4b2a      	ldr	r3, [pc, #168]	; (8001b38 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a94:	bf1e      	ittt	ne
 8001a96:	689a      	ldrne	r2, [r3, #8]
 8001a98:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001a9c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a9e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aa0:	bf42      	ittt	mi
 8001aa2:	689a      	ldrmi	r2, [r3, #8]
 8001aa4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001aa8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	68a0      	ldr	r0, [r4, #8]
 8001aae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001ab2:	4302      	orrs	r2, r0
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	e7bc      	b.n	8001a32 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ab8:	6862      	ldr	r2, [r4, #4]
 8001aba:	4b1f      	ldr	r3, [pc, #124]	; (8001b38 <HAL_RCC_ClockConfig+0x128>)
 8001abc:	2a01      	cmp	r2, #1
 8001abe:	d11d      	bne.n	8001afc <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac6:	d0a8      	beq.n	8001a1a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ac8:	4e1b      	ldr	r6, [pc, #108]	; (8001b38 <HAL_RCC_ClockConfig+0x128>)
 8001aca:	68b3      	ldr	r3, [r6, #8]
 8001acc:	f023 0303 	bic.w	r3, r3, #3
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001ad4:	f7ff fca6 	bl	8001424 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001adc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ade:	68b3      	ldr	r3, [r6, #8]
 8001ae0:	6862      	ldr	r2, [r4, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001aea:	d0a4      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aec:	f7ff fc9a 	bl	8001424 <HAL_GetTick>
 8001af0:	1bc0      	subs	r0, r0, r7
 8001af2:	4540      	cmp	r0, r8
 8001af4:	d9f3      	bls.n	8001ade <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001af6:	2003      	movs	r0, #3
}
 8001af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afc:	1e91      	subs	r1, r2, #2
 8001afe:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b00:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b02:	d802      	bhi.n	8001b0a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b04:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001b08:	e7dd      	b.n	8001ac6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0a:	f013 0f02 	tst.w	r3, #2
 8001b0e:	e7da      	b.n	8001ac6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b10:	b2ea      	uxtb	r2, r5
 8001b12:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	429d      	cmp	r5, r3
 8001b1c:	f47f af7d 	bne.w	8001a1a <HAL_RCC_ClockConfig+0xa>
 8001b20:	e78f      	b.n	8001a42 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b22:	4905      	ldr	r1, [pc, #20]	; (8001b38 <HAL_RCC_ClockConfig+0x128>)
 8001b24:	68e0      	ldr	r0, [r4, #12]
 8001b26:	688b      	ldr	r3, [r1, #8]
 8001b28:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001b2c:	4303      	orrs	r3, r0
 8001b2e:	608b      	str	r3, [r1, #8]
 8001b30:	e78a      	b.n	8001a48 <HAL_RCC_ClockConfig+0x38>
 8001b32:	bf00      	nop
 8001b34:	40023c00 	.word	0x40023c00
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	08004096 	.word	0x08004096
 8001b40:	20000008 	.word	0x20000008

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	4a03      	ldr	r2, [pc, #12]	; (8001b60 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b52:	6810      	ldr	r0, [r2, #0]
}
 8001b54:	40d8      	lsrs	r0, r3
 8001b56:	4770      	bx	lr
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	080040a6 	.word	0x080040a6
 8001b60:	20000008 	.word	0x20000008

08001b64 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b64:	230f      	movs	r3, #15
 8001b66:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_GetClockConfig+0x34>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	f002 0203 	and.w	r2, r2, #3
 8001b70:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001b78:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001b80:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	08db      	lsrs	r3, r3, #3
 8001b86:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001b8a:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b8c:	4b03      	ldr	r3, [pc, #12]	; (8001b9c <HAL_RCC_GetClockConfig+0x38>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	600b      	str	r3, [r1, #0]
 8001b96:	4770      	bx	lr
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_TIM_Base_MspInit>:
 8001ba0:	4770      	bx	lr

08001ba2 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ba2:	6803      	ldr	r3, [r0, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	f042 0201 	orr.w	r2, r2, #1
 8001baa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bb2:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8001bb4:	bf1e      	ittt	ne
 8001bb6:	681a      	ldrne	r2, [r3, #0]
 8001bb8:	f042 0201 	orrne.w	r2, r2, #1
 8001bbc:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_TIM_OC_DelayElapsedCallback>:
 8001bc2:	4770      	bx	lr

08001bc4 <HAL_TIM_IC_CaptureCallback>:
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_TIM_TriggerCallback>:
 8001bc8:	4770      	bx	lr

08001bca <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bca:	6803      	ldr	r3, [r0, #0]
 8001bcc:	691a      	ldr	r2, [r3, #16]
 8001bce:	0791      	lsls	r1, r2, #30
{
 8001bd0:	b510      	push	{r4, lr}
 8001bd2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bd4:	d50e      	bpl.n	8001bf4 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	0792      	lsls	r2, r2, #30
 8001bda:	d50b      	bpl.n	8001bf4 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bdc:	f06f 0202 	mvn.w	r2, #2
 8001be0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001be2:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001be4:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001be6:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001be8:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bea:	d077      	beq.n	8001cdc <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bec:	f7ff ffea 	bl	8001bc4 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	691a      	ldr	r2, [r3, #16]
 8001bf8:	0750      	lsls	r0, r2, #29
 8001bfa:	d510      	bpl.n	8001c1e <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	0751      	lsls	r1, r2, #29
 8001c00:	d50d      	bpl.n	8001c1e <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c02:	f06f 0204 	mvn.w	r2, #4
 8001c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c08:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c0a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c0c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c10:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c12:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c14:	d068      	beq.n	8001ce8 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	f7ff ffd5 	bl	8001bc4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c1e:	6823      	ldr	r3, [r4, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	0712      	lsls	r2, r2, #28
 8001c24:	d50f      	bpl.n	8001c46 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c26:	68da      	ldr	r2, [r3, #12]
 8001c28:	0710      	lsls	r0, r2, #28
 8001c2a:	d50c      	bpl.n	8001c46 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c2c:	f06f 0208 	mvn.w	r2, #8
 8001c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c32:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c34:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c36:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c38:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c3c:	d05a      	beq.n	8001cf4 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c3e:	f7ff ffc1 	bl	8001bc4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c42:	2300      	movs	r3, #0
 8001c44:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c46:	6823      	ldr	r3, [r4, #0]
 8001c48:	691a      	ldr	r2, [r3, #16]
 8001c4a:	06d2      	lsls	r2, r2, #27
 8001c4c:	d510      	bpl.n	8001c70 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	06d0      	lsls	r0, r2, #27
 8001c52:	d50d      	bpl.n	8001c70 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c54:	f06f 0210 	mvn.w	r2, #16
 8001c58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c5a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c5c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c5e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c62:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c64:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c66:	d04b      	beq.n	8001d00 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001c68:	f7ff ffac 	bl	8001bc4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c70:	6823      	ldr	r3, [r4, #0]
 8001c72:	691a      	ldr	r2, [r3, #16]
 8001c74:	07d1      	lsls	r1, r2, #31
 8001c76:	d508      	bpl.n	8001c8a <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	07d2      	lsls	r2, r2, #31
 8001c7c:	d505      	bpl.n	8001c8a <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c7e:	f06f 0201 	mvn.w	r2, #1
 8001c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c84:	4620      	mov	r0, r4
 8001c86:	f002 f821 	bl	8003ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c8a:	6823      	ldr	r3, [r4, #0]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	0610      	lsls	r0, r2, #24
 8001c90:	d508      	bpl.n	8001ca4 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c92:	68da      	ldr	r2, [r3, #12]
 8001c94:	0611      	lsls	r1, r2, #24
 8001c96:	d505      	bpl.n	8001ca4 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f000 f8b7 	bl	8001e12 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	0652      	lsls	r2, r2, #25
 8001caa:	d508      	bpl.n	8001cbe <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	0650      	lsls	r0, r2, #25
 8001cb0:	d505      	bpl.n	8001cbe <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001cb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001cb8:	4620      	mov	r0, r4
 8001cba:	f7ff ff85 	bl	8001bc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cbe:	6823      	ldr	r3, [r4, #0]
 8001cc0:	691a      	ldr	r2, [r3, #16]
 8001cc2:	0691      	lsls	r1, r2, #26
 8001cc4:	d522      	bpl.n	8001d0c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001cc6:	68da      	ldr	r2, [r3, #12]
 8001cc8:	0692      	lsls	r2, r2, #26
 8001cca:	d51f      	bpl.n	8001d0c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ccc:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001cd0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cd2:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001cd8:	f000 b89a 	b.w	8001e10 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cdc:	f7ff ff71 	bl	8001bc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ce0:	4620      	mov	r0, r4
 8001ce2:	f7ff ff70 	bl	8001bc6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001ce6:	e783      	b.n	8001bf0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ce8:	f7ff ff6b 	bl	8001bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cec:	4620      	mov	r0, r4
 8001cee:	f7ff ff6a 	bl	8001bc6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cf2:	e792      	b.n	8001c1a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf4:	f7ff ff65 	bl	8001bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	f7ff ff64 	bl	8001bc6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001cfe:	e7a0      	b.n	8001c42 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d00:	f7ff ff5f 	bl	8001bc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d04:	4620      	mov	r0, r4
 8001d06:	f7ff ff5e 	bl	8001bc6 <HAL_TIM_PWM_PulseFinishedCallback>
 8001d0a:	e7af      	b.n	8001c6c <HAL_TIM_IRQHandler+0xa2>
 8001d0c:	bd10      	pop	{r4, pc}
	...

08001d10 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d10:	4a30      	ldr	r2, [pc, #192]	; (8001dd4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001d12:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d14:	4290      	cmp	r0, r2
 8001d16:	d012      	beq.n	8001d3e <TIM_Base_SetConfig+0x2e>
 8001d18:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d1c:	d00f      	beq.n	8001d3e <TIM_Base_SetConfig+0x2e>
 8001d1e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d22:	4290      	cmp	r0, r2
 8001d24:	d00b      	beq.n	8001d3e <TIM_Base_SetConfig+0x2e>
 8001d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d2a:	4290      	cmp	r0, r2
 8001d2c:	d007      	beq.n	8001d3e <TIM_Base_SetConfig+0x2e>
 8001d2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d32:	4290      	cmp	r0, r2
 8001d34:	d003      	beq.n	8001d3e <TIM_Base_SetConfig+0x2e>
 8001d36:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d3a:	4290      	cmp	r0, r2
 8001d3c:	d119      	bne.n	8001d72 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001d3e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001d44:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d46:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <TIM_Base_SetConfig+0xc4>)
 8001d48:	4290      	cmp	r0, r2
 8001d4a:	d029      	beq.n	8001da0 <TIM_Base_SetConfig+0x90>
 8001d4c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d50:	d026      	beq.n	8001da0 <TIM_Base_SetConfig+0x90>
 8001d52:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001d56:	4290      	cmp	r0, r2
 8001d58:	d022      	beq.n	8001da0 <TIM_Base_SetConfig+0x90>
 8001d5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d5e:	4290      	cmp	r0, r2
 8001d60:	d01e      	beq.n	8001da0 <TIM_Base_SetConfig+0x90>
 8001d62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d66:	4290      	cmp	r0, r2
 8001d68:	d01a      	beq.n	8001da0 <TIM_Base_SetConfig+0x90>
 8001d6a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001d6e:	4290      	cmp	r0, r2
 8001d70:	d016      	beq.n	8001da0 <TIM_Base_SetConfig+0x90>
 8001d72:	4a19      	ldr	r2, [pc, #100]	; (8001dd8 <TIM_Base_SetConfig+0xc8>)
 8001d74:	4290      	cmp	r0, r2
 8001d76:	d013      	beq.n	8001da0 <TIM_Base_SetConfig+0x90>
 8001d78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d7c:	4290      	cmp	r0, r2
 8001d7e:	d00f      	beq.n	8001da0 <TIM_Base_SetConfig+0x90>
 8001d80:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d84:	4290      	cmp	r0, r2
 8001d86:	d00b      	beq.n	8001da0 <TIM_Base_SetConfig+0x90>
 8001d88:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001d8c:	4290      	cmp	r0, r2
 8001d8e:	d007      	beq.n	8001da0 <TIM_Base_SetConfig+0x90>
 8001d90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d94:	4290      	cmp	r0, r2
 8001d96:	d003      	beq.n	8001da0 <TIM_Base_SetConfig+0x90>
 8001d98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d9c:	4290      	cmp	r0, r2
 8001d9e:	d103      	bne.n	8001da8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001da0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001da6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da8:	694a      	ldr	r2, [r1, #20]
 8001daa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001dae:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001db0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db2:	688b      	ldr	r3, [r1, #8]
 8001db4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001db6:	680b      	ldr	r3, [r1, #0]
 8001db8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <TIM_Base_SetConfig+0xc4>)
 8001dbc:	4298      	cmp	r0, r3
 8001dbe:	d003      	beq.n	8001dc8 <TIM_Base_SetConfig+0xb8>
 8001dc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dc4:	4298      	cmp	r0, r3
 8001dc6:	d101      	bne.n	8001dcc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dc8:	690b      	ldr	r3, [r1, #16]
 8001dca:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	6143      	str	r3, [r0, #20]
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	40010000 	.word	0x40010000
 8001dd8:	40014000 	.word	0x40014000

08001ddc <HAL_TIM_Base_Init>:
{
 8001ddc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001dde:	4604      	mov	r4, r0
 8001de0:	b1a0      	cbz	r0, 8001e0c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8001de2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001de6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dea:	b91b      	cbnz	r3, 8001df4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001dec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001df0:	f7ff fed6 	bl	8001ba0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001df4:	2302      	movs	r3, #2
 8001df6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dfa:	6820      	ldr	r0, [r4, #0]
 8001dfc:	1d21      	adds	r1, r4, #4
 8001dfe:	f7ff ff87 	bl	8001d10 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001e02:	2301      	movs	r3, #1
 8001e04:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001e08:	2000      	movs	r0, #0
 8001e0a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001e0c:	2001      	movs	r0, #1
}
 8001e0e:	bd10      	pop	{r4, pc}

08001e10 <HAL_TIMEx_CommutCallback>:
 8001e10:	4770      	bx	lr

08001e12 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e12:	4770      	bx	lr

08001e14 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001e14:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001e16:	f001 f8df 	bl	8002fd8 <vTaskStartScheduler>
  
  return osOK;
}
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	bd08      	pop	{r3, pc}

08001e1e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001e1e:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e20:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001e24:	8a02      	ldrh	r2, [r0, #16]
{
 8001e26:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e28:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8001e2c:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8001e2e:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8001e30:	bf14      	ite	ne
 8001e32:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001e34:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001e36:	a803      	add	r0, sp, #12
 8001e38:	9001      	str	r0, [sp, #4]
 8001e3a:	9400      	str	r4, [sp, #0]
 8001e3c:	4628      	mov	r0, r5
 8001e3e:	f000 ff2b 	bl	8002c98 <xTaskCreate>
 8001e42:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001e44:	bf0c      	ite	eq
 8001e46:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8001e48:	2000      	movne	r0, #0
}
 8001e4a:	b005      	add	sp, #20
 8001e4c:	bd30      	pop	{r4, r5, pc}

08001e4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001e4e:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001e50:	2800      	cmp	r0, #0
 8001e52:	bf08      	it	eq
 8001e54:	2001      	moveq	r0, #1
 8001e56:	f001 fa0d 	bl	8003274 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	bd08      	pop	{r3, pc}

08001e5e <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8001e5e:	2001      	movs	r0, #1
 8001e60:	f000 bcfa 	b.w	8002858 <xQueueCreateMutex>

08001e64 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8001e64:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001e66:	2400      	movs	r4, #0
 8001e68:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8001e6a:	b1e0      	cbz	r0, 8001ea6 <osMutexWait+0x42>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e6c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001e70:	b1a3      	cbz	r3, 8001e9c <osMutexWait+0x38>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8001e72:	aa01      	add	r2, sp, #4
 8001e74:	4621      	mov	r1, r4
 8001e76:	f000 fe15 	bl	8002aa4 <xQueueReceiveFromISR>
 8001e7a:	2801      	cmp	r0, #1
 8001e7c:	d002      	beq.n	8001e84 <osMutexWait+0x20>
      return osErrorOS;
 8001e7e:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001e80:	b002      	add	sp, #8
 8001e82:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8001e84:	9b01      	ldr	r3, [sp, #4]
 8001e86:	b13b      	cbz	r3, 8001e98 <osMutexWait+0x34>
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <osMutexWait+0x48>)
 8001e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	f3bf 8f4f 	dsb	sy
 8001e94:	f3bf 8f6f 	isb	sy
  return osOK;
 8001e98:	2000      	movs	r0, #0
 8001e9a:	e7f1      	b.n	8001e80 <osMutexWait+0x1c>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8001e9c:	f000 fd42 	bl	8002924 <xQueueSemaphoreTake>
 8001ea0:	2801      	cmp	r0, #1
 8001ea2:	d1ec      	bne.n	8001e7e <osMutexWait+0x1a>
 8001ea4:	e7f8      	b.n	8001e98 <osMutexWait+0x34>
    return osErrorParameter;
 8001ea6:	2080      	movs	r0, #128	; 0x80
 8001ea8:	e7ea      	b.n	8001e80 <osMutexWait+0x1c>
 8001eaa:	bf00      	nop
 8001eac:	e000ed04 	.word	0xe000ed04

08001eb0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001eb0:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8001eb2:	2400      	movs	r4, #0
 8001eb4:	9401      	str	r4, [sp, #4]
 8001eb6:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8001eba:	b193      	cbz	r3, 8001ee2 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001ebc:	a901      	add	r1, sp, #4
 8001ebe:	f000 fcdd 	bl	800287c <xQueueGiveFromISR>
 8001ec2:	2801      	cmp	r0, #1
 8001ec4:	d113      	bne.n	8001eee <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001ec6:	9b01      	ldr	r3, [sp, #4]
 8001ec8:	b913      	cbnz	r3, 8001ed0 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8001eca:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8001ecc:	b002      	add	sp, #8
 8001ece:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8001ed0:	4b08      	ldr	r3, [pc, #32]	; (8001ef4 <osSemaphoreRelease+0x44>)
 8001ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	f3bf 8f4f 	dsb	sy
 8001edc:	f3bf 8f6f 	isb	sy
 8001ee0:	e7f3      	b.n	8001eca <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f000 fc01 	bl	80026ec <xQueueGenericSend>
 8001eea:	2801      	cmp	r0, #1
 8001eec:	d0ed      	beq.n	8001eca <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8001eee:	20ff      	movs	r0, #255	; 0xff
 8001ef0:	e7ec      	b.n	8001ecc <osSemaphoreRelease+0x1c>
 8001ef2:	bf00      	nop
 8001ef4:	e000ed04 	.word	0xe000ed04

08001ef8 <osMutexRelease>:
 8001ef8:	f7ff bfda 	b.w	8001eb0 <osSemaphoreRelease>

08001efc <osThreadGetState>:
* @brief  Obtain the state of any thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  the stae of the thread, states are encoded by the osThreadState enumerated type.
*/
osThreadState osThreadGetState(osThreadId thread_id)
{
 8001efc:	b508      	push	{r3, lr}
  eTaskState ThreadState;
  osThreadState result;
  
  ThreadState = eTaskGetState(thread_id);
 8001efe:	f000 ff9b 	bl	8002e38 <eTaskGetState>
 8001f02:	2804      	cmp	r0, #4
 8001f04:	bf9a      	itte	ls
 8001f06:	4b02      	ldrls	r3, [pc, #8]	; (8001f10 <osThreadGetState+0x14>)
 8001f08:	5c18      	ldrbls	r0, [r3, r0]
 8001f0a:	f06f 4000 	mvnhi.w	r0, #2147483648	; 0x80000000
  default:
    result = osThreadError;
  } 
  
  return result;
}
 8001f0e:	bd08      	pop	{r3, pc}
 8001f10:	0800408c 	.word	0x0800408c

08001f14 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8001f14:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8001f16:	f001 fa0b 	bl	8003330 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 8001f1a:	2000      	movs	r0, #0
 8001f1c:	bd08      	pop	{r3, pc}
	...

08001f20 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8001f20:	b508      	push	{r3, lr}
 8001f22:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8001f26:	b16b      	cbz	r3, 8001f44 <osThreadResume+0x24>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8001f28:	f001 f806 	bl	8002f38 <xTaskResumeFromISR>
 8001f2c:	2801      	cmp	r0, #1
 8001f2e:	d107      	bne.n	8001f40 <osThreadResume+0x20>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8001f30:	4b06      	ldr	r3, [pc, #24]	; (8001f4c <osThreadResume+0x2c>)
 8001f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	f3bf 8f4f 	dsb	sy
 8001f3c:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8001f40:	2000      	movs	r0, #0
 8001f42:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 8001f44:	f000 ffb6 	bl	8002eb4 <vTaskResume>
 8001f48:	e7fa      	b.n	8001f40 <osThreadResume+0x20>
 8001f4a:	bf00      	nop
 8001f4c:	e000ed04 	.word	0xe000ed04

08001f50 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f50:	f100 0308 	add.w	r3, r0, #8
 8001f54:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f56:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f5a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f5c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f5e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f60:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f62:	6003      	str	r3, [r0, #0]
 8001f64:	4770      	bx	lr

08001f66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	6103      	str	r3, [r0, #16]
 8001f6a:	4770      	bx	lr

08001f6c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f6c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001f6e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001f78:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f7a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f7c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f7e:	3301      	adds	r3, #1
 8001f80:	6003      	str	r3, [r0, #0]
 8001f82:	4770      	bx	lr

08001f84 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f84:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001f86:	1c53      	adds	r3, r2, #1
{
 8001f88:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001f8a:	d10a      	bne.n	8001fa2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001f8c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001f92:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001f94:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001f96:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001f98:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001f9a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	6003      	str	r3, [r0, #0]
 8001fa0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001fa2:	f100 0308 	add.w	r3, r0, #8
 8001fa6:	685c      	ldr	r4, [r3, #4]
 8001fa8:	6825      	ldr	r5, [r4, #0]
 8001faa:	42aa      	cmp	r2, r5
 8001fac:	d3ef      	bcc.n	8001f8e <vListInsert+0xa>
 8001fae:	4623      	mov	r3, r4
 8001fb0:	e7f9      	b.n	8001fa6 <vListInsert+0x22>

08001fb2 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fb2:	6841      	ldr	r1, [r0, #4]
 8001fb4:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001fb6:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001fb8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001fba:	6882      	ldr	r2, [r0, #8]
 8001fbc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001fbe:	6859      	ldr	r1, [r3, #4]
 8001fc0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001fc2:	bf08      	it	eq
 8001fc4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	3a01      	subs	r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001fd0:	6818      	ldr	r0, [r3, #0]
}
 8001fd2:	4770      	bx	lr

08001fd4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001fd4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <prvTaskExitError+0x3c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	d008      	beq.n	8001ff4 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe6:	f383 8811 	msr	BASEPRI, r3
 8001fea:	f3bf 8f6f 	isb	sy
 8001fee:	f3bf 8f4f 	dsb	sy
 8001ff2:	e7fe      	b.n	8001ff2 <prvTaskExitError+0x1e>
 8001ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff8:	f383 8811 	msr	BASEPRI, r3
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002004:	9b01      	ldr	r3, [sp, #4]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0fc      	beq.n	8002004 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800200a:	b002      	add	sp, #8
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000004 	.word	0x20000004

08002014 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002014:	4808      	ldr	r0, [pc, #32]	; (8002038 <prvPortStartFirstTask+0x24>)
 8002016:	6800      	ldr	r0, [r0, #0]
 8002018:	6800      	ldr	r0, [r0, #0]
 800201a:	f380 8808 	msr	MSP, r0
 800201e:	f04f 0000 	mov.w	r0, #0
 8002022:	f380 8814 	msr	CONTROL, r0
 8002026:	b662      	cpsie	i
 8002028:	b661      	cpsie	f
 800202a:	f3bf 8f4f 	dsb	sy
 800202e:	f3bf 8f6f 	isb	sy
 8002032:	df00      	svc	0
 8002034:	bf00      	nop
 8002036:	0000      	.short	0x0000
 8002038:	e000ed08 	.word	0xe000ed08

0800203c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800203c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800204c <vPortEnableVFP+0x10>
 8002040:	6801      	ldr	r1, [r0, #0]
 8002042:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002046:	6001      	str	r1, [r0, #0]
 8002048:	4770      	bx	lr
 800204a:	0000      	.short	0x0000
 800204c:	e000ed88 	.word	0xe000ed88

08002050 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002054:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002058:	4b07      	ldr	r3, [pc, #28]	; (8002078 <pxPortInitialiseStack+0x28>)
 800205a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800205e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002062:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002066:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800206a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800206e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8002072:	3844      	subs	r0, #68	; 0x44
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	08001fd5 	.word	0x08001fd5
 800207c:	00000000 	.word	0x00000000

08002080 <SVC_Handler>:
	__asm volatile (
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <pxCurrentTCBConst2>)
 8002082:	6819      	ldr	r1, [r3, #0]
 8002084:	6808      	ldr	r0, [r1, #0]
 8002086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800208a:	f380 8809 	msr	PSP, r0
 800208e:	f3bf 8f6f 	isb	sy
 8002092:	f04f 0000 	mov.w	r0, #0
 8002096:	f380 8811 	msr	BASEPRI, r0
 800209a:	4770      	bx	lr
 800209c:	f3af 8000 	nop.w

080020a0 <pxCurrentTCBConst2>:
 80020a0:	20003d64 	.word	0x20003d64

080020a4 <vPortEnterCritical>:
 80020a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a8:	f383 8811 	msr	BASEPRI, r3
 80020ac:	f3bf 8f6f 	isb	sy
 80020b0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80020b4:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <vPortEnterCritical+0x3c>)
 80020b6:	6813      	ldr	r3, [r2, #0]
 80020b8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80020ba:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80020bc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80020be:	d10d      	bne.n	80020dc <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <vPortEnterCritical+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80020c8:	d008      	beq.n	80020dc <vPortEnterCritical+0x38>
 80020ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020ce:	f383 8811 	msr	BASEPRI, r3
 80020d2:	f3bf 8f6f 	isb	sy
 80020d6:	f3bf 8f4f 	dsb	sy
 80020da:	e7fe      	b.n	80020da <vPortEnterCritical+0x36>
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20000004 	.word	0x20000004
 80020e4:	e000ed04 	.word	0xe000ed04

080020e8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80020e8:	4a08      	ldr	r2, [pc, #32]	; (800210c <vPortExitCritical+0x24>)
 80020ea:	6813      	ldr	r3, [r2, #0]
 80020ec:	b943      	cbnz	r3, 8002100 <vPortExitCritical+0x18>
 80020ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f2:	f383 8811 	msr	BASEPRI, r3
 80020f6:	f3bf 8f6f 	isb	sy
 80020fa:	f3bf 8f4f 	dsb	sy
 80020fe:	e7fe      	b.n	80020fe <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8002100:	3b01      	subs	r3, #1
 8002102:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002104:	b90b      	cbnz	r3, 800210a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002106:	f383 8811 	msr	BASEPRI, r3
 800210a:	4770      	bx	lr
 800210c:	20000004 	.word	0x20000004

08002110 <PendSV_Handler>:
	__asm volatile
 8002110:	f3ef 8009 	mrs	r0, PSP
 8002114:	f3bf 8f6f 	isb	sy
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <pxCurrentTCBConst>)
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	f01e 0f10 	tst.w	lr, #16
 8002120:	bf08      	it	eq
 8002122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800212a:	6010      	str	r0, [r2, #0]
 800212c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002130:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002134:	f380 8811 	msr	BASEPRI, r0
 8002138:	f3bf 8f4f 	dsb	sy
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f001 f8bc 	bl	80032bc <vTaskSwitchContext>
 8002144:	f04f 0000 	mov.w	r0, #0
 8002148:	f380 8811 	msr	BASEPRI, r0
 800214c:	bc09      	pop	{r0, r3}
 800214e:	6819      	ldr	r1, [r3, #0]
 8002150:	6808      	ldr	r0, [r1, #0]
 8002152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002156:	f01e 0f10 	tst.w	lr, #16
 800215a:	bf08      	it	eq
 800215c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002160:	f380 8809 	msr	PSP, r0
 8002164:	f3bf 8f6f 	isb	sy
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	f3af 8000 	nop.w

08002170 <pxCurrentTCBConst>:
 8002170:	20003d64 	.word	0x20003d64

08002174 <SysTick_Handler>:
{
 8002174:	b508      	push	{r3, lr}
	__asm volatile
 8002176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800217a:	f383 8811 	msr	BASEPRI, r3
 800217e:	f3bf 8f6f 	isb	sy
 8002182:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8002186:	f000 ff6b 	bl	8003060 <xTaskIncrementTick>
 800218a:	b118      	cbz	r0, 8002194 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <SysTick_Handler+0x28>)
 800218e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002192:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002194:	2300      	movs	r3, #0
 8002196:	f383 8811 	msr	BASEPRI, r3
 800219a:	bd08      	pop	{r3, pc}
 800219c:	e000ed04 	.word	0xe000ed04

080021a0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80021a0:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80021a2:	4909      	ldr	r1, [pc, #36]	; (80021c8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80021a8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80021aa:	4b08      	ldr	r3, [pc, #32]	; (80021cc <vPortSetupTimerInterrupt+0x2c>)
 80021ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80021b6:	4906      	ldr	r1, [pc, #24]	; (80021d0 <vPortSetupTimerInterrupt+0x30>)
 80021b8:	3b01      	subs	r3, #1
 80021ba:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80021bc:	2307      	movs	r3, #7
 80021be:	6013      	str	r3, [r2, #0]
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	e000e010 	.word	0xe000e010
 80021c8:	e000e018 	.word	0xe000e018
 80021cc:	20000008 	.word	0x20000008
 80021d0:	e000e014 	.word	0xe000e014

080021d4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <xPortStartScheduler+0xe8>)
 80021d6:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <xPortStartScheduler+0xec>)
{
 80021d8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80021da:	6819      	ldr	r1, [r3, #0]
 80021dc:	4291      	cmp	r1, r2
 80021de:	d108      	bne.n	80021f2 <xPortStartScheduler+0x1e>
	__asm volatile
 80021e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021e4:	f383 8811 	msr	BASEPRI, r3
 80021e8:	f3bf 8f6f 	isb	sy
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	e7fe      	b.n	80021f0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b33      	ldr	r3, [pc, #204]	; (80022c4 <xPortStartScheduler+0xf0>)
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d108      	bne.n	800220c <xPortStartScheduler+0x38>
 80021fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fe:	f383 8811 	msr	BASEPRI, r3
 8002202:	f3bf 8f6f 	isb	sy
 8002206:	f3bf 8f4f 	dsb	sy
 800220a:	e7fe      	b.n	800220a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800220c:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <xPortStartScheduler+0xf4>)
 800220e:	781a      	ldrb	r2, [r3, #0]
 8002210:	b2d2      	uxtb	r2, r2
 8002212:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002214:	22ff      	movs	r2, #255	; 0xff
 8002216:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002218:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800221a:	4a2c      	ldr	r2, [pc, #176]	; (80022cc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800221c:	b2db      	uxtb	r3, r3
 800221e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002222:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002226:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800222a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800222c:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <xPortStartScheduler+0xfc>)
 800222e:	2207      	movs	r2, #7
 8002230:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002232:	2100      	movs	r1, #0
 8002234:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002238:	0600      	lsls	r0, r0, #24
 800223a:	f102 34ff 	add.w	r4, r2, #4294967295
 800223e:	d40d      	bmi.n	800225c <xPortStartScheduler+0x88>
 8002240:	b101      	cbz	r1, 8002244 <xPortStartScheduler+0x70>
 8002242:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2a03      	cmp	r2, #3
 8002248:	d011      	beq.n	800226e <xPortStartScheduler+0x9a>
 800224a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224e:	f383 8811 	msr	BASEPRI, r3
 8002252:	f3bf 8f6f 	isb	sy
 8002256:	f3bf 8f4f 	dsb	sy
 800225a:	e7fe      	b.n	800225a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800225c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002260:	0052      	lsls	r2, r2, #1
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	f88d 2003 	strb.w	r2, [sp, #3]
 8002268:	2101      	movs	r1, #1
 800226a:	4622      	mov	r2, r4
 800226c:	e7e2      	b.n	8002234 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800226e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002270:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002274:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002276:	9b01      	ldr	r3, [sp, #4]
 8002278:	4a13      	ldr	r2, [pc, #76]	; (80022c8 <xPortStartScheduler+0xf4>)
 800227a:	b2db      	uxtb	r3, r3
 800227c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <xPortStartScheduler+0x100>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002286:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800228e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002290:	f7ff ff86 	bl	80021a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002294:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <xPortStartScheduler+0x104>)
 8002296:	2400      	movs	r4, #0
 8002298:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800229a:	f7ff fecf 	bl	800203c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800229e:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <xPortStartScheduler+0x108>)
 80022a0:	6813      	ldr	r3, [r2, #0]
 80022a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80022a6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80022a8:	f7ff feb4 	bl	8002014 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80022ac:	f001 f806 	bl	80032bc <vTaskSwitchContext>
	prvTaskExitError();
 80022b0:	f7ff fe90 	bl	8001fd4 <prvTaskExitError>
}
 80022b4:	4620      	mov	r0, r4
 80022b6:	b002      	add	sp, #8
 80022b8:	bd10      	pop	{r4, pc}
 80022ba:	bf00      	nop
 80022bc:	e000ed00 	.word	0xe000ed00
 80022c0:	410fc271 	.word	0x410fc271
 80022c4:	410fc270 	.word	0x410fc270
 80022c8:	e000e400 	.word	0xe000e400
 80022cc:	20000144 	.word	0x20000144
 80022d0:	20000148 	.word	0x20000148
 80022d4:	e000ed20 	.word	0xe000ed20
 80022d8:	20000004 	.word	0x20000004
 80022dc:	e000ef34 	.word	0xe000ef34

080022e0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80022e0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80022e4:	2b0f      	cmp	r3, #15
 80022e6:	d90e      	bls.n	8002306 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80022e8:	4a10      	ldr	r2, [pc, #64]	; (800232c <vPortValidateInterruptPriority+0x4c>)
 80022ea:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80022ec:	4a10      	ldr	r2, [pc, #64]	; (8002330 <vPortValidateInterruptPriority+0x50>)
 80022ee:	7812      	ldrb	r2, [r2, #0]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d908      	bls.n	8002306 <vPortValidateInterruptPriority+0x26>
 80022f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f8:	f383 8811 	msr	BASEPRI, r3
 80022fc:	f3bf 8f6f 	isb	sy
 8002300:	f3bf 8f4f 	dsb	sy
 8002304:	e7fe      	b.n	8002304 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <vPortValidateInterruptPriority+0x54>)
 8002308:	4a0b      	ldr	r2, [pc, #44]	; (8002338 <vPortValidateInterruptPriority+0x58>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6812      	ldr	r2, [r2, #0]
 800230e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002312:	4293      	cmp	r3, r2
 8002314:	d908      	bls.n	8002328 <vPortValidateInterruptPriority+0x48>
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	e7fe      	b.n	8002326 <vPortValidateInterruptPriority+0x46>
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e3f0 	.word	0xe000e3f0
 8002330:	20000144 	.word	0x20000144
 8002334:	e000ed0c 	.word	0xe000ed0c
 8002338:	20000148 	.word	0x20000148

0800233c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800233c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <prvInsertBlockIntoFreeList+0x40>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	4282      	cmp	r2, r0
 8002344:	d318      	bcc.n	8002378 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002346:	685c      	ldr	r4, [r3, #4]
 8002348:	1919      	adds	r1, r3, r4
 800234a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800234c:	bf01      	itttt	eq
 800234e:	6841      	ldreq	r1, [r0, #4]
 8002350:	4618      	moveq	r0, r3
 8002352:	1909      	addeq	r1, r1, r4
 8002354:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002356:	6844      	ldr	r4, [r0, #4]
 8002358:	1901      	adds	r1, r0, r4
 800235a:	428a      	cmp	r2, r1
 800235c:	d107      	bne.n	800236e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800235e:	4908      	ldr	r1, [pc, #32]	; (8002380 <prvInsertBlockIntoFreeList+0x44>)
 8002360:	6809      	ldr	r1, [r1, #0]
 8002362:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002364:	bf1f      	itttt	ne
 8002366:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002368:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800236a:	1909      	addne	r1, r1, r4
 800236c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800236e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002370:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002372:	bf18      	it	ne
 8002374:	6018      	strne	r0, [r3, #0]
 8002376:	bd10      	pop	{r4, pc}
 8002378:	4613      	mov	r3, r2
 800237a:	e7e1      	b.n	8002340 <prvInsertBlockIntoFreeList+0x4>
 800237c:	20003d5c 	.word	0x20003d5c
 8002380:	2000014c 	.word	0x2000014c

08002384 <pvPortMalloc>:
{
 8002384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002388:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800238a:	f000 fe61 	bl	8003050 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800238e:	493e      	ldr	r1, [pc, #248]	; (8002488 <pvPortMalloc+0x104>)
 8002390:	4d3e      	ldr	r5, [pc, #248]	; (800248c <pvPortMalloc+0x108>)
 8002392:	680b      	ldr	r3, [r1, #0]
 8002394:	bb0b      	cbnz	r3, 80023da <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002396:	4a3e      	ldr	r2, [pc, #248]	; (8002490 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002398:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800239a:	bf1f      	itttt	ne
 800239c:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800239e:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80023a2:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80023a6:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023a8:	bf14      	ite	ne
 80023aa:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80023ac:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80023b0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80023b2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80023b4:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80023b8:	4e36      	ldr	r6, [pc, #216]	; (8002494 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80023ba:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80023bc:	2000      	movs	r0, #0
 80023be:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80023c0:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80023c2:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80023c4:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80023c6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80023c8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023ca:	4b33      	ldr	r3, [pc, #204]	; (8002498 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80023cc:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023ce:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80023d0:	4b32      	ldr	r3, [pc, #200]	; (800249c <pvPortMalloc+0x118>)
 80023d2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80023d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80023d8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80023da:	682f      	ldr	r7, [r5, #0]
 80023dc:	4227      	tst	r7, r4
 80023de:	d116      	bne.n	800240e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80023e0:	2c00      	cmp	r4, #0
 80023e2:	d041      	beq.n	8002468 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80023e4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80023e8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80023ea:	bf1c      	itt	ne
 80023ec:	f023 0307 	bicne.w	r3, r3, #7
 80023f0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80023f2:	b163      	cbz	r3, 800240e <pvPortMalloc+0x8a>
 80023f4:	4a29      	ldr	r2, [pc, #164]	; (800249c <pvPortMalloc+0x118>)
 80023f6:	6816      	ldr	r6, [r2, #0]
 80023f8:	42b3      	cmp	r3, r6
 80023fa:	4690      	mov	r8, r2
 80023fc:	d807      	bhi.n	800240e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80023fe:	4a25      	ldr	r2, [pc, #148]	; (8002494 <pvPortMalloc+0x110>)
 8002400:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002402:	6868      	ldr	r0, [r5, #4]
 8002404:	4283      	cmp	r3, r0
 8002406:	d804      	bhi.n	8002412 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002408:	6809      	ldr	r1, [r1, #0]
 800240a:	428d      	cmp	r5, r1
 800240c:	d107      	bne.n	800241e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800240e:	2400      	movs	r4, #0
 8002410:	e02a      	b.n	8002468 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002412:	682c      	ldr	r4, [r5, #0]
 8002414:	2c00      	cmp	r4, #0
 8002416:	d0f7      	beq.n	8002408 <pvPortMalloc+0x84>
 8002418:	462a      	mov	r2, r5
 800241a:	4625      	mov	r5, r4
 800241c:	e7f1      	b.n	8002402 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800241e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002420:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002422:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002424:	1ac2      	subs	r2, r0, r3
 8002426:	2a10      	cmp	r2, #16
 8002428:	d90f      	bls.n	800244a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800242a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800242c:	0741      	lsls	r1, r0, #29
 800242e:	d008      	beq.n	8002442 <pvPortMalloc+0xbe>
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	e7fe      	b.n	8002440 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002442:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002444:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002446:	f7ff ff79 	bl	800233c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800244a:	4913      	ldr	r1, [pc, #76]	; (8002498 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800244c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800244e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002450:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002452:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002454:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8002456:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800245a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800245e:	bf38      	it	cc
 8002460:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002462:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002464:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002466:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8002468:	f000 fe8c 	bl	8003184 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800246c:	0763      	lsls	r3, r4, #29
 800246e:	d008      	beq.n	8002482 <pvPortMalloc+0xfe>
 8002470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002474:	f383 8811 	msr	BASEPRI, r3
 8002478:	f3bf 8f6f 	isb	sy
 800247c:	f3bf 8f4f 	dsb	sy
 8002480:	e7fe      	b.n	8002480 <pvPortMalloc+0xfc>
}
 8002482:	4620      	mov	r0, r4
 8002484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002488:	2000014c 	.word	0x2000014c
 800248c:	20003d50 	.word	0x20003d50
 8002490:	20000150 	.word	0x20000150
 8002494:	20003d5c 	.word	0x20003d5c
 8002498:	20003d58 	.word	0x20003d58
 800249c:	20003d54 	.word	0x20003d54

080024a0 <vPortFree>:
{
 80024a0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80024a2:	4604      	mov	r4, r0
 80024a4:	b370      	cbz	r0, 8002504 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80024a6:	4a18      	ldr	r2, [pc, #96]	; (8002508 <vPortFree+0x68>)
 80024a8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80024ac:	6812      	ldr	r2, [r2, #0]
 80024ae:	4213      	tst	r3, r2
 80024b0:	d108      	bne.n	80024c4 <vPortFree+0x24>
 80024b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b6:	f383 8811 	msr	BASEPRI, r3
 80024ba:	f3bf 8f6f 	isb	sy
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	e7fe      	b.n	80024c2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80024c4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80024c8:	b141      	cbz	r1, 80024dc <vPortFree+0x3c>
 80024ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ce:	f383 8811 	msr	BASEPRI, r3
 80024d2:	f3bf 8f6f 	isb	sy
 80024d6:	f3bf 8f4f 	dsb	sy
 80024da:	e7fe      	b.n	80024da <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80024dc:	ea23 0302 	bic.w	r3, r3, r2
 80024e0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80024e4:	f000 fdb4 	bl	8003050 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024e8:	4a08      	ldr	r2, [pc, #32]	; (800250c <vPortFree+0x6c>)
 80024ea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80024ee:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024f0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024f4:	440b      	add	r3, r1
 80024f6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024f8:	f7ff ff20 	bl	800233c <prvInsertBlockIntoFreeList>
}
 80024fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002500:	f000 be40 	b.w	8003184 <xTaskResumeAll>
 8002504:	bd10      	pop	{r4, pc}
 8002506:	bf00      	nop
 8002508:	20003d50 	.word	0x20003d50
 800250c:	20003d54 	.word	0x20003d54

08002510 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002510:	b510      	push	{r4, lr}
 8002512:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002514:	f7ff fdc6 	bl	80020a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002518:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800251a:	f7ff fde5 	bl	80020e8 <vPortExitCritical>

	return xReturn;
}
 800251e:	fab4 f084 	clz	r0, r4
 8002522:	0940      	lsrs	r0, r0, #5
 8002524:	bd10      	pop	{r4, pc}

08002526 <prvCopyDataToQueue>:
{
 8002526:	b570      	push	{r4, r5, r6, lr}
 8002528:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800252a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800252c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800252e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002530:	b942      	cbnz	r2, 8002544 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002532:	6805      	ldr	r5, [r0, #0]
 8002534:	b99d      	cbnz	r5, 800255e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002536:	6840      	ldr	r0, [r0, #4]
 8002538:	f001 f874 	bl	8003624 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800253c:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800253e:	3601      	adds	r6, #1
 8002540:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002542:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002544:	b96d      	cbnz	r5, 8002562 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002546:	6880      	ldr	r0, [r0, #8]
 8002548:	f001 fcf6 	bl	8003f38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800254c:	68a3      	ldr	r3, [r4, #8]
 800254e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002550:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002552:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002554:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002556:	4293      	cmp	r3, r2
 8002558:	d301      	bcc.n	800255e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800255a:	6823      	ldr	r3, [r4, #0]
 800255c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800255e:	2000      	movs	r0, #0
 8002560:	e7ed      	b.n	800253e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002562:	68c0      	ldr	r0, [r0, #12]
 8002564:	f001 fce8 	bl	8003f38 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002568:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800256a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800256c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800256e:	425b      	negs	r3, r3
 8002570:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002572:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002574:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002576:	bf3e      	ittt	cc
 8002578:	6862      	ldrcc	r2, [r4, #4]
 800257a:	189b      	addcc	r3, r3, r2
 800257c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800257e:	2d02      	cmp	r5, #2
 8002580:	d1ed      	bne.n	800255e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002582:	b10e      	cbz	r6, 8002588 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002584:	3e01      	subs	r6, #1
 8002586:	e7ea      	b.n	800255e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002588:	4630      	mov	r0, r6
 800258a:	e7d8      	b.n	800253e <prvCopyDataToQueue+0x18>

0800258c <prvCopyDataFromQueue>:
{
 800258c:	4603      	mov	r3, r0
 800258e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002592:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002594:	b162      	cbz	r2, 80025b0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002596:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002598:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800259a:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800259c:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800259e:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80025a0:	bf24      	itt	cs
 80025a2:	6819      	ldrcs	r1, [r3, #0]
 80025a4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80025a6:	68d9      	ldr	r1, [r3, #12]
}
 80025a8:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80025ac:	f001 bcc4 	b.w	8003f38 <memcpy>
}
 80025b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <prvUnlockQueue>:
{
 80025b6:	b570      	push	{r4, r5, r6, lr}
 80025b8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80025ba:	f7ff fd73 	bl	80020a4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80025be:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025c2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80025c6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	dc14      	bgt.n	80025f6 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80025cc:	23ff      	movs	r3, #255	; 0xff
 80025ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80025d2:	f7ff fd89 	bl	80020e8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80025d6:	f7ff fd65 	bl	80020a4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80025da:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025de:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80025e2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80025e4:	2d00      	cmp	r5, #0
 80025e6:	dc12      	bgt.n	800260e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80025e8:	23ff      	movs	r3, #255	; 0xff
 80025ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80025ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80025f2:	f7ff bd79 	b.w	80020e8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0e7      	beq.n	80025cc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025fc:	4630      	mov	r0, r6
 80025fe:	f000 ff1d 	bl	800343c <xTaskRemoveFromEventList>
 8002602:	b108      	cbz	r0, 8002608 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002604:	f000 ffa4 	bl	8003550 <vTaskMissedYield>
 8002608:	3d01      	subs	r5, #1
 800260a:	b26d      	sxtb	r5, r5
 800260c:	e7dc      	b.n	80025c8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800260e:	6923      	ldr	r3, [r4, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d0e9      	beq.n	80025e8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002614:	4630      	mov	r0, r6
 8002616:	f000 ff11 	bl	800343c <xTaskRemoveFromEventList>
 800261a:	b108      	cbz	r0, 8002620 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800261c:	f000 ff98 	bl	8003550 <vTaskMissedYield>
 8002620:	3d01      	subs	r5, #1
 8002622:	b26d      	sxtb	r5, r5
 8002624:	e7de      	b.n	80025e4 <prvUnlockQueue+0x2e>
	...

08002628 <xQueueGenericReset>:
{
 8002628:	b538      	push	{r3, r4, r5, lr}
 800262a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800262c:	4604      	mov	r4, r0
 800262e:	b940      	cbnz	r0, 8002642 <xQueueGenericReset+0x1a>
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	e7fe      	b.n	8002640 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002642:	f7ff fd2f 	bl	80020a4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002646:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002648:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800264a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800264c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800264e:	4343      	muls	r3, r0
 8002650:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002652:	1a1b      	subs	r3, r3, r0
 8002654:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002656:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002658:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800265a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800265c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800265e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002660:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002664:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002668:	b995      	cbnz	r5, 8002690 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800266a:	6923      	ldr	r3, [r4, #16]
 800266c:	b163      	cbz	r3, 8002688 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800266e:	f104 0010 	add.w	r0, r4, #16
 8002672:	f000 fee3 	bl	800343c <xTaskRemoveFromEventList>
 8002676:	b138      	cbz	r0, 8002688 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8002678:	4b0a      	ldr	r3, [pc, #40]	; (80026a4 <xQueueGenericReset+0x7c>)
 800267a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800267e:	601a      	str	r2, [r3, #0]
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002688:	f7ff fd2e 	bl	80020e8 <vPortExitCritical>
}
 800268c:	2001      	movs	r0, #1
 800268e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002690:	f104 0010 	add.w	r0, r4, #16
 8002694:	f7ff fc5c 	bl	8001f50 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002698:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800269c:	f7ff fc58 	bl	8001f50 <vListInitialise>
 80026a0:	e7f2      	b.n	8002688 <xQueueGenericReset+0x60>
 80026a2:	bf00      	nop
 80026a4:	e000ed04 	.word	0xe000ed04

080026a8 <xQueueGenericCreate>:
	{
 80026a8:	b570      	push	{r4, r5, r6, lr}
 80026aa:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026ac:	4606      	mov	r6, r0
 80026ae:	b940      	cbnz	r0, 80026c2 <xQueueGenericCreate+0x1a>
 80026b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b4:	f383 8811 	msr	BASEPRI, r3
 80026b8:	f3bf 8f6f 	isb	sy
 80026bc:	f3bf 8f4f 	dsb	sy
 80026c0:	e7fe      	b.n	80026c0 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026c2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80026c4:	3048      	adds	r0, #72	; 0x48
 80026c6:	f7ff fe5d 	bl	8002384 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80026ca:	4604      	mov	r4, r0
 80026cc:	b138      	cbz	r0, 80026de <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80026ce:	b945      	cbnz	r5, 80026e2 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026d0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80026d2:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80026d4:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026d6:	2101      	movs	r1, #1
 80026d8:	4620      	mov	r0, r4
 80026da:	f7ff ffa5 	bl	8002628 <xQueueGenericReset>
	}
 80026de:	4620      	mov	r0, r4
 80026e0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80026e2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026e6:	6003      	str	r3, [r0, #0]
 80026e8:	e7f3      	b.n	80026d2 <xQueueGenericCreate+0x2a>
	...

080026ec <xQueueGenericSend>:
{
 80026ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026f0:	4689      	mov	r9, r1
 80026f2:	9201      	str	r2, [sp, #4]
 80026f4:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80026f6:	4604      	mov	r4, r0
 80026f8:	b940      	cbnz	r0, 800270c <xQueueGenericSend+0x20>
 80026fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fe:	f383 8811 	msr	BASEPRI, r3
 8002702:	f3bf 8f6f 	isb	sy
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	e7fe      	b.n	800270a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800270c:	2900      	cmp	r1, #0
 800270e:	f040 8088 	bne.w	8002822 <xQueueGenericSend+0x136>
 8002712:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 8084 	beq.w	8002822 <xQueueGenericSend+0x136>
 800271a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271e:	f383 8811 	msr	BASEPRI, r3
 8002722:	f3bf 8f6f 	isb	sy
 8002726:	f3bf 8f4f 	dsb	sy
 800272a:	e7fe      	b.n	800272a <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800272c:	9e01      	ldr	r6, [sp, #4]
 800272e:	2e00      	cmp	r6, #0
 8002730:	f000 8082 	beq.w	8002838 <xQueueGenericSend+0x14c>
 8002734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	e7fe      	b.n	8002744 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002746:	9d01      	ldr	r5, [sp, #4]
 8002748:	b91d      	cbnz	r5, 8002752 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800274a:	f7ff fccd 	bl	80020e8 <vPortExitCritical>
			return errQUEUE_FULL;
 800274e:	2000      	movs	r0, #0
 8002750:	e058      	b.n	8002804 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8002752:	b916      	cbnz	r6, 800275a <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002754:	a802      	add	r0, sp, #8
 8002756:	f000 feb3 	bl	80034c0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800275a:	f7ff fcc5 	bl	80020e8 <vPortExitCritical>
		vTaskSuspendAll();
 800275e:	f000 fc77 	bl	8003050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002762:	f7ff fc9f 	bl	80020a4 <vPortEnterCritical>
 8002766:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800276a:	2bff      	cmp	r3, #255	; 0xff
 800276c:	bf08      	it	eq
 800276e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8002772:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002776:	2bff      	cmp	r3, #255	; 0xff
 8002778:	bf08      	it	eq
 800277a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800277e:	f7ff fcb3 	bl	80020e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002782:	a901      	add	r1, sp, #4
 8002784:	a802      	add	r0, sp, #8
 8002786:	f000 fea7 	bl	80034d8 <xTaskCheckForTimeOut>
 800278a:	2800      	cmp	r0, #0
 800278c:	d143      	bne.n	8002816 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800278e:	f7ff fc89 	bl	80020a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002792:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8002794:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002796:	f7ff fca7 	bl	80020e8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800279a:	42ae      	cmp	r6, r5
 800279c:	d135      	bne.n	800280a <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800279e:	9901      	ldr	r1, [sp, #4]
 80027a0:	f104 0010 	add.w	r0, r4, #16
 80027a4:	f000 fe30 	bl	8003408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7ff ff04 	bl	80025b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80027ae:	f000 fce9 	bl	8003184 <xTaskResumeAll>
 80027b2:	b938      	cbnz	r0, 80027c4 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 80027b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80027b8:	f8ca 3000 	str.w	r3, [sl]
 80027bc:	f3bf 8f4f 	dsb	sy
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80027c6:	f7ff fc6d 	bl	80020a4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80027ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80027cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d301      	bcc.n	80027d6 <xQueueGenericSend+0xea>
 80027d2:	2f02      	cmp	r7, #2
 80027d4:	d1b7      	bne.n	8002746 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027d6:	463a      	mov	r2, r7
 80027d8:	4649      	mov	r1, r9
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff fea3 	bl	8002526 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027e2:	b11b      	cbz	r3, 80027ec <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027e4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80027e8:	f000 fe28 	bl	800343c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80027ec:	b138      	cbz	r0, 80027fe <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80027ee:	4b19      	ldr	r3, [pc, #100]	; (8002854 <xQueueGenericSend+0x168>)
 80027f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80027fe:	f7ff fc73 	bl	80020e8 <vPortExitCritical>
				return pdPASS;
 8002802:	2001      	movs	r0, #1
}
 8002804:	b004      	add	sp, #16
 8002806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800280a:	4620      	mov	r0, r4
 800280c:	f7ff fed3 	bl	80025b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002810:	f000 fcb8 	bl	8003184 <xTaskResumeAll>
 8002814:	e7d6      	b.n	80027c4 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff fecd 	bl	80025b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800281c:	f000 fcb2 	bl	8003184 <xTaskResumeAll>
 8002820:	e795      	b.n	800274e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002822:	2f02      	cmp	r7, #2
 8002824:	d102      	bne.n	800282c <xQueueGenericSend+0x140>
 8002826:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002828:	2b01      	cmp	r3, #1
 800282a:	d10a      	bne.n	8002842 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800282c:	f000 fe96 	bl	800355c <xTaskGetSchedulerState>
 8002830:	2800      	cmp	r0, #0
 8002832:	f43f af7b 	beq.w	800272c <xQueueGenericSend+0x40>
 8002836:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8002838:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800283c:	f8df a014 	ldr.w	sl, [pc, #20]	; 8002854 <xQueueGenericSend+0x168>
 8002840:	e7c1      	b.n	80027c6 <xQueueGenericSend+0xda>
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	e7fe      	b.n	8002852 <xQueueGenericSend+0x166>
 8002854:	e000ed04 	.word	0xe000ed04

08002858 <xQueueCreateMutex>:
	{
 8002858:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800285a:	4602      	mov	r2, r0
 800285c:	2100      	movs	r1, #0
 800285e:	2001      	movs	r0, #1
 8002860:	f7ff ff22 	bl	80026a8 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8002864:	4604      	mov	r4, r0
 8002866:	b138      	cbz	r0, 8002878 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8002868:	2300      	movs	r3, #0
 800286a:	6043      	str	r3, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800286c:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800286e:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002870:	461a      	mov	r2, r3
 8002872:	4619      	mov	r1, r3
 8002874:	f7ff ff3a 	bl	80026ec <xQueueGenericSend>
	}
 8002878:	4620      	mov	r0, r4
 800287a:	bd10      	pop	{r4, pc}

0800287c <xQueueGiveFromISR>:
{
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002880:	4604      	mov	r4, r0
 8002882:	b940      	cbnz	r0, 8002896 <xQueueGiveFromISR+0x1a>
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	e7fe      	b.n	8002894 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002896:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002898:	b143      	cbz	r3, 80028ac <xQueueGiveFromISR+0x30>
 800289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289e:	f383 8811 	msr	BASEPRI, r3
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	e7fe      	b.n	80028aa <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80028ac:	6803      	ldr	r3, [r0, #0]
 80028ae:	b90b      	cbnz	r3, 80028b4 <xQueueGiveFromISR+0x38>
 80028b0:	6843      	ldr	r3, [r0, #4]
 80028b2:	bb73      	cbnz	r3, 8002912 <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028b4:	f7ff fd14 	bl	80022e0 <vPortValidateInterruptPriority>
	__asm volatile
 80028b8:	f3ef 8611 	mrs	r6, BASEPRI
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028cc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80028ce:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d301      	bcc.n	80028d8 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 80028d4:	2000      	movs	r0, #0
 80028d6:	e014      	b.n	8002902 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 80028d8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028dc:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 80028de:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80028e0:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	d110      	bne.n	8002908 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028e8:	b90b      	cbnz	r3, 80028ee <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 80028ea:	2001      	movs	r0, #1
 80028ec:	e009      	b.n	8002902 <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028ee:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80028f2:	f000 fda3 	bl	800343c <xTaskRemoveFromEventList>
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d0f7      	beq.n	80028ea <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 80028fa:	2d00      	cmp	r5, #0
 80028fc:	d0f5      	beq.n	80028ea <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80028fe:	2001      	movs	r0, #1
 8002900:	6028      	str	r0, [r5, #0]
	__asm volatile
 8002902:	f386 8811 	msr	BASEPRI, r6
}
 8002906:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002908:	3301      	adds	r3, #1
 800290a:	b25b      	sxtb	r3, r3
 800290c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002910:	e7eb      	b.n	80028ea <xQueueGiveFromISR+0x6e>
	__asm volatile
 8002912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	e7fe      	b.n	8002922 <xQueueGiveFromISR+0xa6>

08002924 <xQueueSemaphoreTake>:
{
 8002924:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8002928:	4604      	mov	r4, r0
{
 800292a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800292c:	b940      	cbnz	r0, 8002940 <xQueueSemaphoreTake+0x1c>
 800292e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002932:	f383 8811 	msr	BASEPRI, r3
 8002936:	f3bf 8f6f 	isb	sy
 800293a:	f3bf 8f4f 	dsb	sy
 800293e:	e7fe      	b.n	800293e <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002940:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002942:	b145      	cbz	r5, 8002956 <xQueueSemaphoreTake+0x32>
 8002944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	e7fe      	b.n	8002954 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002956:	f000 fe01 	bl	800355c <xTaskGetSchedulerState>
 800295a:	b918      	cbnz	r0, 8002964 <xQueueSemaphoreTake+0x40>
 800295c:	9d01      	ldr	r5, [sp, #4]
 800295e:	2d00      	cmp	r5, #0
 8002960:	f040 8095 	bne.w	8002a8e <xQueueSemaphoreTake+0x16a>
					portYIELD_WITHIN_API();
 8002964:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8002aa0 <xQueueSemaphoreTake+0x17c>
 8002968:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800296a:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800296c:	f7ff fb9a 	bl	80020a4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002970:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002972:	b1e3      	cbz	r3, 80029ae <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002974:	3b01      	subs	r3, #1
 8002976:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002978:	6823      	ldr	r3, [r4, #0]
 800297a:	b913      	cbnz	r3, 8002982 <xQueueSemaphoreTake+0x5e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800297c:	f000 fefc 	bl	8003778 <pvTaskIncrementMutexHeldCount>
 8002980:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002982:	6923      	ldr	r3, [r4, #16]
 8002984:	b163      	cbz	r3, 80029a0 <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002986:	f104 0010 	add.w	r0, r4, #16
 800298a:	f000 fd57 	bl	800343c <xTaskRemoveFromEventList>
 800298e:	b138      	cbz	r0, 80029a0 <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 8002990:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <xQueueSemaphoreTake+0x17c>)
 8002992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80029a0:	f7ff fba2 	bl	80020e8 <vPortExitCritical>
				return pdPASS;
 80029a4:	2501      	movs	r5, #1
}
 80029a6:	4628      	mov	r0, r5
 80029a8:	b004      	add	sp, #16
 80029aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 80029ae:	9b01      	ldr	r3, [sp, #4]
 80029b0:	b963      	cbnz	r3, 80029cc <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80029b2:	b145      	cbz	r5, 80029c6 <xQueueSemaphoreTake+0xa2>
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	e7fe      	b.n	80029c4 <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 80029c6:	f7ff fb8f 	bl	80020e8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80029ca:	e7ec      	b.n	80029a6 <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 80029cc:	b916      	cbnz	r6, 80029d4 <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029ce:	a802      	add	r0, sp, #8
 80029d0:	f000 fd76 	bl	80034c0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80029d4:	f7ff fb88 	bl	80020e8 <vPortExitCritical>
		vTaskSuspendAll();
 80029d8:	f000 fb3a 	bl	8003050 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80029dc:	f7ff fb62 	bl	80020a4 <vPortEnterCritical>
 80029e0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80029e4:	2bff      	cmp	r3, #255	; 0xff
 80029e6:	bf08      	it	eq
 80029e8:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80029ec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80029f0:	2bff      	cmp	r3, #255	; 0xff
 80029f2:	bf08      	it	eq
 80029f4:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80029f8:	f7ff fb76 	bl	80020e8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029fc:	a901      	add	r1, sp, #4
 80029fe:	a802      	add	r0, sp, #8
 8002a00:	f000 fd6a 	bl	80034d8 <xTaskCheckForTimeOut>
 8002a04:	bb40      	cbnz	r0, 8002a58 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a06:	4620      	mov	r0, r4
 8002a08:	f7ff fd82 	bl	8002510 <prvIsQueueEmpty>
 8002a0c:	b1f0      	cbz	r0, 8002a4c <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	b93b      	cbnz	r3, 8002a22 <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 8002a12:	f7ff fb47 	bl	80020a4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8002a16:	6860      	ldr	r0, [r4, #4]
 8002a18:	f000 fdb0 	bl	800357c <xTaskPriorityInherit>
 8002a1c:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8002a1e:	f7ff fb63 	bl	80020e8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002a22:	9901      	ldr	r1, [sp, #4]
 8002a24:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002a28:	f000 fcee 	bl	8003408 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f7ff fdc2 	bl	80025b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002a32:	f000 fba7 	bl	8003184 <xTaskResumeAll>
 8002a36:	b938      	cbnz	r0, 8002a48 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 8002a38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002a3c:	f8c8 3000 	str.w	r3, [r8]
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	f3bf 8f6f 	isb	sy
 8002a48:	2601      	movs	r6, #1
 8002a4a:	e78f      	b.n	800296c <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7ff fdb2 	bl	80025b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a52:	f000 fb97 	bl	8003184 <xTaskResumeAll>
 8002a56:	e7f7      	b.n	8002a48 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f7ff fdac 	bl	80025b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a5e:	f000 fb91 	bl	8003184 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a62:	4620      	mov	r0, r4
 8002a64:	f7ff fd54 	bl	8002510 <prvIsQueueEmpty>
 8002a68:	2800      	cmp	r0, #0
 8002a6a:	d0ed      	beq.n	8002a48 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 8002a6c:	2d00      	cmp	r5, #0
 8002a6e:	d09a      	beq.n	80029a6 <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 8002a70:	f7ff fb18 	bl	80020a4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8002a74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002a76:	b119      	cbz	r1, 8002a80 <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002a78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a7a:	6819      	ldr	r1, [r3, #0]
 8002a7c:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8002a80:	6860      	ldr	r0, [r4, #4]
 8002a82:	f000 fe1f 	bl	80036c4 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8002a86:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8002a88:	f7ff fb2e 	bl	80020e8 <vPortExitCritical>
 8002a8c:	e78b      	b.n	80029a6 <xQueueSemaphoreTake+0x82>
 8002a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	e7fe      	b.n	8002a9e <xQueueSemaphoreTake+0x17a>
 8002aa0:	e000ed04 	.word	0xe000ed04

08002aa4 <xQueueReceiveFromISR>:
{
 8002aa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002aa8:	4689      	mov	r9, r1
 8002aaa:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002aac:	4605      	mov	r5, r0
 8002aae:	b940      	cbnz	r0, 8002ac2 <xQueueReceiveFromISR+0x1e>
 8002ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	e7fe      	b.n	8002ac0 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ac2:	bb71      	cbnz	r1, 8002b22 <xQueueReceiveFromISR+0x7e>
 8002ac4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002ac6:	b363      	cbz	r3, 8002b22 <xQueueReceiveFromISR+0x7e>
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	e7fe      	b.n	8002ad8 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002ada:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ade:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8002ae0:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ae2:	4628      	mov	r0, r5
 8002ae4:	f7ff fd52 	bl	800258c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ae8:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8002aea:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002aec:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8002aee:	d113      	bne.n	8002b18 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002af0:	692b      	ldr	r3, [r5, #16]
 8002af2:	b90b      	cbnz	r3, 8002af8 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8002af4:	2001      	movs	r0, #1
 8002af6:	e00b      	b.n	8002b10 <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002af8:	f105 0010 	add.w	r0, r5, #16
 8002afc:	f000 fc9e 	bl	800343c <xTaskRemoveFromEventList>
 8002b00:	2800      	cmp	r0, #0
 8002b02:	d0f7      	beq.n	8002af4 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 8002b04:	f1b8 0f00 	cmp.w	r8, #0
 8002b08:	d0f4      	beq.n	8002af4 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8002b10:	f387 8811 	msr	BASEPRI, r7
}
 8002b14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002b18:	3601      	adds	r6, #1
 8002b1a:	b276      	sxtb	r6, r6
 8002b1c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8002b20:	e7e8      	b.n	8002af4 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b22:	f7ff fbdd 	bl	80022e0 <vPortValidateInterruptPriority>
	__asm volatile
 8002b26:	f3ef 8711 	mrs	r7, BASEPRI
 8002b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2e:	f383 8811 	msr	BASEPRI, r3
 8002b32:	f3bf 8f6f 	isb	sy
 8002b36:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b3a:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b3c:	2c00      	cmp	r4, #0
 8002b3e:	d1cc      	bne.n	8002ada <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 8002b40:	4620      	mov	r0, r4
 8002b42:	e7e5      	b.n	8002b10 <xQueueReceiveFromISR+0x6c>

08002b44 <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8002b44:	b940      	cbnz	r0, 8002b58 <prvTaskIsTaskSuspended+0x14>
	__asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	e7fe      	b.n	8002b56 <prvTaskIsTaskSuspended+0x12>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002b58:	6942      	ldr	r2, [r0, #20]
 8002b5a:	4b06      	ldr	r3, [pc, #24]	; (8002b74 <prvTaskIsTaskSuspended+0x30>)
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <prvTaskIsTaskSuspended+0x20>
	BaseType_t xReturn = pdFALSE;
 8002b60:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002b62:	4770      	bx	lr
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002b64:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002b66:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <prvTaskIsTaskSuspended+0x34>)
 8002b68:	4298      	cmp	r0, r3
 8002b6a:	d0f9      	beq.n	8002b60 <prvTaskIsTaskSuspended+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8002b6c:	fab0 f080 	clz	r0, r0
 8002b70:	0940      	lsrs	r0, r0, #5
		return xReturn;
 8002b72:	4770      	bx	lr
 8002b74:	20003e60 	.word	0x20003e60
 8002b78:	20003e48 	.word	0x20003e48

08002b7c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b7c:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <prvResetNextTaskUnblockTime+0x1c>)
 8002b7e:	6813      	ldr	r3, [r2, #0]
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <prvResetNextTaskUnblockTime+0x20>)
 8002b84:	b919      	cbnz	r1, 8002b8e <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002b86:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b8e:	6812      	ldr	r2, [r2, #0]
 8002b90:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002b92:	68d2      	ldr	r2, [r2, #12]
 8002b94:	6852      	ldr	r2, [r2, #4]
 8002b96:	e7f8      	b.n	8002b8a <prvResetNextTaskUnblockTime+0xe>
 8002b98:	20003d68 	.word	0x20003d68
 8002b9c:	20003e40 	.word	0x20003e40

08002ba0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002ba4:	4e1b      	ldr	r6, [pc, #108]	; (8002c14 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8002ba6:	681d      	ldr	r5, [r3, #0]
{
 8002ba8:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002baa:	6830      	ldr	r0, [r6, #0]
 8002bac:	3004      	adds	r0, #4
{
 8002bae:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002bb0:	f7ff f9ff 	bl	8001fb2 <uxListRemove>
 8002bb4:	4633      	mov	r3, r6
 8002bb6:	b940      	cbnz	r0, 8002bca <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002bb8:	6831      	ldr	r1, [r6, #0]
 8002bba:	4e17      	ldr	r6, [pc, #92]	; (8002c18 <prvAddCurrentTaskToDelayedList+0x78>)
 8002bbc:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8002bbe:	6832      	ldr	r2, [r6, #0]
 8002bc0:	2001      	movs	r0, #1
 8002bc2:	4088      	lsls	r0, r1
 8002bc4:	ea22 0200 	bic.w	r2, r2, r0
 8002bc8:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002bca:	1c62      	adds	r2, r4, #1
 8002bcc:	d107      	bne.n	8002bde <prvAddCurrentTaskToDelayedList+0x3e>
 8002bce:	b137      	cbz	r7, 8002bde <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bd0:	6819      	ldr	r1, [r3, #0]
 8002bd2:	4812      	ldr	r0, [pc, #72]	; (8002c1c <prvAddCurrentTaskToDelayedList+0x7c>)
 8002bd4:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002bd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bda:	f7ff b9c7 	b.w	8001f6c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002bde:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002be0:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8002be2:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002be4:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8002be6:	d907      	bls.n	8002bf8 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002be8:	4a0d      	ldr	r2, [pc, #52]	; (8002c20 <prvAddCurrentTaskToDelayedList+0x80>)
 8002bea:	6810      	ldr	r0, [r2, #0]
 8002bec:	6819      	ldr	r1, [r3, #0]
}
 8002bee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bf2:	3104      	adds	r1, #4
 8002bf4:	f7ff b9c6 	b.w	8001f84 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <prvAddCurrentTaskToDelayedList+0x84>)
 8002bfa:	6810      	ldr	r0, [r2, #0]
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	3104      	adds	r1, #4
 8002c00:	f7ff f9c0 	bl	8001f84 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002c04:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <prvAddCurrentTaskToDelayedList+0x88>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8002c0a:	bf38      	it	cc
 8002c0c:	601c      	strcc	r4, [r3, #0]
 8002c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c10:	20003e88 	.word	0x20003e88
 8002c14:	20003d64 	.word	0x20003d64
 8002c18:	20003e10 	.word	0x20003e10
 8002c1c:	20003e60 	.word	0x20003e60
 8002c20:	20003d6c 	.word	0x20003d6c
 8002c24:	20003d68 	.word	0x20003d68
 8002c28:	20003e40 	.word	0x20003e40

08002c2c <prvIdleTask>:
{
 8002c2c:	b580      	push	{r7, lr}
				taskYIELD();
 8002c2e:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8002c94 <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c32:	4f14      	ldr	r7, [pc, #80]	; (8002c84 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c34:	4c14      	ldr	r4, [pc, #80]	; (8002c88 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8002c36:	4e15      	ldr	r6, [pc, #84]	; (8002c8c <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002c38:	6823      	ldr	r3, [r4, #0]
 8002c3a:	b963      	cbnz	r3, 8002c56 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <prvIdleTask+0x64>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d9f8      	bls.n	8002c36 <prvIdleTask+0xa>
				taskYIELD();
 8002c44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002c48:	f8c8 3000 	str.w	r3, [r8]
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	e7ee      	b.n	8002c34 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002c56:	f7ff fa25 	bl	80020a4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c5e:	1d28      	adds	r0, r5, #4
 8002c60:	f7ff f9a7 	bl	8001fb2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002c64:	6833      	ldr	r3, [r6, #0]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002c6a:	6823      	ldr	r3, [r4, #0]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002c70:	f7ff fa3a 	bl	80020e8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8002c74:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002c76:	f7ff fc13 	bl	80024a0 <vPortFree>
			vPortFree( pxTCB );
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f7ff fc10 	bl	80024a0 <vPortFree>
 8002c80:	e7da      	b.n	8002c38 <prvIdleTask+0xc>
 8002c82:	bf00      	nop
 8002c84:	20003e74 	.word	0x20003e74
 8002c88:	20003e00 	.word	0x20003e00
 8002c8c:	20003dfc 	.word	0x20003dfc
 8002c90:	20003d70 	.word	0x20003d70
 8002c94:	e000ed04 	.word	0xe000ed04

08002c98 <xTaskCreate>:
	{
 8002c98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c9c:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8002ca0:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ca2:	4650      	mov	r0, sl
	{
 8002ca4:	460f      	mov	r7, r1
 8002ca6:	4699      	mov	r9, r3
 8002ca8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002caa:	f7ff fb6b 	bl	8002384 <pvPortMalloc>
			if( pxStack != NULL )
 8002cae:	4605      	mov	r5, r0
 8002cb0:	2800      	cmp	r0, #0
 8002cb2:	f000 8096 	beq.w	8002de2 <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002cb6:	2054      	movs	r0, #84	; 0x54
 8002cb8:	f7ff fb64 	bl	8002384 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	2800      	cmp	r0, #0
 8002cc0:	f000 808c 	beq.w	8002ddc <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002cc4:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8002cc8:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002cca:	4455      	add	r5, sl
 8002ccc:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002cce:	f025 0a07 	bic.w	sl, r5, #7
 8002cd2:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8002cd6:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cd8:	7859      	ldrb	r1, [r3, #1]
 8002cda:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8002cde:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002ce2:	b109      	cbz	r1, 8002ce8 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ce4:	42bb      	cmp	r3, r7
 8002ce6:	d1f7      	bne.n	8002cd8 <xTaskCreate+0x40>
 8002ce8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002cea:	2d06      	cmp	r5, #6
 8002cec:	bf28      	it	cs
 8002cee:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cf0:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cf4:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8002cf6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8002cf8:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cfa:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cfc:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8002d00:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d04:	f7ff f92f 	bl	8001f66 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d08:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d0c:	f104 0018 	add.w	r0, r4, #24
 8002d10:	f7ff f929 	bl	8001f66 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002d14:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d18:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d1a:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d1c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d1e:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d22:	464a      	mov	r2, r9
 8002d24:	4641      	mov	r1, r8
 8002d26:	4650      	mov	r0, sl
 8002d28:	f7ff f992 	bl	8002050 <pxPortInitialiseStack>
 8002d2c:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8002d2e:	b106      	cbz	r6, 8002d32 <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d30:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8002d32:	f7ff f9b7 	bl	80020a4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8002d36:	4b32      	ldr	r3, [pc, #200]	; (8002e00 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8002d38:	4e32      	ldr	r6, [pc, #200]	; (8002e04 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8002e30 <xTaskCreate+0x198>
 8002d40:	3201      	adds	r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002d44:	6835      	ldr	r5, [r6, #0]
 8002d46:	2d00      	cmp	r5, #0
 8002d48:	d14e      	bne.n	8002de8 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8002d4a:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d11d      	bne.n	8002d8e <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d52:	eb08 0005 	add.w	r0, r8, r5
 8002d56:	3514      	adds	r5, #20
 8002d58:	f7ff f8fa 	bl	8001f50 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d5c:	2d8c      	cmp	r5, #140	; 0x8c
 8002d5e:	d1f8      	bne.n	8002d52 <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8002d60:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8002e34 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8002d64:	4d28      	ldr	r5, [pc, #160]	; (8002e08 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8002d66:	4648      	mov	r0, r9
 8002d68:	f7ff f8f2 	bl	8001f50 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002d6c:	4628      	mov	r0, r5
 8002d6e:	f7ff f8ef 	bl	8001f50 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002d72:	4826      	ldr	r0, [pc, #152]	; (8002e0c <xTaskCreate+0x174>)
 8002d74:	f7ff f8ec 	bl	8001f50 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8002d78:	4825      	ldr	r0, [pc, #148]	; (8002e10 <xTaskCreate+0x178>)
 8002d7a:	f7ff f8e9 	bl	8001f50 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8002d7e:	4825      	ldr	r0, [pc, #148]	; (8002e14 <xTaskCreate+0x17c>)
 8002d80:	f7ff f8e6 	bl	8001f50 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8002d84:	4b24      	ldr	r3, [pc, #144]	; (8002e18 <xTaskCreate+0x180>)
 8002d86:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d8a:	4b24      	ldr	r3, [pc, #144]	; (8002e1c <xTaskCreate+0x184>)
 8002d8c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002d8e:	4a24      	ldr	r2, [pc, #144]	; (8002e20 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8002d90:	4924      	ldr	r1, [pc, #144]	; (8002e24 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8002d92:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002d94:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002d96:	3301      	adds	r3, #1
 8002d98:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002d9a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d9c:	2501      	movs	r5, #1
 8002d9e:	fa05 f302 	lsl.w	r3, r5, r2
 8002da2:	4303      	orrs	r3, r0
 8002da4:	2014      	movs	r0, #20
 8002da6:	600b      	str	r3, [r1, #0]
 8002da8:	fb00 8002 	mla	r0, r0, r2, r8
 8002dac:	4639      	mov	r1, r7
 8002dae:	f7ff f8dd 	bl	8001f6c <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002db2:	f7ff f999 	bl	80020e8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002db6:	4b1c      	ldr	r3, [pc, #112]	; (8002e28 <xTaskCreate+0x190>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	b163      	cbz	r3, 8002dd6 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002dbc:	6833      	ldr	r3, [r6, #0]
 8002dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d207      	bcs.n	8002dd6 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8002dc6:	4b19      	ldr	r3, [pc, #100]	; (8002e2c <xTaskCreate+0x194>)
 8002dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	f3bf 8f6f 	isb	sy
	}
 8002dd6:	4628      	mov	r0, r5
 8002dd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8002ddc:	4628      	mov	r0, r5
 8002dde:	f7ff fb5f 	bl	80024a0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002de2:	f04f 35ff 	mov.w	r5, #4294967295
 8002de6:	e7f6      	b.n	8002dd6 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <xTaskCreate+0x190>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ce      	bne.n	8002d8e <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002df0:	6833      	ldr	r3, [r6, #0]
 8002df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002df6:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002df8:	bf98      	it	ls
 8002dfa:	6034      	strls	r4, [r6, #0]
 8002dfc:	e7c7      	b.n	8002d8e <xTaskCreate+0xf6>
 8002dfe:	bf00      	nop
 8002e00:	20003dfc 	.word	0x20003dfc
 8002e04:	20003d64 	.word	0x20003d64
 8002e08:	20003e28 	.word	0x20003e28
 8002e0c:	20003e48 	.word	0x20003e48
 8002e10:	20003e74 	.word	0x20003e74
 8002e14:	20003e60 	.word	0x20003e60
 8002e18:	20003d68 	.word	0x20003d68
 8002e1c:	20003d6c 	.word	0x20003d6c
 8002e20:	20003e0c 	.word	0x20003e0c
 8002e24:	20003e10 	.word	0x20003e10
 8002e28:	20003e5c 	.word	0x20003e5c
 8002e2c:	e000ed04 	.word	0xe000ed04
 8002e30:	20003d70 	.word	0x20003d70
 8002e34:	20003e14 	.word	0x20003e14

08002e38 <eTaskGetState>:
	{
 8002e38:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxTCB );
 8002e3a:	4605      	mov	r5, r0
 8002e3c:	b940      	cbnz	r0, 8002e50 <eTaskGetState+0x18>
 8002e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e42:	f383 8811 	msr	BASEPRI, r3
 8002e46:	f3bf 8f6f 	isb	sy
 8002e4a:	f3bf 8f4f 	dsb	sy
 8002e4e:	e7fe      	b.n	8002e4e <eTaskGetState+0x16>
		if( pxTCB == pxCurrentTCB )
 8002e50:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <eTaskGetState+0x68>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4298      	cmp	r0, r3
 8002e56:	d01d      	beq.n	8002e94 <eTaskGetState+0x5c>
			taskENTER_CRITICAL();
 8002e58:	f7ff f924 	bl	80020a4 <vPortEnterCritical>
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8002e5c:	696c      	ldr	r4, [r5, #20]
			taskEXIT_CRITICAL();
 8002e5e:	f7ff f943 	bl	80020e8 <vPortExitCritical>
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <eTaskGetState+0x6c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	429c      	cmp	r4, r3
 8002e68:	d016      	beq.n	8002e98 <eTaskGetState+0x60>
 8002e6a:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <eTaskGetState+0x70>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	429c      	cmp	r4, r3
 8002e70:	d012      	beq.n	8002e98 <eTaskGetState+0x60>
				else if( pxStateList == &xSuspendedTaskList )
 8002e72:	4b0e      	ldr	r3, [pc, #56]	; (8002eac <eTaskGetState+0x74>)
 8002e74:	429c      	cmp	r4, r3
 8002e76:	d105      	bne.n	8002e84 <eTaskGetState+0x4c>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8002e78:	6aab      	ldr	r3, [r5, #40]	; 0x28
						eReturn = eSuspended;
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf14      	ite	ne
 8002e7e:	2002      	movne	r0, #2
 8002e80:	2003      	moveq	r0, #3
 8002e82:	bd38      	pop	{r3, r4, r5, pc}
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8002e84:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <eTaskGetState+0x78>)
 8002e86:	429c      	cmp	r4, r3
 8002e88:	d008      	beq.n	8002e9c <eTaskGetState+0x64>
				eReturn = eReady;
 8002e8a:	2c00      	cmp	r4, #0
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2004      	moveq	r0, #4
 8002e90:	2001      	movne	r0, #1
 8002e92:	bd38      	pop	{r3, r4, r5, pc}
			eReturn = eRunning;
 8002e94:	2000      	movs	r0, #0
 8002e96:	bd38      	pop	{r3, r4, r5, pc}
						eReturn = eBlocked;
 8002e98:	2002      	movs	r0, #2
 8002e9a:	bd38      	pop	{r3, r4, r5, pc}
					eReturn = eDeleted;
 8002e9c:	2004      	movs	r0, #4
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8002e9e:	bd38      	pop	{r3, r4, r5, pc}
 8002ea0:	20003d64 	.word	0x20003d64
 8002ea4:	20003d68 	.word	0x20003d68
 8002ea8:	20003d6c 	.word	0x20003d6c
 8002eac:	20003e60 	.word	0x20003e60
 8002eb0:	20003e74 	.word	0x20003e74

08002eb4 <vTaskResume>:
	{
 8002eb4:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	b940      	cbnz	r0, 8002ecc <vTaskResume+0x18>
 8002eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	e7fe      	b.n	8002eca <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8002ecc:	4d16      	ldr	r5, [pc, #88]	; (8002f28 <vTaskResume+0x74>)
 8002ece:	682b      	ldr	r3, [r5, #0]
 8002ed0:	4298      	cmp	r0, r3
 8002ed2:	d028      	beq.n	8002f26 <vTaskResume+0x72>
			taskENTER_CRITICAL();
 8002ed4:	f7ff f8e6 	bl	80020a4 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002ed8:	4620      	mov	r0, r4
 8002eda:	f7ff fe33 	bl	8002b44 <prvTaskIsTaskSuspended>
 8002ede:	b1f0      	cbz	r0, 8002f1e <vTaskResume+0x6a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8002ee0:	1d26      	adds	r6, r4, #4
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	f7ff f865 	bl	8001fb2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ee8:	4910      	ldr	r1, [pc, #64]	; (8002f2c <vTaskResume+0x78>)
 8002eea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002eec:	6808      	ldr	r0, [r1, #0]
 8002eee:	2301      	movs	r3, #1
 8002ef0:	4093      	lsls	r3, r2
 8002ef2:	4303      	orrs	r3, r0
 8002ef4:	600b      	str	r3, [r1, #0]
 8002ef6:	4b0e      	ldr	r3, [pc, #56]	; (8002f30 <vTaskResume+0x7c>)
 8002ef8:	2014      	movs	r0, #20
 8002efa:	fb00 3002 	mla	r0, r0, r2, r3
 8002efe:	4631      	mov	r1, r6
 8002f00:	f7ff f834 	bl	8001f6c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f04:	682b      	ldr	r3, [r5, #0]
 8002f06:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d307      	bcc.n	8002f1e <vTaskResume+0x6a>
						taskYIELD_IF_USING_PREEMPTION();
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <vTaskResume+0x80>)
 8002f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	f3bf 8f6f 	isb	sy
	}
 8002f1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8002f22:	f7ff b8e1 	b.w	80020e8 <vPortExitCritical>
 8002f26:	bd70      	pop	{r4, r5, r6, pc}
 8002f28:	20003d64 	.word	0x20003d64
 8002f2c:	20003e10 	.word	0x20003e10
 8002f30:	20003d70 	.word	0x20003d70
 8002f34:	e000ed04 	.word	0xe000ed04

08002f38 <xTaskResumeFromISR>:
	{
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 8002f3a:	4605      	mov	r5, r0
 8002f3c:	b940      	cbnz	r0, 8002f50 <xTaskResumeFromISR+0x18>
 8002f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f42:	f383 8811 	msr	BASEPRI, r3
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	e7fe      	b.n	8002f4e <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002f50:	f7ff f9c6 	bl	80022e0 <vPortValidateInterruptPriority>
	__asm volatile
 8002f54:	f3ef 8611 	mrs	r6, BASEPRI
 8002f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f5c:	f383 8811 	msr	BASEPRI, r3
 8002f60:	f3bf 8f6f 	isb	sy
 8002f64:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002f68:	4628      	mov	r0, r5
 8002f6a:	f7ff fdeb 	bl	8002b44 <prvTaskIsTaskSuspended>
 8002f6e:	b338      	cbz	r0, 8002fc0 <xTaskResumeFromISR+0x88>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f70:	4b14      	ldr	r3, [pc, #80]	; (8002fc4 <xTaskResumeFromISR+0x8c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	b9eb      	cbnz	r3, 8002fb2 <xTaskResumeFromISR+0x7a>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f76:	4b14      	ldr	r3, [pc, #80]	; (8002fc8 <xTaskResumeFromISR+0x90>)
 8002f78:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f7e:	1d2f      	adds	r7, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f80:	4284      	cmp	r4, r0
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f82:	4638      	mov	r0, r7
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f84:	bf34      	ite	cc
 8002f86:	2400      	movcc	r4, #0
 8002f88:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f8a:	f7ff f812 	bl	8001fb2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f8e:	490f      	ldr	r1, [pc, #60]	; (8002fcc <xTaskResumeFromISR+0x94>)
 8002f90:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002f92:	6808      	ldr	r0, [r1, #0]
 8002f94:	2301      	movs	r3, #1
 8002f96:	4093      	lsls	r3, r2
 8002f98:	4303      	orrs	r3, r0
 8002f9a:	600b      	str	r3, [r1, #0]
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <xTaskResumeFromISR+0x98>)
 8002f9e:	2014      	movs	r0, #20
 8002fa0:	4639      	mov	r1, r7
 8002fa2:	fb00 3002 	mla	r0, r0, r2, r3
 8002fa6:	f7fe ffe1 	bl	8001f6c <vListInsertEnd>
	__asm volatile
 8002faa:	f386 8811 	msr	BASEPRI, r6
	}
 8002fae:	4620      	mov	r0, r4
 8002fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002fb2:	f105 0118 	add.w	r1, r5, #24
 8002fb6:	4807      	ldr	r0, [pc, #28]	; (8002fd4 <xTaskResumeFromISR+0x9c>)
 8002fb8:	f7fe ffd8 	bl	8001f6c <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 8002fbc:	2400      	movs	r4, #0
 8002fbe:	e7f4      	b.n	8002faa <xTaskResumeFromISR+0x72>
 8002fc0:	4604      	mov	r4, r0
 8002fc2:	e7f2      	b.n	8002faa <xTaskResumeFromISR+0x72>
 8002fc4:	20003e08 	.word	0x20003e08
 8002fc8:	20003d64 	.word	0x20003d64
 8002fcc:	20003e10 	.word	0x20003e10
 8002fd0:	20003d70 	.word	0x20003d70
 8002fd4:	20003e48 	.word	0x20003e48

08002fd8 <vTaskStartScheduler>:
{
 8002fd8:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <vTaskStartScheduler+0x60>)
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	2400      	movs	r4, #0
 8002fe0:	9400      	str	r4, [sp, #0]
 8002fe2:	4623      	mov	r3, r4
 8002fe4:	2280      	movs	r2, #128	; 0x80
 8002fe6:	4915      	ldr	r1, [pc, #84]	; (800303c <vTaskStartScheduler+0x64>)
 8002fe8:	4815      	ldr	r0, [pc, #84]	; (8003040 <vTaskStartScheduler+0x68>)
 8002fea:	f7ff fe55 	bl	8002c98 <xTaskCreate>
	if( xReturn == pdPASS )
 8002fee:	2801      	cmp	r0, #1
 8002ff0:	d114      	bne.n	800301c <vTaskStartScheduler+0x44>
	__asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <vTaskStartScheduler+0x6c>)
 8003004:	f04f 32ff 	mov.w	r2, #4294967295
 8003008:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800300a:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <vTaskStartScheduler+0x70>)
 800300c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800300e:	4b0f      	ldr	r3, [pc, #60]	; (800304c <vTaskStartScheduler+0x74>)
 8003010:	601c      	str	r4, [r3, #0]
}
 8003012:	b002      	add	sp, #8
 8003014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003018:	f7ff b8dc 	b.w	80021d4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800301c:	3001      	adds	r0, #1
 800301e:	d108      	bne.n	8003032 <vTaskStartScheduler+0x5a>
 8003020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	e7fe      	b.n	8003030 <vTaskStartScheduler+0x58>
}
 8003032:	b002      	add	sp, #8
 8003034:	bd10      	pop	{r4, pc}
 8003036:	bf00      	nop
 8003038:	20003e3c 	.word	0x20003e3c
 800303c:	08004091 	.word	0x08004091
 8003040:	08002c2d 	.word	0x08002c2d
 8003044:	20003e40 	.word	0x20003e40
 8003048:	20003e5c 	.word	0x20003e5c
 800304c:	20003e88 	.word	0x20003e88

08003050 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003050:	4a02      	ldr	r2, [pc, #8]	; (800305c <vTaskSuspendAll+0xc>)
 8003052:	6813      	ldr	r3, [r2, #0]
 8003054:	3301      	adds	r3, #1
 8003056:	6013      	str	r3, [r2, #0]
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	20003e08 	.word	0x20003e08

08003060 <xTaskIncrementTick>:
{
 8003060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003064:	4b3c      	ldr	r3, [pc, #240]	; (8003158 <xTaskIncrementTick+0xf8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d153      	bne.n	8003114 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800306c:	4b3b      	ldr	r3, [pc, #236]	; (800315c <xTaskIncrementTick+0xfc>)
 800306e:	681c      	ldr	r4, [r3, #0]
 8003070:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003072:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003074:	b9bc      	cbnz	r4, 80030a6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003076:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <xTaskIncrementTick+0x100>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	b142      	cbz	r2, 8003090 <xTaskIncrementTick+0x30>
 800307e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003082:	f383 8811 	msr	BASEPRI, r3
 8003086:	f3bf 8f6f 	isb	sy
 800308a:	f3bf 8f4f 	dsb	sy
 800308e:	e7fe      	b.n	800308e <xTaskIncrementTick+0x2e>
 8003090:	4a34      	ldr	r2, [pc, #208]	; (8003164 <xTaskIncrementTick+0x104>)
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	6810      	ldr	r0, [r2, #0]
 8003096:	6018      	str	r0, [r3, #0]
 8003098:	6011      	str	r1, [r2, #0]
 800309a:	4a33      	ldr	r2, [pc, #204]	; (8003168 <xTaskIncrementTick+0x108>)
 800309c:	6813      	ldr	r3, [r2, #0]
 800309e:	3301      	adds	r3, #1
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	f7ff fd6b 	bl	8002b7c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80030a6:	4d31      	ldr	r5, [pc, #196]	; (800316c <xTaskIncrementTick+0x10c>)
 80030a8:	4f31      	ldr	r7, [pc, #196]	; (8003170 <xTaskIncrementTick+0x110>)
 80030aa:	682b      	ldr	r3, [r5, #0]
 80030ac:	429c      	cmp	r4, r3
 80030ae:	f04f 0b00 	mov.w	fp, #0
 80030b2:	d33e      	bcc.n	8003132 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030b4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003160 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 80030b8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003180 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030bc:	f8d8 2000 	ldr.w	r2, [r8]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	bb72      	cbnz	r2, 8003122 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	602a      	str	r2, [r5, #0]
					break;
 80030ca:	e032      	b.n	8003132 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030cc:	f106 0a04 	add.w	sl, r6, #4
 80030d0:	4650      	mov	r0, sl
 80030d2:	f7fe ff6e 	bl	8001fb2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030d6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80030d8:	b119      	cbz	r1, 80030e2 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030da:	f106 0018 	add.w	r0, r6, #24
 80030de:	f7fe ff68 	bl	8001fb2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030e2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80030e4:	f8d9 3000 	ldr.w	r3, [r9]
 80030e8:	2201      	movs	r2, #1
 80030ea:	fa02 f100 	lsl.w	r1, r2, r0
 80030ee:	4319      	orrs	r1, r3
 80030f0:	4b20      	ldr	r3, [pc, #128]	; (8003174 <xTaskIncrementTick+0x114>)
 80030f2:	f8c9 1000 	str.w	r1, [r9]
 80030f6:	f04f 0e14 	mov.w	lr, #20
 80030fa:	4651      	mov	r1, sl
 80030fc:	fb0e 3000 	mla	r0, lr, r0, r3
 8003100:	f7fe ff34 	bl	8001f6c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003104:	6838      	ldr	r0, [r7, #0]
 8003106:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003108:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800310a:	4291      	cmp	r1, r2
 800310c:	bf28      	it	cs
 800310e:	f04f 0b01 	movcs.w	fp, #1
 8003112:	e7d3      	b.n	80030bc <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8003114:	4a18      	ldr	r2, [pc, #96]	; (8003178 <xTaskIncrementTick+0x118>)
 8003116:	6813      	ldr	r3, [r2, #0]
 8003118:	3301      	adds	r3, #1
 800311a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800311c:	f04f 0b00 	mov.w	fp, #0
 8003120:	e011      	b.n	8003146 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003122:	f8d8 2000 	ldr.w	r2, [r8]
 8003126:	68d2      	ldr	r2, [r2, #12]
 8003128:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800312a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800312c:	428c      	cmp	r4, r1
 800312e:	d2cd      	bcs.n	80030cc <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 8003130:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <xTaskIncrementTick+0x114>)
 8003136:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003138:	2214      	movs	r2, #20
 800313a:	434a      	muls	r2, r1
 800313c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800313e:	2a02      	cmp	r2, #2
 8003140:	bf28      	it	cs
 8003142:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003146:	4a0d      	ldr	r2, [pc, #52]	; (800317c <xTaskIncrementTick+0x11c>)
 8003148:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800314a:	2a00      	cmp	r2, #0
 800314c:	bf18      	it	ne
 800314e:	f04f 0b01 	movne.w	fp, #1
}
 8003152:	4658      	mov	r0, fp
 8003154:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003158:	20003e08 	.word	0x20003e08
 800315c:	20003e88 	.word	0x20003e88
 8003160:	20003d68 	.word	0x20003d68
 8003164:	20003d6c 	.word	0x20003d6c
 8003168:	20003e44 	.word	0x20003e44
 800316c:	20003e40 	.word	0x20003e40
 8003170:	20003d64 	.word	0x20003d64
 8003174:	20003d70 	.word	0x20003d70
 8003178:	20003e04 	.word	0x20003e04
 800317c:	20003e8c 	.word	0x20003e8c
 8003180:	20003e10 	.word	0x20003e10

08003184 <xTaskResumeAll>:
{
 8003184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003188:	4c31      	ldr	r4, [pc, #196]	; (8003250 <xTaskResumeAll+0xcc>)
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	b943      	cbnz	r3, 80031a0 <xTaskResumeAll+0x1c>
 800318e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003192:	f383 8811 	msr	BASEPRI, r3
 8003196:	f3bf 8f6f 	isb	sy
 800319a:	f3bf 8f4f 	dsb	sy
 800319e:	e7fe      	b.n	800319e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80031a0:	f7fe ff80 	bl	80020a4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80031a4:	6823      	ldr	r3, [r4, #0]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031aa:	6824      	ldr	r4, [r4, #0]
 80031ac:	b12c      	cbz	r4, 80031ba <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80031ae:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80031b0:	f7fe ff9a 	bl	80020e8 <vPortExitCritical>
}
 80031b4:	4620      	mov	r0, r4
 80031b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031ba:	4b26      	ldr	r3, [pc, #152]	; (8003254 <xTaskResumeAll+0xd0>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f5      	beq.n	80031ae <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031c2:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 800326c <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 80031c6:	4f24      	ldr	r7, [pc, #144]	; (8003258 <xTaskResumeAll+0xd4>)
 80031c8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003270 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031cc:	f8d9 3000 	ldr.w	r3, [r9]
 80031d0:	b9e3      	cbnz	r3, 800320c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 80031d2:	b10c      	cbz	r4, 80031d8 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 80031d4:	f7ff fcd2 	bl	8002b7c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80031d8:	4d20      	ldr	r5, [pc, #128]	; (800325c <xTaskResumeAll+0xd8>)
 80031da:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80031dc:	b144      	cbz	r4, 80031f0 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 80031de:	4e20      	ldr	r6, [pc, #128]	; (8003260 <xTaskResumeAll+0xdc>)
 80031e0:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80031e2:	f7ff ff3d 	bl	8003060 <xTaskIncrementTick>
 80031e6:	b100      	cbz	r0, 80031ea <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 80031e8:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80031ea:	3c01      	subs	r4, #1
 80031ec:	d1f9      	bne.n	80031e2 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 80031ee:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80031f0:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <xTaskResumeAll+0xdc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0da      	beq.n	80031ae <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <xTaskResumeAll+0xe0>)
 80031fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003208:	2401      	movs	r4, #1
 800320a:	e7d1      	b.n	80031b0 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800320c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8003210:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003212:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003214:	f104 0018 	add.w	r0, r4, #24
 8003218:	f7fe fecb 	bl	8001fb2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800321c:	4630      	mov	r0, r6
 800321e:	f7fe fec8 	bl	8001fb2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003222:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003224:	6839      	ldr	r1, [r7, #0]
 8003226:	2501      	movs	r5, #1
 8003228:	fa05 f302 	lsl.w	r3, r5, r2
 800322c:	2014      	movs	r0, #20
 800322e:	430b      	orrs	r3, r1
 8003230:	fb00 8002 	mla	r0, r0, r2, r8
 8003234:	4631      	mov	r1, r6
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	f7fe fe98 	bl	8001f6c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <xTaskResumeAll+0xe4>)
 800323e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003244:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8003246:	bf24      	itt	cs
 8003248:	4b05      	ldrcs	r3, [pc, #20]	; (8003260 <xTaskResumeAll+0xdc>)
 800324a:	601d      	strcs	r5, [r3, #0]
 800324c:	e7be      	b.n	80031cc <xTaskResumeAll+0x48>
 800324e:	bf00      	nop
 8003250:	20003e08 	.word	0x20003e08
 8003254:	20003dfc 	.word	0x20003dfc
 8003258:	20003e10 	.word	0x20003e10
 800325c:	20003e04 	.word	0x20003e04
 8003260:	20003e8c 	.word	0x20003e8c
 8003264:	e000ed04 	.word	0xe000ed04
 8003268:	20003d64 	.word	0x20003d64
 800326c:	20003e48 	.word	0x20003e48
 8003270:	20003d70 	.word	0x20003d70

08003274 <vTaskDelay>:
	{
 8003274:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003276:	b940      	cbnz	r0, 800328a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003278:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <vTaskDelay+0x40>)
 800327a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	f3bf 8f6f 	isb	sy
 8003288:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800328a:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <vTaskDelay+0x44>)
 800328c:	6819      	ldr	r1, [r3, #0]
 800328e:	b141      	cbz	r1, 80032a2 <vTaskDelay+0x2e>
 8003290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	e7fe      	b.n	80032a0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80032a2:	f7ff fed5 	bl	8003050 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032a6:	f7ff fc7b 	bl	8002ba0 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80032aa:	f7ff ff6b 	bl	8003184 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80032ae:	2800      	cmp	r0, #0
 80032b0:	d0e2      	beq.n	8003278 <vTaskDelay+0x4>
 80032b2:	bd08      	pop	{r3, pc}
 80032b4:	e000ed04 	.word	0xe000ed04
 80032b8:	20003e08 	.word	0x20003e08

080032bc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032bc:	4b17      	ldr	r3, [pc, #92]	; (800331c <vTaskSwitchContext+0x60>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	4b17      	ldr	r3, [pc, #92]	; (8003320 <vTaskSwitchContext+0x64>)
{
 80032c2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032c4:	b112      	cbz	r2, 80032cc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80032c6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80032cc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80032ce:	4b15      	ldr	r3, [pc, #84]	; (8003324 <vTaskSwitchContext+0x68>)
 80032d0:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032d2:	fab3 f383 	clz	r3, r3
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f1c3 031f 	rsb	r3, r3, #31
 80032dc:	2214      	movs	r2, #20
 80032de:	4912      	ldr	r1, [pc, #72]	; (8003328 <vTaskSwitchContext+0x6c>)
 80032e0:	435a      	muls	r2, r3
 80032e2:	1888      	adds	r0, r1, r2
 80032e4:	588c      	ldr	r4, [r1, r2]
 80032e6:	b944      	cbnz	r4, 80032fa <vTaskSwitchContext+0x3e>
	__asm volatile
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	f383 8811 	msr	BASEPRI, r3
 80032f0:	f3bf 8f6f 	isb	sy
 80032f4:	f3bf 8f4f 	dsb	sy
 80032f8:	e7fe      	b.n	80032f8 <vTaskSwitchContext+0x3c>
 80032fa:	6844      	ldr	r4, [r0, #4]
 80032fc:	3208      	adds	r2, #8
 80032fe:	6864      	ldr	r4, [r4, #4]
 8003300:	6044      	str	r4, [r0, #4]
 8003302:	440a      	add	r2, r1
 8003304:	4294      	cmp	r4, r2
 8003306:	bf04      	itt	eq
 8003308:	6862      	ldreq	r2, [r4, #4]
 800330a:	6042      	streq	r2, [r0, #4]
 800330c:	2214      	movs	r2, #20
 800330e:	fb02 1303 	mla	r3, r2, r3, r1
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	4b05      	ldr	r3, [pc, #20]	; (800332c <vTaskSwitchContext+0x70>)
 8003318:	e7d6      	b.n	80032c8 <vTaskSwitchContext+0xc>
 800331a:	bf00      	nop
 800331c:	20003e08 	.word	0x20003e08
 8003320:	20003e8c 	.word	0x20003e8c
 8003324:	20003e10 	.word	0x20003e10
 8003328:	20003d70 	.word	0x20003d70
 800332c:	20003d64 	.word	0x20003d64

08003330 <vTaskSuspend>:
	{
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	4604      	mov	r4, r0
 8003334:	4e2c      	ldr	r6, [pc, #176]	; (80033e8 <vTaskSuspend+0xb8>)
		taskENTER_CRITICAL();
 8003336:	f7fe feb5 	bl	80020a4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800333a:	b904      	cbnz	r4, 800333e <vTaskSuspend+0xe>
 800333c:	6834      	ldr	r4, [r6, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800333e:	1d25      	adds	r5, r4, #4
 8003340:	4628      	mov	r0, r5
 8003342:	f7fe fe36 	bl	8001fb2 <uxListRemove>
 8003346:	b960      	cbnz	r0, 8003362 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003348:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800334a:	4b28      	ldr	r3, [pc, #160]	; (80033ec <vTaskSuspend+0xbc>)
 800334c:	2114      	movs	r1, #20
 800334e:	4341      	muls	r1, r0
 8003350:	585b      	ldr	r3, [r3, r1]
 8003352:	b933      	cbnz	r3, 8003362 <vTaskSuspend+0x32>
 8003354:	4926      	ldr	r1, [pc, #152]	; (80033f0 <vTaskSuspend+0xc0>)
 8003356:	2201      	movs	r2, #1
 8003358:	680b      	ldr	r3, [r1, #0]
 800335a:	4082      	lsls	r2, r0
 800335c:	ea23 0302 	bic.w	r3, r3, r2
 8003360:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003362:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003364:	b11b      	cbz	r3, 800336e <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003366:	f104 0018 	add.w	r0, r4, #24
 800336a:	f7fe fe22 	bl	8001fb2 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800336e:	4629      	mov	r1, r5
 8003370:	4820      	ldr	r0, [pc, #128]	; (80033f4 <vTaskSuspend+0xc4>)
		if( xSchedulerRunning != pdFALSE )
 8003372:	4d21      	ldr	r5, [pc, #132]	; (80033f8 <vTaskSuspend+0xc8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003374:	f7fe fdfa 	bl	8001f6c <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003378:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800337c:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800337e:	bf04      	itt	eq
 8003380:	2300      	moveq	r3, #0
 8003382:	f884 3050 	strbeq.w	r3, [r4, #80]	; 0x50
		taskEXIT_CRITICAL();
 8003386:	f7fe feaf 	bl	80020e8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800338a:	682a      	ldr	r2, [r5, #0]
 800338c:	b12a      	cbz	r2, 800339a <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 800338e:	f7fe fe89 	bl	80020a4 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8003392:	f7ff fbf3 	bl	8002b7c <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8003396:	f7fe fea7 	bl	80020e8 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 800339a:	6833      	ldr	r3, [r6, #0]
 800339c:	429c      	cmp	r4, r3
 800339e:	d122      	bne.n	80033e6 <vTaskSuspend+0xb6>
			if( xSchedulerRunning != pdFALSE )
 80033a0:	682b      	ldr	r3, [r5, #0]
 80033a2:	b1a3      	cbz	r3, 80033ce <vTaskSuspend+0x9e>
				configASSERT( uxSchedulerSuspended == 0 );
 80033a4:	4b15      	ldr	r3, [pc, #84]	; (80033fc <vTaskSuspend+0xcc>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	b143      	cbz	r3, 80033bc <vTaskSuspend+0x8c>
 80033aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033ae:	f383 8811 	msr	BASEPRI, r3
 80033b2:	f3bf 8f6f 	isb	sy
 80033b6:	f3bf 8f4f 	dsb	sy
 80033ba:	e7fe      	b.n	80033ba <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 80033bc:	4b10      	ldr	r3, [pc, #64]	; (8003400 <vTaskSuspend+0xd0>)
 80033be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	f3bf 8f4f 	dsb	sy
 80033c8:	f3bf 8f6f 	isb	sy
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <vTaskSuspend+0xc4>)
 80033d0:	6811      	ldr	r1, [r2, #0]
 80033d2:	4a0c      	ldr	r2, [pc, #48]	; (8003404 <vTaskSuspend+0xd4>)
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	4291      	cmp	r1, r2
 80033d8:	d101      	bne.n	80033de <vTaskSuspend+0xae>
					pxCurrentTCB = NULL;
 80033da:	6033      	str	r3, [r6, #0]
 80033dc:	bd70      	pop	{r4, r5, r6, pc}
	}
 80033de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 80033e2:	f7ff bf6b 	b.w	80032bc <vTaskSwitchContext>
 80033e6:	bd70      	pop	{r4, r5, r6, pc}
 80033e8:	20003d64 	.word	0x20003d64
 80033ec:	20003d70 	.word	0x20003d70
 80033f0:	20003e10 	.word	0x20003e10
 80033f4:	20003e60 	.word	0x20003e60
 80033f8:	20003e5c 	.word	0x20003e5c
 80033fc:	20003e08 	.word	0x20003e08
 8003400:	e000ed04 	.word	0xe000ed04
 8003404:	20003dfc 	.word	0x20003dfc

08003408 <vTaskPlaceOnEventList>:
{
 8003408:	b510      	push	{r4, lr}
 800340a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800340c:	b940      	cbnz	r0, 8003420 <vTaskPlaceOnEventList+0x18>
 800340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	e7fe      	b.n	800341e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003420:	4b05      	ldr	r3, [pc, #20]	; (8003438 <vTaskPlaceOnEventList+0x30>)
 8003422:	6819      	ldr	r1, [r3, #0]
 8003424:	3118      	adds	r1, #24
 8003426:	f7fe fdad 	bl	8001f84 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800342a:	4620      	mov	r0, r4
 800342c:	2101      	movs	r1, #1
}
 800342e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003432:	f7ff bbb5 	b.w	8002ba0 <prvAddCurrentTaskToDelayedList>
 8003436:	bf00      	nop
 8003438:	20003d64 	.word	0x20003d64

0800343c <xTaskRemoveFromEventList>:
{
 800343c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800343e:	68c3      	ldr	r3, [r0, #12]
 8003440:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003442:	b944      	cbnz	r4, 8003456 <xTaskRemoveFromEventList+0x1a>
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	e7fe      	b.n	8003454 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003456:	f104 0518 	add.w	r5, r4, #24
 800345a:	4628      	mov	r0, r5
 800345c:	f7fe fda9 	bl	8001fb2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003460:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <xTaskRemoveFromEventList+0x6c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	b9e3      	cbnz	r3, 80034a0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003466:	1d25      	adds	r5, r4, #4
 8003468:	4628      	mov	r0, r5
 800346a:	f7fe fda2 	bl	8001fb2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800346e:	490f      	ldr	r1, [pc, #60]	; (80034ac <xTaskRemoveFromEventList+0x70>)
 8003470:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003472:	6808      	ldr	r0, [r1, #0]
 8003474:	2301      	movs	r3, #1
 8003476:	4093      	lsls	r3, r2
 8003478:	4303      	orrs	r3, r0
 800347a:	600b      	str	r3, [r1, #0]
 800347c:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <xTaskRemoveFromEventList+0x74>)
 800347e:	2014      	movs	r0, #20
 8003480:	4629      	mov	r1, r5
 8003482:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003486:	f7fe fd71 	bl	8001f6c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <xTaskRemoveFromEventList+0x78>)
 800348c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003494:	bf83      	ittte	hi
 8003496:	4b08      	ldrhi	r3, [pc, #32]	; (80034b8 <xTaskRemoveFromEventList+0x7c>)
 8003498:	2001      	movhi	r0, #1
 800349a:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 800349c:	2000      	movls	r0, #0
}
 800349e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80034a0:	4629      	mov	r1, r5
 80034a2:	4806      	ldr	r0, [pc, #24]	; (80034bc <xTaskRemoveFromEventList+0x80>)
 80034a4:	e7ef      	b.n	8003486 <xTaskRemoveFromEventList+0x4a>
 80034a6:	bf00      	nop
 80034a8:	20003e08 	.word	0x20003e08
 80034ac:	20003e10 	.word	0x20003e10
 80034b0:	20003d70 	.word	0x20003d70
 80034b4:	20003d64 	.word	0x20003d64
 80034b8:	20003e8c 	.word	0x20003e8c
 80034bc:	20003e48 	.word	0x20003e48

080034c0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80034c0:	4b03      	ldr	r3, [pc, #12]	; (80034d0 <vTaskInternalSetTimeOutState+0x10>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80034c6:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <vTaskInternalSetTimeOutState+0x14>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6043      	str	r3, [r0, #4]
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	20003e44 	.word	0x20003e44
 80034d4:	20003e88 	.word	0x20003e88

080034d8 <xTaskCheckForTimeOut>:
{
 80034d8:	b570      	push	{r4, r5, r6, lr}
 80034da:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80034dc:	4605      	mov	r5, r0
 80034de:	b940      	cbnz	r0, 80034f2 <xTaskCheckForTimeOut+0x1a>
 80034e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy
 80034ec:	f3bf 8f4f 	dsb	sy
 80034f0:	e7fe      	b.n	80034f0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80034f2:	b941      	cbnz	r1, 8003506 <xTaskCheckForTimeOut+0x2e>
 80034f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f8:	f383 8811 	msr	BASEPRI, r3
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	f3bf 8f4f 	dsb	sy
 8003504:	e7fe      	b.n	8003504 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8003506:	f7fe fdcd 	bl	80020a4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800350c:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 800350e:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003510:	6823      	ldr	r3, [r4, #0]
 8003512:	1c58      	adds	r0, r3, #1
 8003514:	d00e      	beq.n	8003534 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003516:	480d      	ldr	r0, [pc, #52]	; (800354c <xTaskCheckForTimeOut+0x74>)
 8003518:	682e      	ldr	r6, [r5, #0]
 800351a:	6800      	ldr	r0, [r0, #0]
 800351c:	4286      	cmp	r6, r0
 800351e:	d001      	beq.n	8003524 <xTaskCheckForTimeOut+0x4c>
 8003520:	428a      	cmp	r2, r1
 8003522:	d20e      	bcs.n	8003542 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003524:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003526:	429a      	cmp	r2, r3
 8003528:	d209      	bcs.n	800353e <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800352e:	4628      	mov	r0, r5
 8003530:	f7ff ffc6 	bl	80034c0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8003534:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003536:	f7fe fdd7 	bl	80020e8 <vPortExitCritical>
}
 800353a:	4620      	mov	r0, r4
 800353c:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8003542:	2401      	movs	r4, #1
 8003544:	e7f7      	b.n	8003536 <xTaskCheckForTimeOut+0x5e>
 8003546:	bf00      	nop
 8003548:	20003e88 	.word	0x20003e88
 800354c:	20003e44 	.word	0x20003e44

08003550 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003550:	4b01      	ldr	r3, [pc, #4]	; (8003558 <vTaskMissedYield+0x8>)
 8003552:	2201      	movs	r2, #1
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	4770      	bx	lr
 8003558:	20003e8c 	.word	0x20003e8c

0800355c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <xTaskGetSchedulerState+0x18>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	b133      	cbz	r3, 8003570 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <xTaskGetSchedulerState+0x1c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003568:	bf0c      	ite	eq
 800356a:	2002      	moveq	r0, #2
 800356c:	2000      	movne	r0, #0
 800356e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003570:	2001      	movs	r0, #1
	}
 8003572:	4770      	bx	lr
 8003574:	20003e5c 	.word	0x20003e5c
 8003578:	20003e08 	.word	0x20003e08

0800357c <xTaskPriorityInherit>:
	{
 800357c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003580:	4604      	mov	r4, r0
 8003582:	2800      	cmp	r0, #0
 8003584:	d041      	beq.n	800360a <xTaskPriorityInherit+0x8e>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003586:	4a24      	ldr	r2, [pc, #144]	; (8003618 <xTaskPriorityInherit+0x9c>)
 8003588:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800358a:	6811      	ldr	r1, [r2, #0]
 800358c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800358e:	428b      	cmp	r3, r1
 8003590:	4617      	mov	r7, r2
 8003592:	d231      	bcs.n	80035f8 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003594:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003596:	4d21      	ldr	r5, [pc, #132]	; (800361c <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003598:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800359a:	bfa1      	itttt	ge
 800359c:	683a      	ldrge	r2, [r7, #0]
 800359e:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80035a0:	f1c2 0207 	rsbge	r2, r2, #7
 80035a4:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80035a6:	2614      	movs	r6, #20
 80035a8:	6942      	ldr	r2, [r0, #20]
 80035aa:	fb06 5303 	mla	r3, r6, r3, r5
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d12d      	bne.n	800360e <xTaskPriorityInherit+0x92>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035b2:	f100 0804 	add.w	r8, r0, #4
 80035b6:	4640      	mov	r0, r8
 80035b8:	f7fe fcfb 	bl	8001fb2 <uxListRemove>
 80035bc:	4b18      	ldr	r3, [pc, #96]	; (8003620 <xTaskPriorityInherit+0xa4>)
 80035be:	b948      	cbnz	r0, 80035d4 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80035c0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80035c2:	4346      	muls	r6, r0
 80035c4:	59aa      	ldr	r2, [r5, r6]
 80035c6:	b92a      	cbnz	r2, 80035d4 <xTaskPriorityInherit+0x58>
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	2101      	movs	r1, #1
 80035cc:	4081      	lsls	r1, r0
 80035ce:	ea22 0201 	bic.w	r2, r2, r1
 80035d2:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80035d4:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80035d6:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80035d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035da:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80035dc:	2401      	movs	r4, #1
 80035de:	fa04 f002 	lsl.w	r0, r4, r2
 80035e2:	4308      	orrs	r0, r1
 80035e4:	6018      	str	r0, [r3, #0]
 80035e6:	2014      	movs	r0, #20
 80035e8:	4641      	mov	r1, r8
 80035ea:	fb00 5002 	mla	r0, r0, r2, r5
 80035ee:	f7fe fcbd 	bl	8001f6c <vListInsertEnd>
				xReturn = pdTRUE;
 80035f2:	2001      	movs	r0, #1
	}
 80035f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80035f8:	6813      	ldr	r3, [r2, #0]
 80035fa:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80035fc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80035fe:	42a0      	cmp	r0, r4
 8003600:	bf2c      	ite	cs
 8003602:	2000      	movcs	r0, #0
 8003604:	2001      	movcc	r0, #1
 8003606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 800360a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	62c3      	str	r3, [r0, #44]	; 0x2c
 8003614:	e7ed      	b.n	80035f2 <xTaskPriorityInherit+0x76>
 8003616:	bf00      	nop
 8003618:	20003d64 	.word	0x20003d64
 800361c:	20003d70 	.word	0x20003d70
 8003620:	20003e10 	.word	0x20003e10

08003624 <xTaskPriorityDisinherit>:
	{
 8003624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003626:	4604      	mov	r4, r0
 8003628:	b908      	cbnz	r0, 800362e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 800362a:	2000      	movs	r0, #0
 800362c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800362e:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <xTaskPriorityDisinherit+0x94>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4298      	cmp	r0, r3
 8003634:	d008      	beq.n	8003648 <xTaskPriorityDisinherit+0x24>
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	e7fe      	b.n	8003646 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003648:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800364a:	b943      	cbnz	r3, 800365e <xTaskPriorityDisinherit+0x3a>
 800364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	e7fe      	b.n	800365c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800365e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8003660:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003662:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003664:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003666:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003668:	d0df      	beq.n	800362a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1dd      	bne.n	800362a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800366e:	1d05      	adds	r5, r0, #4
 8003670:	4628      	mov	r0, r5
 8003672:	f7fe fc9e 	bl	8001fb2 <uxListRemove>
 8003676:	4e11      	ldr	r6, [pc, #68]	; (80036bc <xTaskPriorityDisinherit+0x98>)
 8003678:	4a11      	ldr	r2, [pc, #68]	; (80036c0 <xTaskPriorityDisinherit+0x9c>)
 800367a:	b950      	cbnz	r0, 8003692 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800367c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800367e:	2114      	movs	r1, #20
 8003680:	4379      	muls	r1, r7
 8003682:	5873      	ldr	r3, [r6, r1]
 8003684:	b92b      	cbnz	r3, 8003692 <xTaskPriorityDisinherit+0x6e>
 8003686:	6813      	ldr	r3, [r2, #0]
 8003688:	2001      	movs	r0, #1
 800368a:	40b8      	lsls	r0, r7
 800368c:	ea23 0300 	bic.w	r3, r3, r0
 8003690:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003692:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003694:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003696:	f1c3 0107 	rsb	r1, r3, #7
 800369a:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800369c:	6811      	ldr	r1, [r2, #0]
 800369e:	2401      	movs	r4, #1
 80036a0:	fa04 f003 	lsl.w	r0, r4, r3
 80036a4:	4308      	orrs	r0, r1
 80036a6:	6010      	str	r0, [r2, #0]
 80036a8:	2014      	movs	r0, #20
 80036aa:	fb00 6003 	mla	r0, r0, r3, r6
 80036ae:	4629      	mov	r1, r5
 80036b0:	f7fe fc5c 	bl	8001f6c <vListInsertEnd>
					xReturn = pdTRUE;
 80036b4:	4620      	mov	r0, r4
	}
 80036b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036b8:	20003d64 	.word	0x20003d64
 80036bc:	20003d70 	.word	0x20003d70
 80036c0:	20003e10 	.word	0x20003e10

080036c4 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80036c6:	4604      	mov	r4, r0
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d04d      	beq.n	8003768 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 80036cc:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80036ce:	b942      	cbnz	r2, 80036e2 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	e7fe      	b.n	80036e0 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 80036e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80036e4:	4299      	cmp	r1, r3
 80036e6:	bf38      	it	cc
 80036e8:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80036ea:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80036ec:	428b      	cmp	r3, r1
 80036ee:	d03b      	beq.n	8003768 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80036f0:	2a01      	cmp	r2, #1
 80036f2:	d139      	bne.n	8003768 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 80036f4:	4a1d      	ldr	r2, [pc, #116]	; (800376c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	4290      	cmp	r0, r2
 80036fa:	d108      	bne.n	800370e <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	e7fe      	b.n	800370c <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800370e:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003710:	4d17      	ldr	r5, [pc, #92]	; (8003770 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 8003712:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003714:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003716:	f04f 0614 	mov.w	r6, #20
 800371a:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800371c:	bfa8      	it	ge
 800371e:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003722:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003726:	bfa8      	it	ge
 8003728:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800372a:	429a      	cmp	r2, r3
 800372c:	d11c      	bne.n	8003768 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800372e:	1d07      	adds	r7, r0, #4
 8003730:	4638      	mov	r0, r7
 8003732:	f7fe fc3e 	bl	8001fb2 <uxListRemove>
 8003736:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003738:	4c0e      	ldr	r4, [pc, #56]	; (8003774 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 800373a:	b940      	cbnz	r0, 800374e <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800373c:	4356      	muls	r6, r2
 800373e:	59ab      	ldr	r3, [r5, r6]
 8003740:	b92b      	cbnz	r3, 800374e <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	2101      	movs	r1, #1
 8003746:	4091      	lsls	r1, r2
 8003748:	ea23 0301 	bic.w	r3, r3, r1
 800374c:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 800374e:	6821      	ldr	r1, [r4, #0]
 8003750:	2301      	movs	r3, #1
 8003752:	4093      	lsls	r3, r2
 8003754:	430b      	orrs	r3, r1
 8003756:	2014      	movs	r0, #20
 8003758:	6023      	str	r3, [r4, #0]
 800375a:	4639      	mov	r1, r7
 800375c:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8003760:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8003764:	f7fe bc02 	b.w	8001f6c <vListInsertEnd>
 8003768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800376a:	bf00      	nop
 800376c:	20003d64 	.word	0x20003d64
 8003770:	20003d70 	.word	0x20003d70
 8003774:	20003e10 	.word	0x20003e10

08003778 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <pvTaskIncrementMutexHeldCount+0x14>)
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	b11a      	cbz	r2, 8003786 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800377e:	6819      	ldr	r1, [r3, #0]
 8003780:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003782:	3201      	adds	r2, #1
 8003784:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003786:	6818      	ldr	r0, [r3, #0]
	}
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20003d64 	.word	0x20003d64

08003790 <_ZN4GPIOC1EP12GPIO_TypeDeft>:
#include "GPIO.h"

GPIO::GPIO(GPIO_TypeDef* Port, uint16_t Pin) {
 8003790:	b580      	push	{r7, lr}
 8003792:	b08e      	sub	sp, #56	; 0x38
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	4613      	mov	r3, r2
 800379c:	80fb      	strh	r3, [r7, #6]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_InitStructure.GPIO_Pin = Pin;
	GPIO_Init(Port,&GPIO_InitStructure);*/


	if (Port == GPIOA)
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4a3e      	ldr	r2, [pc, #248]	; (800389c <_ZN4GPIOC1EP12GPIO_TypeDeft+0x10c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d10d      	bne.n	80037c2 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x32>
		  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
 80037aa:	4a3d      	ldr	r2, [pc, #244]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 80037ac:	4b3c      	ldr	r3, [pc, #240]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	f043 0301 	orr.w	r3, r3, #1
 80037b4:	6313      	str	r3, [r2, #48]	; 0x30
 80037b6:	4b3a      	ldr	r3, [pc, #232]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	6a3b      	ldr	r3, [r7, #32]
	if (Port == GPIOB)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	4a37      	ldr	r2, [pc, #220]	; (80038a4 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x114>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d10d      	bne.n	80037e6 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x56>
		  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	4a34      	ldr	r2, [pc, #208]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 80037d0:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	f043 0302 	orr.w	r3, r3, #2
 80037d8:	6313      	str	r3, [r2, #48]	; 0x30
 80037da:	4b31      	ldr	r3, [pc, #196]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	69fb      	ldr	r3, [r7, #28]
	if (Port == GPIOC)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4a2f      	ldr	r2, [pc, #188]	; (80038a8 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x118>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10d      	bne.n	800380a <_ZN4GPIOC1EP12GPIO_TypeDeft+0x7a>
		  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037ee:	2300      	movs	r3, #0
 80037f0:	61bb      	str	r3, [r7, #24]
 80037f2:	4a2b      	ldr	r2, [pc, #172]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 80037f4:	4b2a      	ldr	r3, [pc, #168]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	f043 0304 	orr.w	r3, r3, #4
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0304 	and.w	r3, r3, #4
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	69bb      	ldr	r3, [r7, #24]
	if (Port == GPIOD)
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4a27      	ldr	r2, [pc, #156]	; (80038ac <_ZN4GPIOC1EP12GPIO_TypeDeft+0x11c>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10d      	bne.n	800382e <_ZN4GPIOC1EP12GPIO_TypeDeft+0x9e>
		  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
 8003816:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 8003818:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381c:	f043 0308 	orr.w	r3, r3, #8
 8003820:	6313      	str	r3, [r2, #48]	; 0x30
 8003822:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	617b      	str	r3, [r7, #20]
 800382c:	697b      	ldr	r3, [r7, #20]
	if (Port == GPIOE)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x120>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10d      	bne.n	8003852 <_ZN4GPIOC1EP12GPIO_TypeDeft+0xc2>
		  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 800383c:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	f043 0310 	orr.w	r3, r3, #16
 8003844:	6313      	str	r3, [r2, #48]	; 0x30
 8003846:	4b16      	ldr	r3, [pc, #88]	; (80038a0 <_ZN4GPIOC1EP12GPIO_TypeDeft+0x110>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	693b      	ldr	r3, [r7, #16]


	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
 800385a:	605a      	str	r2, [r3, #4]
 800385c:	609a      	str	r2, [r3, #8]
 800385e:	60da      	str	r2, [r3, #12]
 8003860:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003862:	2301      	movs	r3, #1
 8003864:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003866:	2300      	movs	r3, #0
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800386a:	2301      	movs	r3, #1
 800386c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(Port, &GPIO_InitStruct);
 800386e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003872:	4619      	mov	r1, r3
 8003874:	68b8      	ldr	r0, [r7, #8]
 8003876:	f7fd fe2f 	bl	80014d8 <HAL_GPIO_Init>

	HAL_GPIO_WritePin(Port, Pin, GPIO_PIN_RESET);
 800387a:	88fb      	ldrh	r3, [r7, #6]
 800387c:	2200      	movs	r2, #0
 800387e:	4619      	mov	r1, r3
 8003880:	68b8      	ldr	r0, [r7, #8]
 8003882:	f7fd ff09 	bl	8001698 <HAL_GPIO_WritePin>
	GPIO_Port = Port;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	601a      	str	r2, [r3, #0]
	GPIO_Pin = Pin;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	809a      	strh	r2, [r3, #4]
}
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4618      	mov	r0, r3
 8003896:	3738      	adds	r7, #56	; 0x38
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40020000 	.word	0x40020000
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40020400 	.word	0x40020400
 80038a8:	40020800 	.word	0x40020800
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40021000 	.word	0x40021000

080038b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038b4:	b5b0      	push	{r4, r5, r7, lr}
 80038b6:	b096      	sub	sp, #88	; 0x58
 80038b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038ba:	f7fd fd8d 	bl	80013d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038be:	f000 f863 	bl	8003988 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80038c2:	f000 f8d5 	bl	8003a70 <_ZL12MX_GPIO_Initv>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of mutex01 */
  osMutexDef(mutex01);
 80038c6:	2300      	movs	r3, #0
 80038c8:	657b      	str	r3, [r7, #84]	; 0x54
  mutex01Handle = osMutexCreate(osMutex(mutex01));
 80038ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7fe fac5 	bl	8001e5e <osMutexCreate>
 80038d4:	4602      	mov	r2, r0
 80038d6:	4b23      	ldr	r3, [pc, #140]	; (8003964 <main+0xb0>)
 80038d8:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80038da:	4b23      	ldr	r3, [pc, #140]	; (8003968 <main+0xb4>)
 80038dc:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80038e0:	461d      	mov	r5, r3
 80038e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80038e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80038e6:	682b      	ldr	r3, [r5, #0]
 80038e8:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80038ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe fa94 	bl	8001e1e <osThreadCreate>
 80038f6:	4602      	mov	r2, r0
 80038f8:	4b1c      	ldr	r3, [pc, #112]	; (800396c <main+0xb8>)
 80038fa:	601a      	str	r2, [r3, #0]

  /* definition and creation of Led01Task */
  osThreadDef(Led01Task, vLed01Task, osPriorityHigh, 0, 128);
 80038fc:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <main+0xbc>)
 80038fe:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8003902:	461d      	mov	r5, r3
 8003904:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003906:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003908:	682b      	ldr	r3, [r5, #0]
 800390a:	6023      	str	r3, [r4, #0]
  Led01TaskHandle = osThreadCreate(osThread(Led01Task), NULL);
 800390c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003910:	2100      	movs	r1, #0
 8003912:	4618      	mov	r0, r3
 8003914:	f7fe fa83 	bl	8001e1e <osThreadCreate>
 8003918:	4602      	mov	r2, r0
 800391a:	4b16      	ldr	r3, [pc, #88]	; (8003974 <main+0xc0>)
 800391c:	601a      	str	r2, [r3, #0]

  /* definition and creation of Led02Task */
  osThreadDef(Led02Task, vLed02Task, osPriorityNormal, 0, 128);
 800391e:	4b16      	ldr	r3, [pc, #88]	; (8003978 <main+0xc4>)
 8003920:	f107 0418 	add.w	r4, r7, #24
 8003924:	461d      	mov	r5, r3
 8003926:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003928:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800392a:	682b      	ldr	r3, [r5, #0]
 800392c:	6023      	str	r3, [r4, #0]
  Led02TaskHandle = osThreadCreate(osThread(Led02Task), NULL);
 800392e:	f107 0318 	add.w	r3, r7, #24
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fa72 	bl	8001e1e <osThreadCreate>
 800393a:	4602      	mov	r2, r0
 800393c:	4b0f      	ldr	r3, [pc, #60]	; (800397c <main+0xc8>)
 800393e:	601a      	str	r2, [r3, #0]

  /* definition and creation of Led03Task */
  osThreadDef(Led03Task, vLed03Task, osPriorityLow, 0, 128);
 8003940:	4b0f      	ldr	r3, [pc, #60]	; (8003980 <main+0xcc>)
 8003942:	1d3c      	adds	r4, r7, #4
 8003944:	461d      	mov	r5, r3
 8003946:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003948:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800394a:	682b      	ldr	r3, [r5, #0]
 800394c:	6023      	str	r3, [r4, #0]
  Led03TaskHandle = osThreadCreate(osThread(Led03Task), NULL);
 800394e:	1d3b      	adds	r3, r7, #4
 8003950:	2100      	movs	r1, #0
 8003952:	4618      	mov	r0, r3
 8003954:	f7fe fa63 	bl	8001e1e <osThreadCreate>
 8003958:	4602      	mov	r2, r0
 800395a:	4b0a      	ldr	r3, [pc, #40]	; (8003984 <main+0xd0>)
 800395c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800395e:	f7fe fa59 	bl	8001e14 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003962:	e7fe      	b.n	8003962 <main+0xae>
 8003964:	2000012c 	.word	0x2000012c
 8003968:	08004018 	.word	0x08004018
 800396c:	2000011c 	.word	0x2000011c
 8003970:	08004038 	.word	0x08004038
 8003974:	20000120 	.word	0x20000120
 8003978:	08004058 	.word	0x08004058
 800397c:	20000124 	.word	0x20000124
 8003980:	08004078 	.word	0x08004078
 8003984:	20000128 	.word	0x20000128

08003988 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b094      	sub	sp, #80	; 0x50
 800398c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800398e:	f107 0320 	add.w	r3, r7, #32
 8003992:	2230      	movs	r2, #48	; 0x30
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fad9 	bl	8003f4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800399c:	f107 030c 	add.w	r3, r7, #12
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	605a      	str	r2, [r3, #4]
 80039a6:	609a      	str	r2, [r3, #8]
 80039a8:	60da      	str	r2, [r3, #12]
 80039aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ac:	2300      	movs	r3, #0
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	4a2d      	ldr	r2, [pc, #180]	; (8003a68 <_Z18SystemClock_Configv+0xe0>)
 80039b2:	4b2d      	ldr	r3, [pc, #180]	; (8003a68 <_Z18SystemClock_Configv+0xe0>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6413      	str	r3, [r2, #64]	; 0x40
 80039bc:	4b2a      	ldr	r3, [pc, #168]	; (8003a68 <_Z18SystemClock_Configv+0xe0>)
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c4:	60bb      	str	r3, [r7, #8]
 80039c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039c8:	2300      	movs	r3, #0
 80039ca:	607b      	str	r3, [r7, #4]
 80039cc:	4a27      	ldr	r2, [pc, #156]	; (8003a6c <_Z18SystemClock_Configv+0xe4>)
 80039ce:	4b27      	ldr	r3, [pc, #156]	; (8003a6c <_Z18SystemClock_Configv+0xe4>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039d6:	6013      	str	r3, [r2, #0]
 80039d8:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <_Z18SystemClock_Configv+0xe4>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80039e4:	2302      	movs	r3, #2
 80039e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80039e8:	2301      	movs	r3, #1
 80039ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80039ec:	2310      	movs	r3, #16
 80039ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039f0:	2302      	movs	r3, #2
 80039f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80039f4:	2300      	movs	r3, #0
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80039f8:	2308      	movs	r3, #8
 80039fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80039fc:	23a8      	movs	r3, #168	; 0xa8
 80039fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a00:	2302      	movs	r3, #2
 8003a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003a04:	2307      	movs	r3, #7
 8003a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a08:	f107 0320 	add.w	r3, r7, #32
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7fd fe4f 	bl	80016b0 <HAL_RCC_OscConfig>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bf14      	ite	ne
 8003a18:	2301      	movne	r3, #1
 8003a1a:	2300      	moveq	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 8003a22:	f000 f962 	bl	8003cea <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a26:	230f      	movs	r3, #15
 8003a28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a32:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003a36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a3e:	f107 030c 	add.w	r3, r7, #12
 8003a42:	2105      	movs	r1, #5
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fd ffe3 	bl	8001a10 <HAL_RCC_ClockConfig>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	bf14      	ite	ne
 8003a50:	2301      	movne	r3, #1
 8003a52:	2300      	moveq	r3, #0
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8003a5a:	f000 f946 	bl	8003cea <Error_Handler>
  }
}
 8003a5e:	bf00      	nop
 8003a60:	3750      	adds	r7, #80	; 0x50
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	40007000 	.word	0x40007000

08003a70 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a76:	1d3b      	adds	r3, r7, #4
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	609a      	str	r2, [r3, #8]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a84:	2300      	movs	r3, #0
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	4a11      	ldr	r2, [pc, #68]	; (8003ad0 <_ZL12MX_GPIO_Initv+0x60>)
 8003a8a:	4b11      	ldr	r3, [pc, #68]	; (8003ad0 <_ZL12MX_GPIO_Initv+0x60>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	6313      	str	r3, [r2, #48]	; 0x30
 8003a94:	4b0e      	ldr	r3, [pc, #56]	; (8003ad0 <_ZL12MX_GPIO_Initv+0x60>)
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED1_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8003aa6:	480b      	ldr	r0, [pc, #44]	; (8003ad4 <_ZL12MX_GPIO_Initv+0x64>)
 8003aa8:	f7fd fdf6 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED2_Pin LED1_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED3_Pin|LED4_Pin;
 8003aac:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003ab0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aba:	2300      	movs	r3, #0
 8003abc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4804      	ldr	r0, [pc, #16]	; (8003ad4 <_ZL12MX_GPIO_Initv+0x64>)
 8003ac4:	f7fd fd08 	bl	80014d8 <HAL_GPIO_Init>

}
 8003ac8:	bf00      	nop
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	40020c00 	.word	0x40020c00

08003ad8 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8003ae0:	200a      	movs	r0, #10
 8003ae2:	f7fe f9b4 	bl	8001e4e <osDelay>
 8003ae6:	e7fb      	b.n	8003ae0 <_Z16StartDefaultTaskPKv+0x8>

08003ae8 <_Z10vLed01TaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vLed01Task */
void vLed01Task(void const * argument)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  //osThreadResume(Led02TaskHandle);
	  //osThreadResume(Led03TaskHandle);
	  if(osMutexWait(mutex01Handle, 2) != osOK)
 8003af0:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <_Z10vLed01TaskPKv+0x74>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2102      	movs	r1, #2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe f9b4 	bl	8001e64 <osMutexWait>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d004      	beq.n	8003b16 <_Z10vLed01TaskPKv+0x2e>
	  {
		  HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 8003b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b10:	4813      	ldr	r0, [pc, #76]	; (8003b60 <_Z10vLed01TaskPKv+0x78>)
 8003b12:	f7fd fdc6 	bl	80016a2 <HAL_GPIO_TogglePin>
	  }

	  osDelay(20);
 8003b16:	2014      	movs	r0, #20
 8003b18:	f7fe f999 	bl	8001e4e <osDelay>

	  if(osMutexRelease(mutex01Handle) != osOK)
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <_Z10vLed01TaskPKv+0x74>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7fe f9e9 	bl	8001ef8 <osMutexRelease>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	bf14      	ite	ne
 8003b2c:	2301      	movne	r3, #1
 8003b2e:	2300      	moveq	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d004      	beq.n	8003b40 <_Z10vLed01TaskPKv+0x58>
	  {
		  HAL_GPIO_TogglePin(GPIOD,LED1_Pin);
 8003b36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b3a:	4809      	ldr	r0, [pc, #36]	; (8003b60 <_Z10vLed01TaskPKv+0x78>)
 8003b3c:	f7fd fdb1 	bl	80016a2 <HAL_GPIO_TogglePin>
	  }

	  HPC++;
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <_Z10vLed01TaskPKv+0x7c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	3301      	adds	r3, #1
 8003b46:	4a07      	ldr	r2, [pc, #28]	; (8003b64 <_Z10vLed01TaskPKv+0x7c>)
 8003b48:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(GPIOD, LED2_Pin);
 8003b4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b4e:	4804      	ldr	r0, [pc, #16]	; (8003b60 <_Z10vLed01TaskPKv+0x78>)
 8003b50:	f7fd fda7 	bl	80016a2 <HAL_GPIO_TogglePin>

	  osThreadSuspend(NULL);
 8003b54:	2000      	movs	r0, #0
 8003b56:	f7fe f9dd 	bl	8001f14 <osThreadSuspend>
	  if(osMutexWait(mutex01Handle, 2) != osOK)
 8003b5a:	e7c9      	b.n	8003af0 <_Z10vLed01TaskPKv+0x8>
 8003b5c:	2000012c 	.word	0x2000012c
 8003b60:	40020c00 	.word	0x40020c00
 8003b64:	20000130 	.word	0x20000130

08003b68 <_Z10vLed02TaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vLed02Task */
void vLed02Task(void const * argument)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vLed02Task */
  /* Infinite loop */
  for(;;)
  {
	  if (osMutexWait(mutex01Handle, 5000) == osOK)
 8003b70:	4b23      	ldr	r3, [pc, #140]	; (8003c00 <_Z10vLed02TaskPKv+0x98>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f241 3188 	movw	r1, #5000	; 0x1388
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fe f973 	bl	8001e64 <osMutexWait>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d032      	beq.n	8003bf4 <_Z10vLed02TaskPKv+0x8c>
	  {
		  if (osThreadGetState(Led01TaskHandle) != osThreadSuspended)
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	; (8003c04 <_Z10vLed02TaskPKv+0x9c>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe f9b2 	bl	8001efc <osThreadGetState>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	bf14      	ite	ne
 8003b9e:	2301      	movne	r3, #1
 8003ba0:	2300      	moveq	r3, #0
 8003ba2:	b2db      	uxtb	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <_Z10vLed02TaskPKv+0x4c>
		  {
			  HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 8003ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bac:	4816      	ldr	r0, [pc, #88]	; (8003c08 <_Z10vLed02TaskPKv+0xa0>)
 8003bae:	f7fd fd78 	bl	80016a2 <HAL_GPIO_TogglePin>
 8003bb2:	e7dd      	b.n	8003b70 <_Z10vLed02TaskPKv+0x8>
		  }
		  else
		  {
			  if (osMutexRelease(mutex01Handle) != osOK)
 8003bb4:	4b12      	ldr	r3, [pc, #72]	; (8003c00 <_Z10vLed02TaskPKv+0x98>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7fe f99d 	bl	8001ef8 <osMutexRelease>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	bf14      	ite	ne
 8003bc4:	2301      	movne	r3, #1
 8003bc6:	2300      	moveq	r3, #0
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <_Z10vLed02TaskPKv+0x70>
			  {
				  HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 8003bce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bd2:	480d      	ldr	r0, [pc, #52]	; (8003c08 <_Z10vLed02TaskPKv+0xa0>)
 8003bd4:	f7fd fd65 	bl	80016a2 <HAL_GPIO_TogglePin>
			  }

			  MPC++;
 8003bd8:	4b0c      	ldr	r3, [pc, #48]	; (8003c0c <_Z10vLed02TaskPKv+0xa4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	4a0b      	ldr	r2, [pc, #44]	; (8003c0c <_Z10vLed02TaskPKv+0xa4>)
 8003be0:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_TogglePin(GPIOD, LED3_Pin);
 8003be2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003be6:	4808      	ldr	r0, [pc, #32]	; (8003c08 <_Z10vLed02TaskPKv+0xa0>)
 8003be8:	f7fd fd5b 	bl	80016a2 <HAL_GPIO_TogglePin>
			  osThreadSuspend(NULL);
 8003bec:	2000      	movs	r0, #0
 8003bee:	f7fe f991 	bl	8001f14 <osThreadSuspend>
 8003bf2:	e7bd      	b.n	8003b70 <_Z10vLed02TaskPKv+0x8>
		  }
	  }
	  else
	  {
		  HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 8003bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bf8:	4803      	ldr	r0, [pc, #12]	; (8003c08 <_Z10vLed02TaskPKv+0xa0>)
 8003bfa:	f7fd fd52 	bl	80016a2 <HAL_GPIO_TogglePin>
	  if (osMutexWait(mutex01Handle, 5000) == osOK)
 8003bfe:	e7b7      	b.n	8003b70 <_Z10vLed02TaskPKv+0x8>
 8003c00:	2000012c 	.word	0x2000012c
 8003c04:	20000120 	.word	0x20000120
 8003c08:	40020c00 	.word	0x40020c00
 8003c0c:	20000134 	.word	0x20000134

08003c10 <_Z10vLed03TaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vLed03Task */
void vLed03Task(void const * argument)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vLed03Task */
  /* Infinite loop */
  for(;;)
  {
    if (osMutexWait(mutex01Handle, 0) == osOK)
 8003c18:	4b27      	ldr	r3, [pc, #156]	; (8003cb8 <_Z10vLed03TaskPKv+0xa8>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fe f920 	bl	8001e64 <osMutexWait>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f1      	beq.n	8003c18 <_Z10vLed03TaskPKv+0x8>
    {
    	if((osThreadGetState(Led01TaskHandle) != osThreadSuspended) || (osThreadGetState(Led02TaskHandle) != osThreadSuspended))
 8003c34:	4b21      	ldr	r3, [pc, #132]	; (8003cbc <_Z10vLed03TaskPKv+0xac>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe f95f 	bl	8001efc <osThreadGetState>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d107      	bne.n	8003c54 <_Z10vLed03TaskPKv+0x44>
 8003c44:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <_Z10vLed03TaskPKv+0xb0>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe f957 	bl	8001efc <osThreadGetState>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d001      	beq.n	8003c58 <_Z10vLed03TaskPKv+0x48>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e000      	b.n	8003c5a <_Z10vLed03TaskPKv+0x4a>
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d005      	beq.n	8003c6a <_Z10vLed03TaskPKv+0x5a>
    	{
    		HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 8003c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c62:	4818      	ldr	r0, [pc, #96]	; (8003cc4 <_Z10vLed03TaskPKv+0xb4>)
 8003c64:	f7fd fd1d 	bl	80016a2 <HAL_GPIO_TogglePin>
 8003c68:	e7d6      	b.n	8003c18 <_Z10vLed03TaskPKv+0x8>
    	}
    	else
    	{
    		osThreadResume(Led01TaskHandle);
 8003c6a:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <_Z10vLed03TaskPKv+0xac>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7fe f956 	bl	8001f20 <osThreadResume>
    		osThreadResume(Led02TaskHandle);
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <_Z10vLed03TaskPKv+0xb0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe f951 	bl	8001f20 <osThreadResume>

    		if (osMutexRelease(mutex01Handle) != osOK)
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <_Z10vLed03TaskPKv+0xa8>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fe f938 	bl	8001ef8 <osMutexRelease>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	bf14      	ite	ne
 8003c8e:	2301      	movne	r3, #1
 8003c90:	2300      	moveq	r3, #0
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d004      	beq.n	8003ca2 <_Z10vLed03TaskPKv+0x92>
    		{
    			HAL_GPIO_TogglePin(GPIOD, LED1_Pin);
 8003c98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c9c:	4809      	ldr	r0, [pc, #36]	; (8003cc4 <_Z10vLed03TaskPKv+0xb4>)
 8003c9e:	f7fd fd00 	bl	80016a2 <HAL_GPIO_TogglePin>
    		}

    		LPC++;
 8003ca2:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <_Z10vLed03TaskPKv+0xb8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	4a07      	ldr	r2, [pc, #28]	; (8003cc8 <_Z10vLed03TaskPKv+0xb8>)
 8003caa:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_TogglePin(GPIOD, LED4_Pin);
 8003cac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cb0:	4804      	ldr	r0, [pc, #16]	; (8003cc4 <_Z10vLed03TaskPKv+0xb4>)
 8003cb2:	f7fd fcf6 	bl	80016a2 <HAL_GPIO_TogglePin>
    if (osMutexWait(mutex01Handle, 0) == osOK)
 8003cb6:	e7af      	b.n	8003c18 <_Z10vLed03TaskPKv+0x8>
 8003cb8:	2000012c 	.word	0x2000012c
 8003cbc:	20000120 	.word	0x20000120
 8003cc0:	20000124 	.word	0x20000124
 8003cc4:	40020c00 	.word	0x40020c00
 8003cc8:	20000138 	.word	0x20000138

08003ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cdc:	d101      	bne.n	8003ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003cde:	f7fd fb95 	bl	800140c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cea:	b480      	push	{r7}
 8003cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cee:	bf00      	nop
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <_Z41__static_initialization_and_destruction_0ii>:
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d109      	bne.n	8003d1c <_Z41__static_initialization_and_destruction_0ii+0x24>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d104      	bne.n	8003d1c <_Z41__static_initialization_and_destruction_0ii+0x24>
GPIO gpio1(GPIOA, 12);
 8003d12:	220c      	movs	r2, #12
 8003d14:	4903      	ldr	r1, [pc, #12]	; (8003d24 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8003d16:	4804      	ldr	r0, [pc, #16]	; (8003d28 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8003d18:	f7ff fd3a 	bl	8003790 <_ZN4GPIOC1EP12GPIO_TypeDeft>
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40020000 	.word	0x40020000
 8003d28:	2000013c 	.word	0x2000013c

08003d2c <_GLOBAL__sub_I_defaultTaskHandle>:
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003d34:	2001      	movs	r0, #1
 8003d36:	f7ff ffdf 	bl	8003cf8 <_Z41__static_initialization_and_destruction_0ii>
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d3c:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d3e:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <HAL_MspInit+0x50>)
 8003d40:	2400      	movs	r4, #0
 8003d42:	9400      	str	r4, [sp, #0]
 8003d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d4a:	645a      	str	r2, [r3, #68]	; 0x44
 8003d4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d4e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003d52:	9200      	str	r2, [sp, #0]
 8003d54:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d56:	9401      	str	r4, [sp, #4]
 8003d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d5e:	641a      	str	r2, [r3, #64]	; 0x40
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d66:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d68:	4622      	mov	r2, r4
 8003d6a:	210f      	movs	r1, #15
 8003d6c:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d72:	f7fd fb6f 	bl	8001454 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003d76:	2105      	movs	r1, #5
 8003d78:	4608      	mov	r0, r1
 8003d7a:	4622      	mov	r2, r4
 8003d7c:	f7fd fb6a 	bl	8001454 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003d80:	2005      	movs	r0, #5
 8003d82:	f7fd fb9b 	bl	80014bc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d86:	b002      	add	sp, #8
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800

08003d90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d90:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8003d92:	4601      	mov	r1, r0
{
 8003d94:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8003d96:	2200      	movs	r2, #0
 8003d98:	201c      	movs	r0, #28
 8003d9a:	f7fd fb5b 	bl	8001454 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8003d9e:	201c      	movs	r0, #28
 8003da0:	f7fd fb8c 	bl	80014bc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003da4:	2500      	movs	r5, #0
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <HAL_InitTick+0x6c>)
 8003da8:	9502      	str	r5, [sp, #8]
 8003daa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8003dac:	4c14      	ldr	r4, [pc, #80]	; (8003e00 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	641a      	str	r2, [r3, #64]	; 0x40
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003dbc:	a901      	add	r1, sp, #4
 8003dbe:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8003dc0:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003dc2:	f7fd fecf 	bl	8001b64 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003dc6:	f7fd febd 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 8003dca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dce:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8003dd0:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003dd4:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8003dd6:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <HAL_InitTick+0x74>)
 8003dda:	fbb0 f0f3 	udiv	r0, r0, r3
 8003dde:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8003de0:	6060      	str	r0, [r4, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003de2:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 8003de4:	6125      	str	r5, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003de6:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8003de8:	f7fd fff8 	bl	8001ddc <HAL_TIM_Base_Init>
 8003dec:	b920      	cbnz	r0, 8003df8 <HAL_InitTick+0x68>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8003dee:	4620      	mov	r0, r4
 8003df0:	f7fd fed7 	bl	8001ba2 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003df4:	b009      	add	sp, #36	; 0x24
 8003df6:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8003df8:	2001      	movs	r0, #1
 8003dfa:	e7fb      	b.n	8003df4 <HAL_InitTick+0x64>
 8003dfc:	40023800 	.word	0x40023800
 8003e00:	20003e94 	.word	0x20003e94
 8003e04:	000f4240 	.word	0x000f4240

08003e08 <NMI_Handler>:
 8003e08:	4770      	bx	lr

08003e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e0a:	e7fe      	b.n	8003e0a <HardFault_Handler>

08003e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e0c:	e7fe      	b.n	8003e0c <MemManage_Handler>

08003e0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e0e:	e7fe      	b.n	8003e0e <BusFault_Handler>

08003e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e10:	e7fe      	b.n	8003e10 <UsageFault_Handler>

08003e12 <DebugMon_Handler>:
 8003e12:	4770      	bx	lr

08003e14 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003e14:	4770      	bx	lr
	...

08003e18 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e18:	4801      	ldr	r0, [pc, #4]	; (8003e20 <TIM2_IRQHandler+0x8>)
 8003e1a:	f7fd bed6 	b.w	8001bca <HAL_TIM_IRQHandler>
 8003e1e:	bf00      	nop
 8003e20:	20003e94 	.word	0x20003e94

08003e24 <_getpid>:
 8003e24:	2001      	movs	r0, #1
 8003e26:	4770      	bx	lr

08003e28 <_kill>:
 8003e28:	b508      	push	{r3, lr}
 8003e2a:	f000 f85b 	bl	8003ee4 <__errno>
 8003e2e:	2316      	movs	r3, #22
 8003e30:	6003      	str	r3, [r0, #0]
 8003e32:	f04f 30ff 	mov.w	r0, #4294967295
 8003e36:	bd08      	pop	{r3, pc}

08003e38 <_exit>:
 8003e38:	b508      	push	{r3, lr}
 8003e3a:	f000 f853 	bl	8003ee4 <__errno>
 8003e3e:	2316      	movs	r3, #22
 8003e40:	6003      	str	r3, [r0, #0]
 8003e42:	e7fe      	b.n	8003e42 <_exit+0xa>

08003e44 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e44:	490f      	ldr	r1, [pc, #60]	; (8003e84 <SystemInit+0x40>)
 8003e46:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003e4a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003e52:	4b0d      	ldr	r3, [pc, #52]	; (8003e88 <SystemInit+0x44>)
 8003e54:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003e56:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003e58:	f042 0201 	orr.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003e5e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003e66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003e6a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003e6c:	4a07      	ldr	r2, [pc, #28]	; (8003e8c <SystemInit+0x48>)
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e76:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003e78:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003e7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e7e:	608b      	str	r3, [r1, #8]
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	e000ed00 	.word	0xe000ed00
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	24003010 	.word	0x24003010

08003e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ec8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003e94:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003e96:	e003      	b.n	8003ea0 <LoopCopyDataInit>

08003e98 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003e98:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003e9a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003e9c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003e9e:	3104      	adds	r1, #4

08003ea0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003ea0:	480b      	ldr	r0, [pc, #44]	; (8003ed0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	; (8003ed4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003ea4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003ea6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003ea8:	d3f6      	bcc.n	8003e98 <CopyDataInit>
  ldr  r2, =_sbss
 8003eaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ed8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003eac:	e002      	b.n	8003eb4 <LoopFillZerobss>

08003eae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003eae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003eb0:	f842 3b04 	str.w	r3, [r2], #4

08003eb4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003eb4:	4b09      	ldr	r3, [pc, #36]	; (8003edc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003eb6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003eb8:	d3f9      	bcc.n	8003eae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003eba:	f7ff ffc3 	bl	8003e44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ebe:	f000 f817 	bl	8003ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ec2:	f7ff fcf7 	bl	80038b4 <main>
  bx  lr    
 8003ec6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ec8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003ecc:	08004248 	.word	0x08004248
  ldr  r0, =_sdata
 8003ed0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003ed4:	20000100 	.word	0x20000100
  ldr  r2, =_sbss
 8003ed8:	20000100 	.word	0x20000100
  ldr  r3, = _ebss
 8003edc:	20003ed8 	.word	0x20003ed8

08003ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ee0:	e7fe      	b.n	8003ee0 <ADC_IRQHandler>
	...

08003ee4 <__errno>:
 8003ee4:	4b01      	ldr	r3, [pc, #4]	; (8003eec <__errno+0x8>)
 8003ee6:	6818      	ldr	r0, [r3, #0]
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	2000000c 	.word	0x2000000c

08003ef0 <__libc_init_array>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	4e0d      	ldr	r6, [pc, #52]	; (8003f28 <__libc_init_array+0x38>)
 8003ef4:	4c0d      	ldr	r4, [pc, #52]	; (8003f2c <__libc_init_array+0x3c>)
 8003ef6:	1ba4      	subs	r4, r4, r6
 8003ef8:	10a4      	asrs	r4, r4, #2
 8003efa:	2500      	movs	r5, #0
 8003efc:	42a5      	cmp	r5, r4
 8003efe:	d109      	bne.n	8003f14 <__libc_init_array+0x24>
 8003f00:	4e0b      	ldr	r6, [pc, #44]	; (8003f30 <__libc_init_array+0x40>)
 8003f02:	4c0c      	ldr	r4, [pc, #48]	; (8003f34 <__libc_init_array+0x44>)
 8003f04:	f000 f876 	bl	8003ff4 <_init>
 8003f08:	1ba4      	subs	r4, r4, r6
 8003f0a:	10a4      	asrs	r4, r4, #2
 8003f0c:	2500      	movs	r5, #0
 8003f0e:	42a5      	cmp	r5, r4
 8003f10:	d105      	bne.n	8003f1e <__libc_init_array+0x2e>
 8003f12:	bd70      	pop	{r4, r5, r6, pc}
 8003f14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f18:	4798      	blx	r3
 8003f1a:	3501      	adds	r5, #1
 8003f1c:	e7ee      	b.n	8003efc <__libc_init_array+0xc>
 8003f1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f22:	4798      	blx	r3
 8003f24:	3501      	adds	r5, #1
 8003f26:	e7f2      	b.n	8003f0e <__libc_init_array+0x1e>
 8003f28:	0800423c 	.word	0x0800423c
 8003f2c:	0800423c 	.word	0x0800423c
 8003f30:	0800423c 	.word	0x0800423c
 8003f34:	08004244 	.word	0x08004244

08003f38 <memcpy>:
 8003f38:	b510      	push	{r4, lr}
 8003f3a:	1e43      	subs	r3, r0, #1
 8003f3c:	440a      	add	r2, r1
 8003f3e:	4291      	cmp	r1, r2
 8003f40:	d100      	bne.n	8003f44 <memcpy+0xc>
 8003f42:	bd10      	pop	{r4, pc}
 8003f44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f4c:	e7f7      	b.n	8003f3e <memcpy+0x6>

08003f4e <memset>:
 8003f4e:	4402      	add	r2, r0
 8003f50:	4603      	mov	r3, r0
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d100      	bne.n	8003f58 <memset+0xa>
 8003f56:	4770      	bx	lr
 8003f58:	f803 1b01 	strb.w	r1, [r3], #1
 8003f5c:	e7f9      	b.n	8003f52 <memset+0x4>

08003f5e <abort>:
 8003f5e:	b508      	push	{r3, lr}
 8003f60:	2006      	movs	r0, #6
 8003f62:	f000 f82b 	bl	8003fbc <raise>
 8003f66:	2001      	movs	r0, #1
 8003f68:	f7ff ff66 	bl	8003e38 <_exit>

08003f6c <_raise_r>:
 8003f6c:	291f      	cmp	r1, #31
 8003f6e:	b538      	push	{r3, r4, r5, lr}
 8003f70:	4604      	mov	r4, r0
 8003f72:	460d      	mov	r5, r1
 8003f74:	d904      	bls.n	8003f80 <_raise_r+0x14>
 8003f76:	2316      	movs	r3, #22
 8003f78:	6003      	str	r3, [r0, #0]
 8003f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f7e:	bd38      	pop	{r3, r4, r5, pc}
 8003f80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003f82:	b112      	cbz	r2, 8003f8a <_raise_r+0x1e>
 8003f84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003f88:	b94b      	cbnz	r3, 8003f9e <_raise_r+0x32>
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	f000 f830 	bl	8003ff0 <_getpid_r>
 8003f90:	462a      	mov	r2, r5
 8003f92:	4601      	mov	r1, r0
 8003f94:	4620      	mov	r0, r4
 8003f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f9a:	f000 b817 	b.w	8003fcc <_kill_r>
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d00a      	beq.n	8003fb8 <_raise_r+0x4c>
 8003fa2:	1c59      	adds	r1, r3, #1
 8003fa4:	d103      	bne.n	8003fae <_raise_r+0x42>
 8003fa6:	2316      	movs	r3, #22
 8003fa8:	6003      	str	r3, [r0, #0]
 8003faa:	2001      	movs	r0, #1
 8003fac:	bd38      	pop	{r3, r4, r5, pc}
 8003fae:	2400      	movs	r4, #0
 8003fb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003fb4:	4628      	mov	r0, r5
 8003fb6:	4798      	blx	r3
 8003fb8:	2000      	movs	r0, #0
 8003fba:	bd38      	pop	{r3, r4, r5, pc}

08003fbc <raise>:
 8003fbc:	4b02      	ldr	r3, [pc, #8]	; (8003fc8 <raise+0xc>)
 8003fbe:	4601      	mov	r1, r0
 8003fc0:	6818      	ldr	r0, [r3, #0]
 8003fc2:	f7ff bfd3 	b.w	8003f6c <_raise_r>
 8003fc6:	bf00      	nop
 8003fc8:	2000000c 	.word	0x2000000c

08003fcc <_kill_r>:
 8003fcc:	b538      	push	{r3, r4, r5, lr}
 8003fce:	4c07      	ldr	r4, [pc, #28]	; (8003fec <_kill_r+0x20>)
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	4605      	mov	r5, r0
 8003fd4:	4608      	mov	r0, r1
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	6023      	str	r3, [r4, #0]
 8003fda:	f7ff ff25 	bl	8003e28 <_kill>
 8003fde:	1c43      	adds	r3, r0, #1
 8003fe0:	d102      	bne.n	8003fe8 <_kill_r+0x1c>
 8003fe2:	6823      	ldr	r3, [r4, #0]
 8003fe4:	b103      	cbz	r3, 8003fe8 <_kill_r+0x1c>
 8003fe6:	602b      	str	r3, [r5, #0]
 8003fe8:	bd38      	pop	{r3, r4, r5, pc}
 8003fea:	bf00      	nop
 8003fec:	20003ed4 	.word	0x20003ed4

08003ff0 <_getpid_r>:
 8003ff0:	f7ff bf18 	b.w	8003e24 <_getpid>

08003ff4 <_init>:
 8003ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff6:	bf00      	nop
 8003ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ffa:	bc08      	pop	{r3}
 8003ffc:	469e      	mov	lr, r3
 8003ffe:	4770      	bx	lr

08004000 <_fini>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	bf00      	nop
 8004004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004006:	bc08      	pop	{r3}
 8004008:	469e      	mov	lr, r3
 800400a:	4770      	bx	lr
