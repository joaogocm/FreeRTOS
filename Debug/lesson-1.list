
lesson-1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08002be0  08002be0  00012be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002c48  08002c48  00012c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002c4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          00003db8  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20003dc4  20003dc4  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001342b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00002c34  00000000  00000000  00033467  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000815e  00000000  00000000  0003609b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c08  00000000  00000000  0003e200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  0003ee08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00005f56  00000000  00000000  0003fd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00004f6f  00000000  00000000  00045cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0004ac3d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002330  00000000  00000000  0004acbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000000c 	.word	0x2000000c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002bc8 	.word	0x08002bc8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000010 	.word	0x20000010
 80001cc:	08002bc8 	.word	0x08002bc8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f81b 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f002 fa8c 	bl	8002a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f002 fa60 	bl	80029cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20003d74 	.word	0x20003d74
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20003d74 	.word	0x20003d74

08000538 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800053a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000540:	041b      	lsls	r3, r3, #16
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000548:	0200      	lsls	r0, r0, #8
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000552:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	68dc      	ldr	r4, [r3, #12]
 8000562:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000566:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	2b04      	cmp	r3, #4
 800056e:	bf28      	it	cs
 8000570:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	f04f 0501 	mov.w	r5, #1
 8000578:	fa05 f303 	lsl.w	r3, r5, r3
 800057c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000580:	bf8c      	ite	hi
 8000582:	3c03      	subhi	r4, #3
 8000584:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000586:	4019      	ands	r1, r3
 8000588:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058a:	fa05 f404 	lsl.w	r4, r5, r4
 800058e:	3c01      	subs	r4, #1
 8000590:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000592:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	ea42 0201 	orr.w	r2, r2, r1
 8000598:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	bfad      	iteet	ge
 800059e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	f000 000f 	andlt.w	r0, r0, #15
 80005a6:	4b06      	ldrlt	r3, [pc, #24]	; (80005c0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	bfb5      	itete	lt
 80005ae:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000ed14 	.word	0xe000ed14

080005c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005c4:	2800      	cmp	r0, #0
 80005c6:	db08      	blt.n	80005da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c8:	0942      	lsrs	r2, r0, #5
 80005ca:	2301      	movs	r3, #1
 80005cc:	f000 001f 	and.w	r0, r0, #31
 80005d0:	fa03 f000 	lsl.w	r0, r3, r0
 80005d4:	4b01      	ldr	r3, [pc, #4]	; (80005dc <HAL_NVIC_EnableIRQ+0x18>)
 80005d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005da:	4770      	bx	lr
 80005dc:	e000e100 	.word	0xe000e100

080005e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80005e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005e4:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005e6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000798 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80005ec:	4a68      	ldr	r2, [pc, #416]	; (8000790 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80005ee:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 800079c <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005f2:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80005f4:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80005f6:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80005fa:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80005fc:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000600:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000604:	45b6      	cmp	lr, r6
 8000606:	f040 80ae 	bne.w	8000766 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800060a:	684c      	ldr	r4, [r1, #4]
 800060c:	f024 0710 	bic.w	r7, r4, #16
 8000610:	2f02      	cmp	r7, #2
 8000612:	d116      	bne.n	8000642 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000614:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000618:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800061c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000620:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000624:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000628:	f04f 0c0f 	mov.w	ip, #15
 800062c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000630:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000634:	690d      	ldr	r5, [r1, #16]
 8000636:	fa05 f50b 	lsl.w	r5, r5, fp
 800063a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800063e:	f8ca 5020 	str.w	r5, [sl, #32]
 8000642:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000646:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000648:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800064c:	fa05 f50a 	lsl.w	r5, r5, sl
 8000650:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000652:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000656:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800065a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800065e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000660:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000664:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000666:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800066a:	d811      	bhi.n	8000690 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800066c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800066e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000672:	68cf      	ldr	r7, [r1, #12]
 8000674:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000678:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800067c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800067e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000680:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000684:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000688:	409f      	lsls	r7, r3
 800068a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800068e:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000690:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000692:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000694:	688f      	ldr	r7, [r1, #8]
 8000696:	fa07 f70a 	lsl.w	r7, r7, sl
 800069a:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800069c:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800069e:	00e5      	lsls	r5, r4, #3
 80006a0:	d561      	bpl.n	8000766 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006a2:	f04f 0b00 	mov.w	fp, #0
 80006a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80006aa:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ae:	4d39      	ldr	r5, [pc, #228]	; (8000794 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80006b4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80006b8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80006bc:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80006c0:	9703      	str	r7, [sp, #12]
 80006c2:	9f03      	ldr	r7, [sp, #12]
 80006c4:	f023 0703 	bic.w	r7, r3, #3
 80006c8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80006cc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006d0:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80006d4:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006d8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80006dc:	f04f 0e0f 	mov.w	lr, #15
 80006e0:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006e4:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80006e6:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80006ea:	d043      	beq.n	8000774 <HAL_GPIO_Init+0x194>
 80006ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006f0:	42a8      	cmp	r0, r5
 80006f2:	d041      	beq.n	8000778 <HAL_GPIO_Init+0x198>
 80006f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80006f8:	42a8      	cmp	r0, r5
 80006fa:	d03f      	beq.n	800077c <HAL_GPIO_Init+0x19c>
 80006fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000700:	42a8      	cmp	r0, r5
 8000702:	d03d      	beq.n	8000780 <HAL_GPIO_Init+0x1a0>
 8000704:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000708:	42a8      	cmp	r0, r5
 800070a:	d03b      	beq.n	8000784 <HAL_GPIO_Init+0x1a4>
 800070c:	4548      	cmp	r0, r9
 800070e:	d03b      	beq.n	8000788 <HAL_GPIO_Init+0x1a8>
 8000710:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000714:	42a8      	cmp	r0, r5
 8000716:	d039      	beq.n	800078c <HAL_GPIO_Init+0x1ac>
 8000718:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800071c:	42a8      	cmp	r0, r5
 800071e:	bf14      	ite	ne
 8000720:	2508      	movne	r5, #8
 8000722:	2507      	moveq	r5, #7
 8000724:	fa05 f50c 	lsl.w	r5, r5, ip
 8000728:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800072c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800072e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000730:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000732:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000736:	bf0c      	ite	eq
 8000738:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800073a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800073c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800073e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000740:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000744:	bf0c      	ite	eq
 8000746:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000748:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800074a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800074c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800074e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000752:	bf0c      	ite	eq
 8000754:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000756:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000758:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800075a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800075c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800075e:	bf54      	ite	pl
 8000760:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000762:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000764:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000766:	3301      	adds	r3, #1
 8000768:	2b10      	cmp	r3, #16
 800076a:	f47f af44 	bne.w	80005f6 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800076e:	b005      	add	sp, #20
 8000770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000774:	465d      	mov	r5, fp
 8000776:	e7d5      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000778:	2501      	movs	r5, #1
 800077a:	e7d3      	b.n	8000724 <HAL_GPIO_Init+0x144>
 800077c:	2502      	movs	r5, #2
 800077e:	e7d1      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000780:	2503      	movs	r5, #3
 8000782:	e7cf      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000784:	2504      	movs	r5, #4
 8000786:	e7cd      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000788:	2505      	movs	r5, #5
 800078a:	e7cb      	b.n	8000724 <HAL_GPIO_Init+0x144>
 800078c:	2506      	movs	r5, #6
 800078e:	e7c9      	b.n	8000724 <HAL_GPIO_Init+0x144>
 8000790:	40013c00 	.word	0x40013c00
 8000794:	40020000 	.word	0x40020000
 8000798:	40023800 	.word	0x40023800
 800079c:	40021400 	.word	0x40021400

080007a0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007a0:	b10a      	cbz	r2, 80007a6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80007a2:	6181      	str	r1, [r0, #24]
 80007a4:	4770      	bx	lr
 80007a6:	0409      	lsls	r1, r1, #16
 80007a8:	e7fb      	b.n	80007a2 <HAL_GPIO_WritePin+0x2>

080007aa <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80007aa:	6943      	ldr	r3, [r0, #20]
 80007ac:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80007b0:	bf08      	it	eq
 80007b2:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80007b4:	6181      	str	r1, [r0, #24]
 80007b6:	4770      	bx	lr

080007b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80007b8:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80007bc:	6959      	ldr	r1, [r3, #20]
 80007be:	4201      	tst	r1, r0
 80007c0:	d002      	beq.n	80007c8 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80007c2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80007c4:	f002 f8ea 	bl	800299c <HAL_GPIO_EXTI_Callback>
 80007c8:	bd08      	pop	{r3, pc}
 80007ca:	bf00      	nop
 80007cc:	40013c00 	.word	0x40013c00

080007d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007d4:	4604      	mov	r4, r0
 80007d6:	b918      	cbnz	r0, 80007e0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80007d8:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80007da:	b002      	add	sp, #8
 80007dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007e0:	6803      	ldr	r3, [r0, #0]
 80007e2:	07dd      	lsls	r5, r3, #31
 80007e4:	d410      	bmi.n	8000808 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007e6:	6823      	ldr	r3, [r4, #0]
 80007e8:	0798      	lsls	r0, r3, #30
 80007ea:	d458      	bmi.n	800089e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	071a      	lsls	r2, r3, #28
 80007f0:	f100 809a 	bmi.w	8000928 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80007f4:	6823      	ldr	r3, [r4, #0]
 80007f6:	075b      	lsls	r3, r3, #29
 80007f8:	f100 80b8 	bmi.w	800096c <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80007fc:	69a2      	ldr	r2, [r4, #24]
 80007fe:	2a00      	cmp	r2, #0
 8000800:	f040 8119 	bne.w	8000a36 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000804:	2000      	movs	r0, #0
 8000806:	e7e8      	b.n	80007da <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000808:	4ba6      	ldr	r3, [pc, #664]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
 800080a:	689a      	ldr	r2, [r3, #8]
 800080c:	f002 020c 	and.w	r2, r2, #12
 8000810:	2a04      	cmp	r2, #4
 8000812:	d007      	beq.n	8000824 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000814:	689a      	ldr	r2, [r3, #8]
 8000816:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800081a:	2a08      	cmp	r2, #8
 800081c:	d10a      	bne.n	8000834 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	0259      	lsls	r1, r3, #9
 8000822:	d507      	bpl.n	8000834 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000824:	4b9f      	ldr	r3, [pc, #636]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	039a      	lsls	r2, r3, #14
 800082a:	d5dc      	bpl.n	80007e6 <HAL_RCC_OscConfig+0x16>
 800082c:	6863      	ldr	r3, [r4, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1d9      	bne.n	80007e6 <HAL_RCC_OscConfig+0x16>
 8000832:	e7d1      	b.n	80007d8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000834:	6863      	ldr	r3, [r4, #4]
 8000836:	4d9b      	ldr	r5, [pc, #620]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
 8000838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800083c:	d111      	bne.n	8000862 <HAL_RCC_OscConfig+0x92>
 800083e:	682b      	ldr	r3, [r5, #0]
 8000840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000844:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000846:	f7ff fe71 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800084a:	4d96      	ldr	r5, [pc, #600]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800084c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800084e:	682b      	ldr	r3, [r5, #0]
 8000850:	039b      	lsls	r3, r3, #14
 8000852:	d4c8      	bmi.n	80007e6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000854:	f7ff fe6a 	bl	800052c <HAL_GetTick>
 8000858:	1b80      	subs	r0, r0, r6
 800085a:	2864      	cmp	r0, #100	; 0x64
 800085c:	d9f7      	bls.n	800084e <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 800085e:	2003      	movs	r0, #3
 8000860:	e7bb      	b.n	80007da <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000862:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000866:	d104      	bne.n	8000872 <HAL_RCC_OscConfig+0xa2>
 8000868:	682b      	ldr	r3, [r5, #0]
 800086a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800086e:	602b      	str	r3, [r5, #0]
 8000870:	e7e5      	b.n	800083e <HAL_RCC_OscConfig+0x6e>
 8000872:	682a      	ldr	r2, [r5, #0]
 8000874:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000878:	602a      	str	r2, [r5, #0]
 800087a:	682a      	ldr	r2, [r5, #0]
 800087c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000880:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1df      	bne.n	8000846 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000886:	f7ff fe51 	bl	800052c <HAL_GetTick>
 800088a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800088c:	682b      	ldr	r3, [r5, #0]
 800088e:	039f      	lsls	r7, r3, #14
 8000890:	d5a9      	bpl.n	80007e6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000892:	f7ff fe4b 	bl	800052c <HAL_GetTick>
 8000896:	1b80      	subs	r0, r0, r6
 8000898:	2864      	cmp	r0, #100	; 0x64
 800089a:	d9f7      	bls.n	800088c <HAL_RCC_OscConfig+0xbc>
 800089c:	e7df      	b.n	800085e <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800089e:	4b81      	ldr	r3, [pc, #516]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
 80008a0:	689a      	ldr	r2, [r3, #8]
 80008a2:	f012 0f0c 	tst.w	r2, #12
 80008a6:	d007      	beq.n	80008b8 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008a8:	689a      	ldr	r2, [r3, #8]
 80008aa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80008ae:	2a08      	cmp	r2, #8
 80008b0:	d111      	bne.n	80008d6 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80008b2:	685b      	ldr	r3, [r3, #4]
 80008b4:	025e      	lsls	r6, r3, #9
 80008b6:	d40e      	bmi.n	80008d6 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008b8:	4b7a      	ldr	r3, [pc, #488]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	0795      	lsls	r5, r2, #30
 80008be:	d502      	bpl.n	80008c6 <HAL_RCC_OscConfig+0xf6>
 80008c0:	68e2      	ldr	r2, [r4, #12]
 80008c2:	2a01      	cmp	r2, #1
 80008c4:	d188      	bne.n	80007d8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	6921      	ldr	r1, [r4, #16]
 80008ca:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80008ce:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80008d2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80008d4:	e78a      	b.n	80007ec <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80008d6:	68e2      	ldr	r2, [r4, #12]
 80008d8:	4b73      	ldr	r3, [pc, #460]	; (8000aa8 <HAL_RCC_OscConfig+0x2d8>)
 80008da:	b1b2      	cbz	r2, 800090a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80008dc:	2201      	movs	r2, #1
 80008de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008e0:	f7ff fe24 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008e4:	4d6f      	ldr	r5, [pc, #444]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80008e6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80008e8:	682b      	ldr	r3, [r5, #0]
 80008ea:	0798      	lsls	r0, r3, #30
 80008ec:	d507      	bpl.n	80008fe <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80008ee:	682b      	ldr	r3, [r5, #0]
 80008f0:	6922      	ldr	r2, [r4, #16]
 80008f2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80008f6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80008fa:	602b      	str	r3, [r5, #0]
 80008fc:	e776      	b.n	80007ec <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008fe:	f7ff fe15 	bl	800052c <HAL_GetTick>
 8000902:	1b80      	subs	r0, r0, r6
 8000904:	2802      	cmp	r0, #2
 8000906:	d9ef      	bls.n	80008e8 <HAL_RCC_OscConfig+0x118>
 8000908:	e7a9      	b.n	800085e <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800090a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800090c:	f7ff fe0e 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000910:	4d64      	ldr	r5, [pc, #400]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000912:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000914:	682b      	ldr	r3, [r5, #0]
 8000916:	0799      	lsls	r1, r3, #30
 8000918:	f57f af68 	bpl.w	80007ec <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800091c:	f7ff fe06 	bl	800052c <HAL_GetTick>
 8000920:	1b80      	subs	r0, r0, r6
 8000922:	2802      	cmp	r0, #2
 8000924:	d9f6      	bls.n	8000914 <HAL_RCC_OscConfig+0x144>
 8000926:	e79a      	b.n	800085e <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000928:	6962      	ldr	r2, [r4, #20]
 800092a:	4b60      	ldr	r3, [pc, #384]	; (8000aac <HAL_RCC_OscConfig+0x2dc>)
 800092c:	b17a      	cbz	r2, 800094e <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 800092e:	2201      	movs	r2, #1
 8000930:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000932:	f7ff fdfb 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000936:	4d5b      	ldr	r5, [pc, #364]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000938:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800093a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800093c:	079f      	lsls	r7, r3, #30
 800093e:	f53f af59 	bmi.w	80007f4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000942:	f7ff fdf3 	bl	800052c <HAL_GetTick>
 8000946:	1b80      	subs	r0, r0, r6
 8000948:	2802      	cmp	r0, #2
 800094a:	d9f6      	bls.n	800093a <HAL_RCC_OscConfig+0x16a>
 800094c:	e787      	b.n	800085e <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 800094e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000950:	f7ff fdec 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000954:	4d53      	ldr	r5, [pc, #332]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8000956:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000958:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800095a:	0798      	lsls	r0, r3, #30
 800095c:	f57f af4a 	bpl.w	80007f4 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000960:	f7ff fde4 	bl	800052c <HAL_GetTick>
 8000964:	1b80      	subs	r0, r0, r6
 8000966:	2802      	cmp	r0, #2
 8000968:	d9f6      	bls.n	8000958 <HAL_RCC_OscConfig+0x188>
 800096a:	e778      	b.n	800085e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800096c:	4b4d      	ldr	r3, [pc, #308]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
 800096e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000970:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000974:	d128      	bne.n	80009c8 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	9201      	str	r2, [sp, #4]
 8000978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800097a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800097e:	641a      	str	r2, [r3, #64]	; 0x40
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	9301      	str	r3, [sp, #4]
 8000988:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800098a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800098c:	4d48      	ldr	r5, [pc, #288]	; (8000ab0 <HAL_RCC_OscConfig+0x2e0>)
 800098e:	682b      	ldr	r3, [r5, #0]
 8000990:	05d9      	lsls	r1, r3, #23
 8000992:	d51b      	bpl.n	80009cc <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000994:	68a3      	ldr	r3, [r4, #8]
 8000996:	4d43      	ldr	r5, [pc, #268]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
 8000998:	2b01      	cmp	r3, #1
 800099a:	d127      	bne.n	80009ec <HAL_RCC_OscConfig+0x21c>
 800099c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800099e:	f043 0301 	orr.w	r3, r3, #1
 80009a2:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80009a4:	f7ff fdc2 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009a8:	4d3e      	ldr	r5, [pc, #248]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80009aa:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009ac:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009b2:	079b      	lsls	r3, r3, #30
 80009b4:	d539      	bpl.n	8000a2a <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80009b6:	2e00      	cmp	r6, #0
 80009b8:	f43f af20 	beq.w	80007fc <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009bc:	4a39      	ldr	r2, [pc, #228]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
 80009be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80009c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009c4:	6413      	str	r3, [r2, #64]	; 0x40
 80009c6:	e719      	b.n	80007fc <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80009c8:	2600      	movs	r6, #0
 80009ca:	e7df      	b.n	800098c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009d4:	f7ff fdaa 	bl	800052c <HAL_GetTick>
 80009d8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009da:	682b      	ldr	r3, [r5, #0]
 80009dc:	05da      	lsls	r2, r3, #23
 80009de:	d4d9      	bmi.n	8000994 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009e0:	f7ff fda4 	bl	800052c <HAL_GetTick>
 80009e4:	1bc0      	subs	r0, r0, r7
 80009e6:	2802      	cmp	r0, #2
 80009e8:	d9f7      	bls.n	80009da <HAL_RCC_OscConfig+0x20a>
 80009ea:	e738      	b.n	800085e <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ec:	2b05      	cmp	r3, #5
 80009ee:	d104      	bne.n	80009fa <HAL_RCC_OscConfig+0x22a>
 80009f0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	672b      	str	r3, [r5, #112]	; 0x70
 80009f8:	e7d0      	b.n	800099c <HAL_RCC_OscConfig+0x1cc>
 80009fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80009fc:	f022 0201 	bic.w	r2, r2, #1
 8000a00:	672a      	str	r2, [r5, #112]	; 0x70
 8000a02:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a04:	f022 0204 	bic.w	r2, r2, #4
 8000a08:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d1ca      	bne.n	80009a4 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000a0e:	f7ff fd8d 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a12:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a16:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a18:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a1a:	0798      	lsls	r0, r3, #30
 8000a1c:	d5cb      	bpl.n	80009b6 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a1e:	f7ff fd85 	bl	800052c <HAL_GetTick>
 8000a22:	1bc0      	subs	r0, r0, r7
 8000a24:	4540      	cmp	r0, r8
 8000a26:	d9f7      	bls.n	8000a18 <HAL_RCC_OscConfig+0x248>
 8000a28:	e719      	b.n	800085e <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a2a:	f7ff fd7f 	bl	800052c <HAL_GetTick>
 8000a2e:	1bc0      	subs	r0, r0, r7
 8000a30:	4540      	cmp	r0, r8
 8000a32:	d9bd      	bls.n	80009b0 <HAL_RCC_OscConfig+0x1e0>
 8000a34:	e713      	b.n	800085e <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000a36:	4d1b      	ldr	r5, [pc, #108]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
 8000a38:	68ab      	ldr	r3, [r5, #8]
 8000a3a:	f003 030c 	and.w	r3, r3, #12
 8000a3e:	2b08      	cmp	r3, #8
 8000a40:	f43f aeca 	beq.w	80007d8 <HAL_RCC_OscConfig+0x8>
 8000a44:	4e1b      	ldr	r6, [pc, #108]	; (8000ab4 <HAL_RCC_OscConfig+0x2e4>)
 8000a46:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a48:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000a4a:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a4c:	d134      	bne.n	8000ab8 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000a4e:	f7ff fd6d 	bl	800052c <HAL_GetTick>
 8000a52:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000a54:	682b      	ldr	r3, [r5, #0]
 8000a56:	0199      	lsls	r1, r3, #6
 8000a58:	d41e      	bmi.n	8000a98 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a5a:	6a22      	ldr	r2, [r4, #32]
 8000a5c:	69e3      	ldr	r3, [r4, #28]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000a62:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000a66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000a68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000a6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a6e:	4c0d      	ldr	r4, [pc, #52]	; (8000aa4 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000a70:	0852      	lsrs	r2, r2, #1
 8000a72:	3a01      	subs	r2, #1
 8000a74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a78:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000a7e:	f7ff fd55 	bl	800052c <HAL_GetTick>
 8000a82:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	019a      	lsls	r2, r3, #6
 8000a88:	f53f aebc 	bmi.w	8000804 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a8c:	f7ff fd4e 	bl	800052c <HAL_GetTick>
 8000a90:	1b40      	subs	r0, r0, r5
 8000a92:	2802      	cmp	r0, #2
 8000a94:	d9f6      	bls.n	8000a84 <HAL_RCC_OscConfig+0x2b4>
 8000a96:	e6e2      	b.n	800085e <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a98:	f7ff fd48 	bl	800052c <HAL_GetTick>
 8000a9c:	1bc0      	subs	r0, r0, r7
 8000a9e:	2802      	cmp	r0, #2
 8000aa0:	d9d8      	bls.n	8000a54 <HAL_RCC_OscConfig+0x284>
 8000aa2:	e6dc      	b.n	800085e <HAL_RCC_OscConfig+0x8e>
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	42470000 	.word	0x42470000
 8000aac:	42470e80 	.word	0x42470e80
 8000ab0:	40007000 	.word	0x40007000
 8000ab4:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8000ab8:	f7ff fd38 	bl	800052c <HAL_GetTick>
 8000abc:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000abe:	682b      	ldr	r3, [r5, #0]
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	f57f ae9f 	bpl.w	8000804 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ac6:	f7ff fd31 	bl	800052c <HAL_GetTick>
 8000aca:	1b00      	subs	r0, r0, r4
 8000acc:	2802      	cmp	r0, #2
 8000ace:	d9f6      	bls.n	8000abe <HAL_RCC_OscConfig+0x2ee>
 8000ad0:	e6c5      	b.n	800085e <HAL_RCC_OscConfig+0x8e>
 8000ad2:	bf00      	nop

08000ad4 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ad4:	4913      	ldr	r1, [pc, #76]	; (8000b24 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ad6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ad8:	688b      	ldr	r3, [r1, #8]
 8000ada:	f003 030c 	and.w	r3, r3, #12
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	d003      	beq.n	8000aea <HAL_RCC_GetSysClockFreq+0x16>
 8000ae2:	2b08      	cmp	r3, #8
 8000ae4:	d003      	beq.n	8000aee <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ae6:	4810      	ldr	r0, [pc, #64]	; (8000b28 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ae8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000aea:	4810      	ldr	r0, [pc, #64]	; (8000b2c <HAL_RCC_GetSysClockFreq+0x58>)
 8000aec:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000aee:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000af0:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000af2:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000af4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000af8:	bf14      	ite	ne
 8000afa:	480c      	ldrne	r0, [pc, #48]	; (8000b2c <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000afc:	480a      	ldreq	r0, [pc, #40]	; (8000b28 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000afe:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000b02:	bf18      	it	ne
 8000b04:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000b06:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000b0a:	fba1 0100 	umull	r0, r1, r1, r0
 8000b0e:	f7ff fb5f 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000b12:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <HAL_RCC_GetSysClockFreq+0x50>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000b1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b22:	bd08      	pop	{r3, pc}
 8000b24:	40023800 	.word	0x40023800
 8000b28:	00f42400 	.word	0x00f42400
 8000b2c:	007a1200 	.word	0x007a1200

08000b30 <HAL_RCC_ClockConfig>:
{
 8000b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b34:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b36:	4604      	mov	r4, r0
 8000b38:	b910      	cbnz	r0, 8000b40 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b40:	4b44      	ldr	r3, [pc, #272]	; (8000c54 <HAL_RCC_ClockConfig+0x124>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	f002 020f 	and.w	r2, r2, #15
 8000b48:	428a      	cmp	r2, r1
 8000b4a:	d328      	bcc.n	8000b9e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b4c:	6821      	ldr	r1, [r4, #0]
 8000b4e:	078f      	lsls	r7, r1, #30
 8000b50:	d42d      	bmi.n	8000bae <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b52:	07c8      	lsls	r0, r1, #31
 8000b54:	d440      	bmi.n	8000bd8 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b56:	4b3f      	ldr	r3, [pc, #252]	; (8000c54 <HAL_RCC_ClockConfig+0x124>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	f002 020f 	and.w	r2, r2, #15
 8000b5e:	4295      	cmp	r5, r2
 8000b60:	d366      	bcc.n	8000c30 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b62:	6822      	ldr	r2, [r4, #0]
 8000b64:	0751      	lsls	r1, r2, #29
 8000b66:	d46c      	bmi.n	8000c42 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b68:	0713      	lsls	r3, r2, #28
 8000b6a:	d507      	bpl.n	8000b7c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b6c:	4a3a      	ldr	r2, [pc, #232]	; (8000c58 <HAL_RCC_ClockConfig+0x128>)
 8000b6e:	6921      	ldr	r1, [r4, #16]
 8000b70:	6893      	ldr	r3, [r2, #8]
 8000b72:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000b76:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000b7a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000b7c:	f7ff ffaa 	bl	8000ad4 <HAL_RCC_GetSysClockFreq>
 8000b80:	4b35      	ldr	r3, [pc, #212]	; (8000c58 <HAL_RCC_ClockConfig+0x128>)
 8000b82:	4a36      	ldr	r2, [pc, #216]	; (8000c5c <HAL_RCC_ClockConfig+0x12c>)
 8000b84:	689b      	ldr	r3, [r3, #8]
 8000b86:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000b8a:	5cd3      	ldrb	r3, [r2, r3]
 8000b8c:	40d8      	lsrs	r0, r3
 8000b8e:	4b34      	ldr	r3, [pc, #208]	; (8000c60 <HAL_RCC_ClockConfig+0x130>)
 8000b90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f001 ff44 	bl	8002a20 <HAL_InitTick>
  return HAL_OK;
 8000b98:	2000      	movs	r0, #0
 8000b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b9e:	b2ca      	uxtb	r2, r1
 8000ba0:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f003 030f 	and.w	r3, r3, #15
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	d1c6      	bne.n	8000b3a <HAL_RCC_ClockConfig+0xa>
 8000bac:	e7ce      	b.n	8000b4c <HAL_RCC_ClockConfig+0x1c>
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bb0:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	689a      	ldrne	r2, [r3, #8]
 8000bb8:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000bbc:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bbe:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bc0:	bf42      	ittt	mi
 8000bc2:	689a      	ldrmi	r2, [r3, #8]
 8000bc4:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000bc8:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	68a0      	ldr	r0, [r4, #8]
 8000bce:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000bd2:	4302      	orrs	r2, r0
 8000bd4:	609a      	str	r2, [r3, #8]
 8000bd6:	e7bc      	b.n	8000b52 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000bd8:	6862      	ldr	r2, [r4, #4]
 8000bda:	4b1f      	ldr	r3, [pc, #124]	; (8000c58 <HAL_RCC_ClockConfig+0x128>)
 8000bdc:	2a01      	cmp	r2, #1
 8000bde:	d11d      	bne.n	8000c1c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000be6:	d0a8      	beq.n	8000b3a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000be8:	4e1b      	ldr	r6, [pc, #108]	; (8000c58 <HAL_RCC_ClockConfig+0x128>)
 8000bea:	68b3      	ldr	r3, [r6, #8]
 8000bec:	f023 0303 	bic.w	r3, r3, #3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000bf4:	f7ff fc9a 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bf8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000bfc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bfe:	68b3      	ldr	r3, [r6, #8]
 8000c00:	6862      	ldr	r2, [r4, #4]
 8000c02:	f003 030c 	and.w	r3, r3, #12
 8000c06:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c0a:	d0a4      	beq.n	8000b56 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c0c:	f7ff fc8e 	bl	800052c <HAL_GetTick>
 8000c10:	1bc0      	subs	r0, r0, r7
 8000c12:	4540      	cmp	r0, r8
 8000c14:	d9f3      	bls.n	8000bfe <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8000c16:	2003      	movs	r0, #3
}
 8000c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c1c:	1e91      	subs	r1, r2, #2
 8000c1e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c20:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c22:	d802      	bhi.n	8000c2a <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c24:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000c28:	e7dd      	b.n	8000be6 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2a:	f013 0f02 	tst.w	r3, #2
 8000c2e:	e7da      	b.n	8000be6 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c30:	b2ea      	uxtb	r2, r5
 8000c32:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 030f 	and.w	r3, r3, #15
 8000c3a:	429d      	cmp	r5, r3
 8000c3c:	f47f af7d 	bne.w	8000b3a <HAL_RCC_ClockConfig+0xa>
 8000c40:	e78f      	b.n	8000b62 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c42:	4905      	ldr	r1, [pc, #20]	; (8000c58 <HAL_RCC_ClockConfig+0x128>)
 8000c44:	68e0      	ldr	r0, [r4, #12]
 8000c46:	688b      	ldr	r3, [r1, #8]
 8000c48:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c4c:	4303      	orrs	r3, r0
 8000c4e:	608b      	str	r3, [r1, #8]
 8000c50:	e78a      	b.n	8000b68 <HAL_RCC_ClockConfig+0x38>
 8000c52:	bf00      	nop
 8000c54:	40023c00 	.word	0x40023c00
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	08002c23 	.word	0x08002c23
 8000c60:	20000008 	.word	0x20000008

08000c64 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000c66:	4a05      	ldr	r2, [pc, #20]	; (8000c7c <HAL_RCC_GetPCLK1Freq+0x18>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000c6e:	5cd3      	ldrb	r3, [r2, r3]
 8000c70:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000c72:	6810      	ldr	r0, [r2, #0]
}
 8000c74:	40d8      	lsrs	r0, r3
 8000c76:	4770      	bx	lr
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	08002c33 	.word	0x08002c33
 8000c80:	20000008 	.word	0x20000008

08000c84 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c84:	230f      	movs	r3, #15
 8000c86:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000c88:	4b0b      	ldr	r3, [pc, #44]	; (8000cb8 <HAL_RCC_GetClockConfig+0x34>)
 8000c8a:	689a      	ldr	r2, [r3, #8]
 8000c8c:	f002 0203 	and.w	r2, r2, #3
 8000c90:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8000c98:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000c9a:	689a      	ldr	r2, [r3, #8]
 8000c9c:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8000ca0:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000ca2:	689b      	ldr	r3, [r3, #8]
 8000ca4:	08db      	lsrs	r3, r3, #3
 8000ca6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000caa:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_RCC_GetClockConfig+0x38>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 030f 	and.w	r3, r3, #15
 8000cb4:	600b      	str	r3, [r1, #0]
 8000cb6:	4770      	bx	lr
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40023c00 	.word	0x40023c00

08000cc0 <HAL_TIM_Base_MspInit>:
 8000cc0:	4770      	bx	lr

08000cc2 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000cc2:	6803      	ldr	r3, [r0, #0]
 8000cc4:	68da      	ldr	r2, [r3, #12]
 8000cc6:	f042 0201 	orr.w	r2, r2, #1
 8000cca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8000cd2:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 8000cd4:	bf1e      	ittt	ne
 8000cd6:	681a      	ldrne	r2, [r3, #0]
 8000cd8:	f042 0201 	orrne.w	r2, r2, #1
 8000cdc:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8000cde:	2000      	movs	r0, #0
 8000ce0:	4770      	bx	lr

08000ce2 <HAL_TIM_OC_DelayElapsedCallback>:
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_TIM_IC_CaptureCallback>:
 8000ce4:	4770      	bx	lr

08000ce6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000ce6:	4770      	bx	lr

08000ce8 <HAL_TIM_TriggerCallback>:
 8000ce8:	4770      	bx	lr

08000cea <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cea:	6803      	ldr	r3, [r0, #0]
 8000cec:	691a      	ldr	r2, [r3, #16]
 8000cee:	0791      	lsls	r1, r2, #30
{
 8000cf0:	b510      	push	{r4, lr}
 8000cf2:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000cf4:	d50e      	bpl.n	8000d14 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8000cf6:	68da      	ldr	r2, [r3, #12]
 8000cf8:	0792      	lsls	r2, r2, #30
 8000cfa:	d50b      	bpl.n	8000d14 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000cfc:	f06f 0202 	mvn.w	r2, #2
 8000d00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d02:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d04:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d06:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000d08:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000d0a:	d077      	beq.n	8000dfc <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8000d0c:	f7ff ffea 	bl	8000ce4 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d10:	2300      	movs	r3, #0
 8000d12:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000d14:	6823      	ldr	r3, [r4, #0]
 8000d16:	691a      	ldr	r2, [r3, #16]
 8000d18:	0750      	lsls	r0, r2, #29
 8000d1a:	d510      	bpl.n	8000d3e <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	0751      	lsls	r1, r2, #29
 8000d20:	d50d      	bpl.n	8000d3e <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8000d22:	f06f 0204 	mvn.w	r2, #4
 8000d26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d28:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d2a:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d2c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000d30:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d32:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000d34:	d068      	beq.n	8000e08 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d36:	f7ff ffd5 	bl	8000ce4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	691a      	ldr	r2, [r3, #16]
 8000d42:	0712      	lsls	r2, r2, #28
 8000d44:	d50f      	bpl.n	8000d66 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	0710      	lsls	r0, r2, #28
 8000d4a:	d50c      	bpl.n	8000d66 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8000d4c:	f06f 0208 	mvn.w	r2, #8
 8000d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d52:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d54:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d56:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000d58:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d5a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000d5c:	d05a      	beq.n	8000e14 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d5e:	f7ff ffc1 	bl	8000ce4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d62:	2300      	movs	r3, #0
 8000d64:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000d66:	6823      	ldr	r3, [r4, #0]
 8000d68:	691a      	ldr	r2, [r3, #16]
 8000d6a:	06d2      	lsls	r2, r2, #27
 8000d6c:	d510      	bpl.n	8000d90 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8000d6e:	68da      	ldr	r2, [r3, #12]
 8000d70:	06d0      	lsls	r0, r2, #27
 8000d72:	d50d      	bpl.n	8000d90 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8000d74:	f06f 0210 	mvn.w	r2, #16
 8000d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d7a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d7c:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d7e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000d82:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8000d84:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000d86:	d04b      	beq.n	8000e20 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8000d88:	f7ff ffac 	bl	8000ce4 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	691a      	ldr	r2, [r3, #16]
 8000d94:	07d1      	lsls	r1, r2, #31
 8000d96:	d508      	bpl.n	8000daa <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8000d98:	68da      	ldr	r2, [r3, #12]
 8000d9a:	07d2      	lsls	r2, r2, #31
 8000d9c:	d505      	bpl.n	8000daa <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8000d9e:	f06f 0201 	mvn.w	r2, #1
 8000da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8000da4:	4620      	mov	r0, r4
 8000da6:	f001 fe09 	bl	80029bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000daa:	6823      	ldr	r3, [r4, #0]
 8000dac:	691a      	ldr	r2, [r3, #16]
 8000dae:	0610      	lsls	r0, r2, #24
 8000db0:	d508      	bpl.n	8000dc4 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	0611      	lsls	r1, r2, #24
 8000db6:	d505      	bpl.n	8000dc4 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8000db8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	f000 f8b7 	bl	8000f32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000dc4:	6823      	ldr	r3, [r4, #0]
 8000dc6:	691a      	ldr	r2, [r3, #16]
 8000dc8:	0652      	lsls	r2, r2, #25
 8000dca:	d508      	bpl.n	8000dde <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	0650      	lsls	r0, r2, #25
 8000dd0:	d505      	bpl.n	8000dde <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8000dd2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f7ff ff85 	bl	8000ce8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000dde:	6823      	ldr	r3, [r4, #0]
 8000de0:	691a      	ldr	r2, [r3, #16]
 8000de2:	0691      	lsls	r1, r2, #26
 8000de4:	d522      	bpl.n	8000e2c <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	0692      	lsls	r2, r2, #26
 8000dea:	d51f      	bpl.n	8000e2c <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000dec:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8000df0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8000df2:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8000df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8000df8:	f000 b89a 	b.w	8000f30 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000dfc:	f7ff ff71 	bl	8000ce2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e00:	4620      	mov	r0, r4
 8000e02:	f7ff ff70 	bl	8000ce6 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e06:	e783      	b.n	8000d10 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e08:	f7ff ff6b 	bl	8000ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	f7ff ff6a 	bl	8000ce6 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e12:	e792      	b.n	8000d3a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e14:	f7ff ff65 	bl	8000ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f7ff ff64 	bl	8000ce6 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e1e:	e7a0      	b.n	8000d62 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000e20:	f7ff ff5f 	bl	8000ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000e24:	4620      	mov	r0, r4
 8000e26:	f7ff ff5e 	bl	8000ce6 <HAL_TIM_PWM_PulseFinishedCallback>
 8000e2a:	e7af      	b.n	8000d8c <HAL_TIM_IRQHandler+0xa2>
 8000e2c:	bd10      	pop	{r4, pc}
	...

08000e30 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e30:	4a30      	ldr	r2, [pc, #192]	; (8000ef4 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8000e32:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000e34:	4290      	cmp	r0, r2
 8000e36:	d012      	beq.n	8000e5e <TIM_Base_SetConfig+0x2e>
 8000e38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e3c:	d00f      	beq.n	8000e5e <TIM_Base_SetConfig+0x2e>
 8000e3e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d00b      	beq.n	8000e5e <TIM_Base_SetConfig+0x2e>
 8000e46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e4a:	4290      	cmp	r0, r2
 8000e4c:	d007      	beq.n	8000e5e <TIM_Base_SetConfig+0x2e>
 8000e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e52:	4290      	cmp	r0, r2
 8000e54:	d003      	beq.n	8000e5e <TIM_Base_SetConfig+0x2e>
 8000e56:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e5a:	4290      	cmp	r0, r2
 8000e5c:	d119      	bne.n	8000e92 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000e5e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8000e64:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000e66:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <TIM_Base_SetConfig+0xc4>)
 8000e68:	4290      	cmp	r0, r2
 8000e6a:	d029      	beq.n	8000ec0 <TIM_Base_SetConfig+0x90>
 8000e6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000e70:	d026      	beq.n	8000ec0 <TIM_Base_SetConfig+0x90>
 8000e72:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8000e76:	4290      	cmp	r0, r2
 8000e78:	d022      	beq.n	8000ec0 <TIM_Base_SetConfig+0x90>
 8000e7a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	d01e      	beq.n	8000ec0 <TIM_Base_SetConfig+0x90>
 8000e82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d01a      	beq.n	8000ec0 <TIM_Base_SetConfig+0x90>
 8000e8a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8000e8e:	4290      	cmp	r0, r2
 8000e90:	d016      	beq.n	8000ec0 <TIM_Base_SetConfig+0x90>
 8000e92:	4a19      	ldr	r2, [pc, #100]	; (8000ef8 <TIM_Base_SetConfig+0xc8>)
 8000e94:	4290      	cmp	r0, r2
 8000e96:	d013      	beq.n	8000ec0 <TIM_Base_SetConfig+0x90>
 8000e98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000e9c:	4290      	cmp	r0, r2
 8000e9e:	d00f      	beq.n	8000ec0 <TIM_Base_SetConfig+0x90>
 8000ea0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ea4:	4290      	cmp	r0, r2
 8000ea6:	d00b      	beq.n	8000ec0 <TIM_Base_SetConfig+0x90>
 8000ea8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8000eac:	4290      	cmp	r0, r2
 8000eae:	d007      	beq.n	8000ec0 <TIM_Base_SetConfig+0x90>
 8000eb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000eb4:	4290      	cmp	r0, r2
 8000eb6:	d003      	beq.n	8000ec0 <TIM_Base_SetConfig+0x90>
 8000eb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ebc:	4290      	cmp	r0, r2
 8000ebe:	d103      	bne.n	8000ec8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ec0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000ec6:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000ec8:	694a      	ldr	r2, [r1, #20]
 8000eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000ece:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000ed0:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ed2:	688b      	ldr	r3, [r1, #8]
 8000ed4:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8000ed6:	680b      	ldr	r3, [r1, #0]
 8000ed8:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <TIM_Base_SetConfig+0xc4>)
 8000edc:	4298      	cmp	r0, r3
 8000ede:	d003      	beq.n	8000ee8 <TIM_Base_SetConfig+0xb8>
 8000ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000ee4:	4298      	cmp	r0, r3
 8000ee6:	d101      	bne.n	8000eec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000ee8:	690b      	ldr	r3, [r1, #16]
 8000eea:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8000eec:	2301      	movs	r3, #1
 8000eee:	6143      	str	r3, [r0, #20]
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40010000 	.word	0x40010000
 8000ef8:	40014000 	.word	0x40014000

08000efc <HAL_TIM_Base_Init>:
{
 8000efc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8000efe:	4604      	mov	r4, r0
 8000f00:	b1a0      	cbz	r0, 8000f2c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8000f02:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f0a:	b91b      	cbnz	r3, 8000f14 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000f0c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000f10:	f7ff fed6 	bl	8000cc0 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8000f14:	2302      	movs	r3, #2
 8000f16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f1a:	6820      	ldr	r0, [r4, #0]
 8000f1c:	1d21      	adds	r1, r4, #4
 8000f1e:	f7ff ff87 	bl	8000e30 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8000f22:	2301      	movs	r3, #1
 8000f24:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000f28:	2000      	movs	r0, #0
 8000f2a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f2c:	2001      	movs	r0, #1
}
 8000f2e:	bd10      	pop	{r4, pc}

08000f30 <HAL_TIMEx_CommutCallback>:
 8000f30:	4770      	bx	lr

08000f32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8000f32:	4770      	bx	lr

08000f34 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8000f34:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8000f36:	f001 f887 	bl	8002048 <vTaskStartScheduler>
  
  return osOK;
}
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	bd08      	pop	{r3, pc}

08000f3e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8000f3e:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f40:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8000f44:	8a02      	ldrh	r2, [r0, #16]
{
 8000f46:	460b      	mov	r3, r1
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f48:	e890 0022 	ldmia.w	r0, {r1, r5}
{
 8000f4c:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 8000f4e:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8000f50:	bf14      	ite	ne
 8000f52:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8000f54:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8000f56:	a803      	add	r0, sp, #12
 8000f58:	9001      	str	r0, [sp, #4]
 8000f5a:	9400      	str	r4, [sp, #0]
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	f000 ff11 	bl	8001d84 <xTaskCreate>
 8000f62:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8000f64:	bf0c      	ite	eq
 8000f66:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8000f68:	2000      	movne	r0, #0
}
 8000f6a:	b005      	add	sp, #20
 8000f6c:	bd30      	pop	{r4, r5, pc}

08000f6e <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8000f6e:	2901      	cmp	r1, #1
{ 
 8000f70:	b510      	push	{r4, lr}
 8000f72:	4608      	mov	r0, r1
  if (count == 1) {
 8000f74:	d10c      	bne.n	8000f90 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8000f76:	2203      	movs	r2, #3
 8000f78:	2100      	movs	r1, #0
 8000f7a:	f000 fc1d 	bl	80017b8 <xQueueGenericCreate>
 8000f7e:	4604      	mov	r4, r0
 8000f80:	b120      	cbz	r0, 8000f8c <osSemaphoreCreate+0x1e>
 8000f82:	2300      	movs	r3, #0
 8000f84:	461a      	mov	r2, r3
 8000f86:	4619      	mov	r1, r3
 8000f88:	f000 fc38 	bl	80017fc <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	bd10      	pop	{r4, pc}
    return NULL;
 8000f90:	2400      	movs	r4, #0
 8000f92:	e7fb      	b.n	8000f8c <osSemaphoreCreate+0x1e>

08000f94 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8000f94:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8000f96:	2400      	movs	r4, #0
 8000f98:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8000f9a:	b1e0      	cbz	r0, 8000fd6 <osSemaphoreWait+0x42>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8000f9c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8000fa0:	b1a3      	cbz	r3, 8000fcc <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8000fa2:	aa01      	add	r2, sp, #4
 8000fa4:	4621      	mov	r1, r4
 8000fa6:	f000 fdf3 	bl	8001b90 <xQueueReceiveFromISR>
 8000faa:	2801      	cmp	r0, #1
 8000fac:	d002      	beq.n	8000fb4 <osSemaphoreWait+0x20>
      return osErrorOS;
 8000fae:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8000fb0:	b002      	add	sp, #8
 8000fb2:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8000fb4:	9b01      	ldr	r3, [sp, #4]
 8000fb6:	b13b      	cbz	r3, 8000fc8 <osSemaphoreWait+0x34>
 8000fb8:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <osSemaphoreWait+0x48>)
 8000fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	f3bf 8f4f 	dsb	sy
 8000fc4:	f3bf 8f6f 	isb	sy
  return osOK;
 8000fc8:	2000      	movs	r0, #0
 8000fca:	e7f1      	b.n	8000fb0 <osSemaphoreWait+0x1c>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8000fcc:	f000 fd20 	bl	8001a10 <xQueueSemaphoreTake>
 8000fd0:	2801      	cmp	r0, #1
 8000fd2:	d1ec      	bne.n	8000fae <osSemaphoreWait+0x1a>
 8000fd4:	e7f8      	b.n	8000fc8 <osSemaphoreWait+0x34>
    return osErrorParameter;
 8000fd6:	2080      	movs	r0, #128	; 0x80
 8000fd8:	e7ea      	b.n	8000fb0 <osSemaphoreWait+0x1c>
 8000fda:	bf00      	nop
 8000fdc:	e000ed04 	.word	0xe000ed04

08000fe0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8000fe0:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8000fe2:	2400      	movs	r4, #0
 8000fe4:	9401      	str	r4, [sp, #4]
 8000fe6:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8000fea:	b193      	cbz	r3, 8001012 <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8000fec:	a901      	add	r1, sp, #4
 8000fee:	f000 fcbb 	bl	8001968 <xQueueGiveFromISR>
 8000ff2:	2801      	cmp	r0, #1
 8000ff4:	d113      	bne.n	800101e <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8000ff6:	9b01      	ldr	r3, [sp, #4]
 8000ff8:	b913      	cbnz	r3, 8001000 <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8000ffa:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8000ffc:	b002      	add	sp, #8
 8000ffe:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <osSemaphoreRelease+0x44>)
 8001002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	f3bf 8f4f 	dsb	sy
 800100c:	f3bf 8f6f 	isb	sy
 8001010:	e7f3      	b.n	8000ffa <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001012:	461a      	mov	r2, r3
 8001014:	4619      	mov	r1, r3
 8001016:	f000 fbf1 	bl	80017fc <xQueueGenericSend>
 800101a:	2801      	cmp	r0, #1
 800101c:	d0ed      	beq.n	8000ffa <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 800101e:	20ff      	movs	r0, #255	; 0xff
 8001020:	e7ec      	b.n	8000ffc <osSemaphoreRelease+0x1c>
 8001022:	bf00      	nop
 8001024:	e000ed04 	.word	0xe000ed04

08001028 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8001028:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800102a:	f001 f995 	bl	8002358 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 800102e:	2000      	movs	r0, #0
 8001030:	bd08      	pop	{r3, pc}
	...

08001034 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8001034:	b508      	push	{r3, lr}
 8001036:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 800103a:	b16b      	cbz	r3, 8001058 <osThreadResume+0x24>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 800103c:	f000 ffb4 	bl	8001fa8 <xTaskResumeFromISR>
 8001040:	2801      	cmp	r0, #1
 8001042:	d107      	bne.n	8001054 <osThreadResume+0x20>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <osThreadResume+0x2c>)
 8001046:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	f3bf 8f4f 	dsb	sy
 8001050:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8001054:	2000      	movs	r0, #0
 8001056:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 8001058:	f000 ff64 	bl	8001f24 <vTaskResume>
 800105c:	e7fa      	b.n	8001054 <osThreadResume+0x20>
 800105e:	bf00      	nop
 8001060:	e000ed04 	.word	0xe000ed04

08001064 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001064:	f100 0308 	add.w	r3, r0, #8
 8001068:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800106a:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800106e:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001070:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001072:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001074:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001076:	6003      	str	r3, [r0, #0]
 8001078:	4770      	bx	lr

0800107a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800107a:	2300      	movs	r3, #0
 800107c:	6103      	str	r3, [r0, #16]
 800107e:	4770      	bx	lr

08001080 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001080:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001082:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001088:	689a      	ldr	r2, [r3, #8]
 800108a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800108c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800108e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001090:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001092:	3301      	adds	r3, #1
 8001094:	6003      	str	r3, [r0, #0]
 8001096:	4770      	bx	lr

08001098 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001098:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800109a:	1c53      	adds	r3, r2, #1
{
 800109c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800109e:	d10a      	bne.n	80010b6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80010a0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80010a6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80010a8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80010aa:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80010ac:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80010ae:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80010b0:	3301      	adds	r3, #1
 80010b2:	6003      	str	r3, [r0, #0]
 80010b4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80010b6:	f100 0308 	add.w	r3, r0, #8
 80010ba:	685c      	ldr	r4, [r3, #4]
 80010bc:	6825      	ldr	r5, [r4, #0]
 80010be:	42aa      	cmp	r2, r5
 80010c0:	d3ef      	bcc.n	80010a2 <vListInsert+0xa>
 80010c2:	4623      	mov	r3, r4
 80010c4:	e7f9      	b.n	80010ba <vListInsert+0x22>

080010c6 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80010c6:	6841      	ldr	r1, [r0, #4]
 80010c8:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80010ca:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80010cc:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80010ce:	6882      	ldr	r2, [r0, #8]
 80010d0:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80010d2:	6859      	ldr	r1, [r3, #4]
 80010d4:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80010d6:	bf08      	it	eq
 80010d8:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80010da:	2200      	movs	r2, #0
 80010dc:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80010de:	681a      	ldr	r2, [r3, #0]
 80010e0:	3a01      	subs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80010e4:	6818      	ldr	r0, [r3, #0]
}
 80010e6:	4770      	bx	lr

080010e8 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80010e8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <prvTaskExitError+0x3c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	d008      	beq.n	8001108 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80010f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010fa:	f383 8811 	msr	BASEPRI, r3
 80010fe:	f3bf 8f6f 	isb	sy
 8001102:	f3bf 8f4f 	dsb	sy
 8001106:	e7fe      	b.n	8001106 <prvTaskExitError+0x1e>
 8001108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800110c:	f383 8811 	msr	BASEPRI, r3
 8001110:	f3bf 8f6f 	isb	sy
 8001114:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001118:	9b01      	ldr	r3, [sp, #4]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0fc      	beq.n	8001118 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800111e:	b002      	add	sp, #8
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	20000004 	.word	0x20000004

08001128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <prvPortStartFirstTask+0x24>)
 800112a:	6800      	ldr	r0, [r0, #0]
 800112c:	6800      	ldr	r0, [r0, #0]
 800112e:	f380 8808 	msr	MSP, r0
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	f380 8814 	msr	CONTROL, r0
 800113a:	b662      	cpsie	i
 800113c:	b661      	cpsie	f
 800113e:	f3bf 8f4f 	dsb	sy
 8001142:	f3bf 8f6f 	isb	sy
 8001146:	df00      	svc	0
 8001148:	bf00      	nop
 800114a:	0000      	.short	0x0000
 800114c:	e000ed08 	.word	0xe000ed08

08001150 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001150:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001160 <vPortEnableVFP+0x10>
 8001154:	6801      	ldr	r1, [r0, #0]
 8001156:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800115a:	6001      	str	r1, [r0, #0]
 800115c:	4770      	bx	lr
 800115e:	0000      	.short	0x0000
 8001160:	e000ed88 	.word	0xe000ed88

08001164 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001164:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001168:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <pxPortInitialiseStack+0x28>)
 800116e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001172:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001176:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800117a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800117e:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001182:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001186:	3844      	subs	r0, #68	; 0x44
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	080010e9 	.word	0x080010e9

08001190 <SVC_Handler>:
	__asm volatile (
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <pxCurrentTCBConst2>)
 8001192:	6819      	ldr	r1, [r3, #0]
 8001194:	6808      	ldr	r0, [r1, #0]
 8001196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800119a:	f380 8809 	msr	PSP, r0
 800119e:	f3bf 8f6f 	isb	sy
 80011a2:	f04f 0000 	mov.w	r0, #0
 80011a6:	f380 8811 	msr	BASEPRI, r0
 80011aa:	4770      	bx	lr
 80011ac:	f3af 8000 	nop.w

080011b0 <pxCurrentTCBConst2>:
 80011b0:	20003c48 	.word	0x20003c48

080011b4 <vPortEnterCritical>:
 80011b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b8:	f383 8811 	msr	BASEPRI, r3
 80011bc:	f3bf 8f6f 	isb	sy
 80011c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80011c4:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <vPortEnterCritical+0x3c>)
 80011c6:	6813      	ldr	r3, [r2, #0]
 80011c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80011ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80011cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80011ce:	d10d      	bne.n	80011ec <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <vPortEnterCritical+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80011d8:	d008      	beq.n	80011ec <vPortEnterCritical+0x38>
 80011da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011de:	f383 8811 	msr	BASEPRI, r3
 80011e2:	f3bf 8f6f 	isb	sy
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	e7fe      	b.n	80011ea <vPortEnterCritical+0x36>
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000004 	.word	0x20000004
 80011f4:	e000ed04 	.word	0xe000ed04

080011f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80011f8:	4a08      	ldr	r2, [pc, #32]	; (800121c <vPortExitCritical+0x24>)
 80011fa:	6813      	ldr	r3, [r2, #0]
 80011fc:	b943      	cbnz	r3, 8001210 <vPortExitCritical+0x18>
 80011fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001202:	f383 8811 	msr	BASEPRI, r3
 8001206:	f3bf 8f6f 	isb	sy
 800120a:	f3bf 8f4f 	dsb	sy
 800120e:	e7fe      	b.n	800120e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001210:	3b01      	subs	r3, #1
 8001212:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001214:	b90b      	cbnz	r3, 800121a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001216:	f383 8811 	msr	BASEPRI, r3
 800121a:	4770      	bx	lr
 800121c:	20000004 	.word	0x20000004

08001220 <PendSV_Handler>:
	__asm volatile
 8001220:	f3ef 8009 	mrs	r0, PSP
 8001224:	f3bf 8f6f 	isb	sy
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <pxCurrentTCBConst>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	f01e 0f10 	tst.w	lr, #16
 8001230:	bf08      	it	eq
 8001232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800123a:	6010      	str	r0, [r2, #0]
 800123c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001240:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001244:	f380 8811 	msr	BASEPRI, r0
 8001248:	f3bf 8f4f 	dsb	sy
 800124c:	f3bf 8f6f 	isb	sy
 8001250:	f001 f848 	bl	80022e4 <vTaskSwitchContext>
 8001254:	f04f 0000 	mov.w	r0, #0
 8001258:	f380 8811 	msr	BASEPRI, r0
 800125c:	bc09      	pop	{r0, r3}
 800125e:	6819      	ldr	r1, [r3, #0]
 8001260:	6808      	ldr	r0, [r1, #0]
 8001262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001266:	f01e 0f10 	tst.w	lr, #16
 800126a:	bf08      	it	eq
 800126c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001270:	f380 8809 	msr	PSP, r0
 8001274:	f3bf 8f6f 	isb	sy
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	f3af 8000 	nop.w

08001280 <pxCurrentTCBConst>:
 8001280:	20003c48 	.word	0x20003c48

08001284 <SysTick_Handler>:
{
 8001284:	b508      	push	{r3, lr}
	__asm volatile
 8001286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800128a:	f383 8811 	msr	BASEPRI, r3
 800128e:	f3bf 8f6f 	isb	sy
 8001292:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001296:	f000 ff1b 	bl	80020d0 <xTaskIncrementTick>
 800129a:	b118      	cbz	r0, 80012a4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800129c:	4b03      	ldr	r3, [pc, #12]	; (80012ac <SysTick_Handler+0x28>)
 800129e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012a2:	601a      	str	r2, [r3, #0]
	__asm volatile
 80012a4:	2300      	movs	r3, #0
 80012a6:	f383 8811 	msr	BASEPRI, r3
 80012aa:	bd08      	pop	{r3, pc}
 80012ac:	e000ed04 	.word	0xe000ed04

080012b0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80012b0:	4a08      	ldr	r2, [pc, #32]	; (80012d4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80012b2:	4909      	ldr	r1, [pc, #36]	; (80012d8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80012b8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <vPortSetupTimerInterrupt+0x2c>)
 80012bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c6:	4906      	ldr	r1, [pc, #24]	; (80012e0 <vPortSetupTimerInterrupt+0x30>)
 80012c8:	3b01      	subs	r3, #1
 80012ca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80012cc:	2307      	movs	r3, #7
 80012ce:	6013      	str	r3, [r2, #0]
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010
 80012d8:	e000e018 	.word	0xe000e018
 80012dc:	20000008 	.word	0x20000008
 80012e0:	e000e014 	.word	0xe000e014

080012e4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80012e4:	4b39      	ldr	r3, [pc, #228]	; (80013cc <xPortStartScheduler+0xe8>)
 80012e6:	4a3a      	ldr	r2, [pc, #232]	; (80013d0 <xPortStartScheduler+0xec>)
{
 80012e8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80012ea:	6819      	ldr	r1, [r3, #0]
 80012ec:	4291      	cmp	r1, r2
 80012ee:	d108      	bne.n	8001302 <xPortStartScheduler+0x1e>
	__asm volatile
 80012f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f4:	f383 8811 	msr	BASEPRI, r3
 80012f8:	f3bf 8f6f 	isb	sy
 80012fc:	f3bf 8f4f 	dsb	sy
 8001300:	e7fe      	b.n	8001300 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b33      	ldr	r3, [pc, #204]	; (80013d4 <xPortStartScheduler+0xf0>)
 8001306:	429a      	cmp	r2, r3
 8001308:	d108      	bne.n	800131c <xPortStartScheduler+0x38>
 800130a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800130e:	f383 8811 	msr	BASEPRI, r3
 8001312:	f3bf 8f6f 	isb	sy
 8001316:	f3bf 8f4f 	dsb	sy
 800131a:	e7fe      	b.n	800131a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800131c:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <xPortStartScheduler+0xf4>)
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	b2d2      	uxtb	r2, r2
 8001322:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001324:	22ff      	movs	r2, #255	; 0xff
 8001326:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001328:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800132a:	4a2c      	ldr	r2, [pc, #176]	; (80013dc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800132c:	b2db      	uxtb	r3, r3
 800132e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001332:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001336:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800133a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800133c:	4b28      	ldr	r3, [pc, #160]	; (80013e0 <xPortStartScheduler+0xfc>)
 800133e:	2207      	movs	r2, #7
 8001340:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001342:	2100      	movs	r1, #0
 8001344:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001348:	0600      	lsls	r0, r0, #24
 800134a:	f102 34ff 	add.w	r4, r2, #4294967295
 800134e:	d40d      	bmi.n	800136c <xPortStartScheduler+0x88>
 8001350:	b101      	cbz	r1, 8001354 <xPortStartScheduler+0x70>
 8001352:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	2a03      	cmp	r2, #3
 8001358:	d011      	beq.n	800137e <xPortStartScheduler+0x9a>
 800135a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800135e:	f383 8811 	msr	BASEPRI, r3
 8001362:	f3bf 8f6f 	isb	sy
 8001366:	f3bf 8f4f 	dsb	sy
 800136a:	e7fe      	b.n	800136a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800136c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001370:	0052      	lsls	r2, r2, #1
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	f88d 2003 	strb.w	r2, [sp, #3]
 8001378:	2101      	movs	r1, #1
 800137a:	4622      	mov	r2, r4
 800137c:	e7e2      	b.n	8001344 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800137e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001380:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001384:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001386:	9b01      	ldr	r3, [sp, #4]
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <xPortStartScheduler+0xf4>)
 800138a:	b2db      	uxtb	r3, r3
 800138c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <xPortStartScheduler+0x100>)
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001396:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800139e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80013a0:	f7ff ff86 	bl	80012b0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80013a4:	4b10      	ldr	r3, [pc, #64]	; (80013e8 <xPortStartScheduler+0x104>)
 80013a6:	2400      	movs	r4, #0
 80013a8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80013aa:	f7ff fed1 	bl	8001150 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80013ae:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <xPortStartScheduler+0x108>)
 80013b0:	6813      	ldr	r3, [r2, #0]
 80013b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80013b6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80013b8:	f7ff feb6 	bl	8001128 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80013bc:	f000 ff92 	bl	80022e4 <vTaskSwitchContext>
	prvTaskExitError();
 80013c0:	f7ff fe92 	bl	80010e8 <prvTaskExitError>
}
 80013c4:	4620      	mov	r0, r4
 80013c6:	b002      	add	sp, #8
 80013c8:	bd10      	pop	{r4, pc}
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00
 80013d0:	410fc271 	.word	0x410fc271
 80013d4:	410fc270 	.word	0x410fc270
 80013d8:	e000e400 	.word	0xe000e400
 80013dc:	20000028 	.word	0x20000028
 80013e0:	2000002c 	.word	0x2000002c
 80013e4:	e000ed20 	.word	0xe000ed20
 80013e8:	20000004 	.word	0x20000004
 80013ec:	e000ef34 	.word	0xe000ef34

080013f0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80013f0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80013f4:	2b0f      	cmp	r3, #15
 80013f6:	d90e      	bls.n	8001416 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80013f8:	4a10      	ldr	r2, [pc, #64]	; (800143c <vPortValidateInterruptPriority+0x4c>)
 80013fa:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80013fc:	4a10      	ldr	r2, [pc, #64]	; (8001440 <vPortValidateInterruptPriority+0x50>)
 80013fe:	7812      	ldrb	r2, [r2, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d908      	bls.n	8001416 <vPortValidateInterruptPriority+0x26>
 8001404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001408:	f383 8811 	msr	BASEPRI, r3
 800140c:	f3bf 8f6f 	isb	sy
 8001410:	f3bf 8f4f 	dsb	sy
 8001414:	e7fe      	b.n	8001414 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <vPortValidateInterruptPriority+0x54>)
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <vPortValidateInterruptPriority+0x58>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001422:	4293      	cmp	r3, r2
 8001424:	d908      	bls.n	8001438 <vPortValidateInterruptPriority+0x48>
 8001426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800142a:	f383 8811 	msr	BASEPRI, r3
 800142e:	f3bf 8f6f 	isb	sy
 8001432:	f3bf 8f4f 	dsb	sy
 8001436:	e7fe      	b.n	8001436 <vPortValidateInterruptPriority+0x46>
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000e3f0 	.word	0xe000e3f0
 8001440:	20000028 	.word	0x20000028
 8001444:	e000ed0c 	.word	0xe000ed0c
 8001448:	2000002c 	.word	0x2000002c

0800144c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800144c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <prvInsertBlockIntoFreeList+0x40>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	4282      	cmp	r2, r0
 8001454:	d318      	bcc.n	8001488 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001456:	685c      	ldr	r4, [r3, #4]
 8001458:	1919      	adds	r1, r3, r4
 800145a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800145c:	bf01      	itttt	eq
 800145e:	6841      	ldreq	r1, [r0, #4]
 8001460:	4618      	moveq	r0, r3
 8001462:	1909      	addeq	r1, r1, r4
 8001464:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001466:	6844      	ldr	r4, [r0, #4]
 8001468:	1901      	adds	r1, r0, r4
 800146a:	428a      	cmp	r2, r1
 800146c:	d107      	bne.n	800147e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <prvInsertBlockIntoFreeList+0x44>)
 8001470:	6809      	ldr	r1, [r1, #0]
 8001472:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001474:	bf1f      	itttt	ne
 8001476:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001478:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800147a:	1909      	addne	r1, r1, r4
 800147c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800147e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001480:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001482:	bf18      	it	ne
 8001484:	6018      	strne	r0, [r3, #0]
 8001486:	bd10      	pop	{r4, pc}
 8001488:	4613      	mov	r3, r2
 800148a:	e7e1      	b.n	8001450 <prvInsertBlockIntoFreeList+0x4>
 800148c:	20003c40 	.word	0x20003c40
 8001490:	20000030 	.word	0x20000030

08001494 <pvPortMalloc>:
{
 8001494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001498:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800149a:	f000 fe11 	bl	80020c0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800149e:	493e      	ldr	r1, [pc, #248]	; (8001598 <pvPortMalloc+0x104>)
 80014a0:	4d3e      	ldr	r5, [pc, #248]	; (800159c <pvPortMalloc+0x108>)
 80014a2:	680b      	ldr	r3, [r1, #0]
 80014a4:	bb0b      	cbnz	r3, 80014ea <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80014a6:	4a3e      	ldr	r2, [pc, #248]	; (80015a0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80014a8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80014aa:	bf1f      	itttt	ne
 80014ac:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80014ae:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80014b2:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80014b6:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80014b8:	bf14      	ite	ne
 80014ba:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80014bc:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80014c0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80014c2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80014c4:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80014c8:	4e36      	ldr	r6, [pc, #216]	; (80015a4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80014ca:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80014cc:	2000      	movs	r0, #0
 80014ce:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80014d0:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80014d2:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80014d4:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80014d6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80014d8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80014da:	4b33      	ldr	r3, [pc, #204]	; (80015a8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80014dc:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80014de:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80014e0:	4b32      	ldr	r3, [pc, #200]	; (80015ac <pvPortMalloc+0x118>)
 80014e2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80014e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80014e8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80014ea:	682f      	ldr	r7, [r5, #0]
 80014ec:	4227      	tst	r7, r4
 80014ee:	d116      	bne.n	800151e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80014f0:	2c00      	cmp	r4, #0
 80014f2:	d041      	beq.n	8001578 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80014f4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80014f8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80014fa:	bf1c      	itt	ne
 80014fc:	f023 0307 	bicne.w	r3, r3, #7
 8001500:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001502:	b163      	cbz	r3, 800151e <pvPortMalloc+0x8a>
 8001504:	4a29      	ldr	r2, [pc, #164]	; (80015ac <pvPortMalloc+0x118>)
 8001506:	6816      	ldr	r6, [r2, #0]
 8001508:	42b3      	cmp	r3, r6
 800150a:	4690      	mov	r8, r2
 800150c:	d807      	bhi.n	800151e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800150e:	4a25      	ldr	r2, [pc, #148]	; (80015a4 <pvPortMalloc+0x110>)
 8001510:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001512:	6868      	ldr	r0, [r5, #4]
 8001514:	4283      	cmp	r3, r0
 8001516:	d804      	bhi.n	8001522 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001518:	6809      	ldr	r1, [r1, #0]
 800151a:	428d      	cmp	r5, r1
 800151c:	d107      	bne.n	800152e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800151e:	2400      	movs	r4, #0
 8001520:	e02a      	b.n	8001578 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001522:	682c      	ldr	r4, [r5, #0]
 8001524:	2c00      	cmp	r4, #0
 8001526:	d0f7      	beq.n	8001518 <pvPortMalloc+0x84>
 8001528:	462a      	mov	r2, r5
 800152a:	4625      	mov	r5, r4
 800152c:	e7f1      	b.n	8001512 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800152e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001530:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001532:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001534:	1ac2      	subs	r2, r0, r3
 8001536:	2a10      	cmp	r2, #16
 8001538:	d90f      	bls.n	800155a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800153a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800153c:	0741      	lsls	r1, r0, #29
 800153e:	d008      	beq.n	8001552 <pvPortMalloc+0xbe>
 8001540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001544:	f383 8811 	msr	BASEPRI, r3
 8001548:	f3bf 8f6f 	isb	sy
 800154c:	f3bf 8f4f 	dsb	sy
 8001550:	e7fe      	b.n	8001550 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001552:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001554:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001556:	f7ff ff79 	bl	800144c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800155a:	4913      	ldr	r1, [pc, #76]	; (80015a8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800155c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800155e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001560:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001562:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001564:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001566:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800156a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800156e:	bf38      	it	cc
 8001570:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001572:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001574:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001576:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001578:	f000 fe3c 	bl	80021f4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800157c:	0763      	lsls	r3, r4, #29
 800157e:	d008      	beq.n	8001592 <pvPortMalloc+0xfe>
 8001580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001584:	f383 8811 	msr	BASEPRI, r3
 8001588:	f3bf 8f6f 	isb	sy
 800158c:	f3bf 8f4f 	dsb	sy
 8001590:	e7fe      	b.n	8001590 <pvPortMalloc+0xfc>
}
 8001592:	4620      	mov	r0, r4
 8001594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001598:	20000030 	.word	0x20000030
 800159c:	20003c34 	.word	0x20003c34
 80015a0:	20000034 	.word	0x20000034
 80015a4:	20003c40 	.word	0x20003c40
 80015a8:	20003c3c 	.word	0x20003c3c
 80015ac:	20003c38 	.word	0x20003c38

080015b0 <vPortFree>:
{
 80015b0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80015b2:	4604      	mov	r4, r0
 80015b4:	b370      	cbz	r0, 8001614 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80015b6:	4a18      	ldr	r2, [pc, #96]	; (8001618 <vPortFree+0x68>)
 80015b8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	4213      	tst	r3, r2
 80015c0:	d108      	bne.n	80015d4 <vPortFree+0x24>
 80015c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015c6:	f383 8811 	msr	BASEPRI, r3
 80015ca:	f3bf 8f6f 	isb	sy
 80015ce:	f3bf 8f4f 	dsb	sy
 80015d2:	e7fe      	b.n	80015d2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80015d4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80015d8:	b141      	cbz	r1, 80015ec <vPortFree+0x3c>
 80015da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015de:	f383 8811 	msr	BASEPRI, r3
 80015e2:	f3bf 8f6f 	isb	sy
 80015e6:	f3bf 8f4f 	dsb	sy
 80015ea:	e7fe      	b.n	80015ea <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80015ec:	ea23 0302 	bic.w	r3, r3, r2
 80015f0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80015f4:	f000 fd64 	bl	80020c0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80015f8:	4a08      	ldr	r2, [pc, #32]	; (800161c <vPortFree+0x6c>)
 80015fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80015fe:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001600:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001604:	440b      	add	r3, r1
 8001606:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001608:	f7ff ff20 	bl	800144c <prvInsertBlockIntoFreeList>
}
 800160c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001610:	f000 bdf0 	b.w	80021f4 <xTaskResumeAll>
 8001614:	bd10      	pop	{r4, pc}
 8001616:	bf00      	nop
 8001618:	20003c34 	.word	0x20003c34
 800161c:	20003c38 	.word	0x20003c38

08001620 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001620:	b510      	push	{r4, lr}
 8001622:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001624:	f7ff fdc6 	bl	80011b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001628:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800162a:	f7ff fde5 	bl	80011f8 <vPortExitCritical>

	return xReturn;
}
 800162e:	fab4 f084 	clz	r0, r4
 8001632:	0940      	lsrs	r0, r0, #5
 8001634:	bd10      	pop	{r4, pc}

08001636 <prvCopyDataToQueue>:
{
 8001636:	b570      	push	{r4, r5, r6, lr}
 8001638:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800163a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800163c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 800163e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001640:	b942      	cbnz	r2, 8001654 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001642:	6805      	ldr	r5, [r0, #0]
 8001644:	b99d      	cbnz	r5, 800166e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001646:	6840      	ldr	r0, [r0, #4]
 8001648:	f001 f800 	bl	800264c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800164c:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800164e:	3601      	adds	r6, #1
 8001650:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001652:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001654:	b96d      	cbnz	r5, 8001672 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001656:	6880      	ldr	r0, [r0, #8]
 8001658:	f001 faa2 	bl	8002ba0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800165c:	68a3      	ldr	r3, [r4, #8]
 800165e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001660:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001662:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001664:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001666:	4293      	cmp	r3, r2
 8001668:	d301      	bcc.n	800166e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800166a:	6823      	ldr	r3, [r4, #0]
 800166c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800166e:	2000      	movs	r0, #0
 8001670:	e7ed      	b.n	800164e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001672:	68c0      	ldr	r0, [r0, #12]
 8001674:	f001 fa94 	bl	8002ba0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001678:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800167a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800167c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800167e:	425b      	negs	r3, r3
 8001680:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001682:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001684:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001686:	bf3e      	ittt	cc
 8001688:	6862      	ldrcc	r2, [r4, #4]
 800168a:	189b      	addcc	r3, r3, r2
 800168c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800168e:	2d02      	cmp	r5, #2
 8001690:	d1ed      	bne.n	800166e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001692:	b10e      	cbz	r6, 8001698 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001694:	3e01      	subs	r6, #1
 8001696:	e7ea      	b.n	800166e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8001698:	4630      	mov	r0, r6
 800169a:	e7d8      	b.n	800164e <prvCopyDataToQueue+0x18>

0800169c <prvCopyDataFromQueue>:
{
 800169c:	4603      	mov	r3, r0
 800169e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80016a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80016a2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80016a4:	b162      	cbz	r2, 80016c0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80016a6:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80016a8:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80016aa:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80016ac:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80016ae:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80016b0:	bf24      	itt	cs
 80016b2:	6819      	ldrcs	r1, [r3, #0]
 80016b4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80016b6:	68d9      	ldr	r1, [r3, #12]
}
 80016b8:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80016bc:	f001 ba70 	b.w	8002ba0 <memcpy>
}
 80016c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <prvUnlockQueue>:
{
 80016c6:	b570      	push	{r4, r5, r6, lr}
 80016c8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80016ca:	f7ff fd73 	bl	80011b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80016ce:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80016d2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80016d6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80016d8:	2d00      	cmp	r5, #0
 80016da:	dc14      	bgt.n	8001706 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 80016dc:	23ff      	movs	r3, #255	; 0xff
 80016de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80016e2:	f7ff fd89 	bl	80011f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 80016e6:	f7ff fd65 	bl	80011b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80016ea:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016ee:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80016f2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80016f4:	2d00      	cmp	r5, #0
 80016f6:	dc12      	bgt.n	800171e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 80016f8:	23ff      	movs	r3, #255	; 0xff
 80016fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80016fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001702:	f7ff bd79 	b.w	80011f8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0e7      	beq.n	80016dc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800170c:	4630      	mov	r0, r6
 800170e:	f000 fea9 	bl	8002464 <xTaskRemoveFromEventList>
 8001712:	b108      	cbz	r0, 8001718 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001714:	f000 ff30 	bl	8002578 <vTaskMissedYield>
 8001718:	3d01      	subs	r5, #1
 800171a:	b26d      	sxtb	r5, r5
 800171c:	e7dc      	b.n	80016d8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800171e:	6923      	ldr	r3, [r4, #16]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0e9      	beq.n	80016f8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001724:	4630      	mov	r0, r6
 8001726:	f000 fe9d 	bl	8002464 <xTaskRemoveFromEventList>
 800172a:	b108      	cbz	r0, 8001730 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800172c:	f000 ff24 	bl	8002578 <vTaskMissedYield>
 8001730:	3d01      	subs	r5, #1
 8001732:	b26d      	sxtb	r5, r5
 8001734:	e7de      	b.n	80016f4 <prvUnlockQueue+0x2e>
	...

08001738 <xQueueGenericReset>:
{
 8001738:	b538      	push	{r3, r4, r5, lr}
 800173a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800173c:	4604      	mov	r4, r0
 800173e:	b940      	cbnz	r0, 8001752 <xQueueGenericReset+0x1a>
 8001740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001744:	f383 8811 	msr	BASEPRI, r3
 8001748:	f3bf 8f6f 	isb	sy
 800174c:	f3bf 8f4f 	dsb	sy
 8001750:	e7fe      	b.n	8001750 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001752:	f7ff fd2f 	bl	80011b4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001756:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001758:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800175a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800175c:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800175e:	4343      	muls	r3, r0
 8001760:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001762:	1a1b      	subs	r3, r3, r0
 8001764:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001766:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001768:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800176a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800176c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800176e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001770:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001774:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001778:	b995      	cbnz	r5, 80017a0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800177a:	6923      	ldr	r3, [r4, #16]
 800177c:	b163      	cbz	r3, 8001798 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800177e:	f104 0010 	add.w	r0, r4, #16
 8001782:	f000 fe6f 	bl	8002464 <xTaskRemoveFromEventList>
 8001786:	b138      	cbz	r0, 8001798 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <xQueueGenericReset+0x7c>)
 800178a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	f3bf 8f4f 	dsb	sy
 8001794:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001798:	f7ff fd2e 	bl	80011f8 <vPortExitCritical>
}
 800179c:	2001      	movs	r0, #1
 800179e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80017a0:	f104 0010 	add.w	r0, r4, #16
 80017a4:	f7ff fc5e 	bl	8001064 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80017a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80017ac:	f7ff fc5a 	bl	8001064 <vListInitialise>
 80017b0:	e7f2      	b.n	8001798 <xQueueGenericReset+0x60>
 80017b2:	bf00      	nop
 80017b4:	e000ed04 	.word	0xe000ed04

080017b8 <xQueueGenericCreate>:
	{
 80017b8:	b570      	push	{r4, r5, r6, lr}
 80017ba:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80017bc:	4606      	mov	r6, r0
 80017be:	b940      	cbnz	r0, 80017d2 <xQueueGenericCreate+0x1a>
 80017c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c4:	f383 8811 	msr	BASEPRI, r3
 80017c8:	f3bf 8f6f 	isb	sy
 80017cc:	f3bf 8f4f 	dsb	sy
 80017d0:	e7fe      	b.n	80017d0 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80017d2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80017d4:	3048      	adds	r0, #72	; 0x48
 80017d6:	f7ff fe5d 	bl	8001494 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80017da:	4604      	mov	r4, r0
 80017dc:	b138      	cbz	r0, 80017ee <xQueueGenericCreate+0x36>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80017de:	b945      	cbnz	r5, 80017f2 <xQueueGenericCreate+0x3a>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80017e0:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80017e2:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80017e4:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80017e6:	2101      	movs	r1, #1
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff ffa5 	bl	8001738 <xQueueGenericReset>
	}
 80017ee:	4620      	mov	r0, r4
 80017f0:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80017f2:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80017f6:	6003      	str	r3, [r0, #0]
 80017f8:	e7f3      	b.n	80017e2 <xQueueGenericCreate+0x2a>
	...

080017fc <xQueueGenericSend>:
{
 80017fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001800:	4689      	mov	r9, r1
 8001802:	9201      	str	r2, [sp, #4]
 8001804:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8001806:	4604      	mov	r4, r0
 8001808:	b940      	cbnz	r0, 800181c <xQueueGenericSend+0x20>
 800180a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800180e:	f383 8811 	msr	BASEPRI, r3
 8001812:	f3bf 8f6f 	isb	sy
 8001816:	f3bf 8f4f 	dsb	sy
 800181a:	e7fe      	b.n	800181a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800181c:	2900      	cmp	r1, #0
 800181e:	f040 8088 	bne.w	8001932 <xQueueGenericSend+0x136>
 8001822:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 8084 	beq.w	8001932 <xQueueGenericSend+0x136>
 800182a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800182e:	f383 8811 	msr	BASEPRI, r3
 8001832:	f3bf 8f6f 	isb	sy
 8001836:	f3bf 8f4f 	dsb	sy
 800183a:	e7fe      	b.n	800183a <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800183c:	9e01      	ldr	r6, [sp, #4]
 800183e:	2e00      	cmp	r6, #0
 8001840:	f000 8082 	beq.w	8001948 <xQueueGenericSend+0x14c>
 8001844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001848:	f383 8811 	msr	BASEPRI, r3
 800184c:	f3bf 8f6f 	isb	sy
 8001850:	f3bf 8f4f 	dsb	sy
 8001854:	e7fe      	b.n	8001854 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8001856:	9d01      	ldr	r5, [sp, #4]
 8001858:	b91d      	cbnz	r5, 8001862 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800185a:	f7ff fccd 	bl	80011f8 <vPortExitCritical>
			return errQUEUE_FULL;
 800185e:	2000      	movs	r0, #0
 8001860:	e058      	b.n	8001914 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8001862:	b916      	cbnz	r6, 800186a <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001864:	a802      	add	r0, sp, #8
 8001866:	f000 fe3f 	bl	80024e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800186a:	f7ff fcc5 	bl	80011f8 <vPortExitCritical>
		vTaskSuspendAll();
 800186e:	f000 fc27 	bl	80020c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001872:	f7ff fc9f 	bl	80011b4 <vPortEnterCritical>
 8001876:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800187a:	2bff      	cmp	r3, #255	; 0xff
 800187c:	bf08      	it	eq
 800187e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8001882:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001886:	2bff      	cmp	r3, #255	; 0xff
 8001888:	bf08      	it	eq
 800188a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800188e:	f7ff fcb3 	bl	80011f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001892:	a901      	add	r1, sp, #4
 8001894:	a802      	add	r0, sp, #8
 8001896:	f000 fe33 	bl	8002500 <xTaskCheckForTimeOut>
 800189a:	2800      	cmp	r0, #0
 800189c:	d143      	bne.n	8001926 <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800189e:	f7ff fc89 	bl	80011b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80018a2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80018a4:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80018a6:	f7ff fca7 	bl	80011f8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80018aa:	42ae      	cmp	r6, r5
 80018ac:	d135      	bne.n	800191a <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80018ae:	9901      	ldr	r1, [sp, #4]
 80018b0:	f104 0010 	add.w	r0, r4, #16
 80018b4:	f000 fdbc 	bl	8002430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80018b8:	4620      	mov	r0, r4
 80018ba:	f7ff ff04 	bl	80016c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80018be:	f000 fc99 	bl	80021f4 <xTaskResumeAll>
 80018c2:	b938      	cbnz	r0, 80018d4 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 80018c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80018c8:	f8ca 3000 	str.w	r3, [sl]
 80018cc:	f3bf 8f4f 	dsb	sy
 80018d0:	f3bf 8f6f 	isb	sy
 80018d4:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80018d6:	f7ff fc6d 	bl	80011b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80018da:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80018dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80018de:	429a      	cmp	r2, r3
 80018e0:	d301      	bcc.n	80018e6 <xQueueGenericSend+0xea>
 80018e2:	2f02      	cmp	r7, #2
 80018e4:	d1b7      	bne.n	8001856 <xQueueGenericSend+0x5a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80018e6:	463a      	mov	r2, r7
 80018e8:	4649      	mov	r1, r9
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff fea3 	bl	8001636 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80018f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80018f2:	b11b      	cbz	r3, 80018fc <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80018f4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80018f8:	f000 fdb4 	bl	8002464 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80018fc:	b138      	cbz	r0, 800190e <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <xQueueGenericSend+0x168>)
 8001900:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	f3bf 8f4f 	dsb	sy
 800190a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800190e:	f7ff fc73 	bl	80011f8 <vPortExitCritical>
				return pdPASS;
 8001912:	2001      	movs	r0, #1
}
 8001914:	b004      	add	sp, #16
 8001916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800191a:	4620      	mov	r0, r4
 800191c:	f7ff fed3 	bl	80016c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001920:	f000 fc68 	bl	80021f4 <xTaskResumeAll>
 8001924:	e7d6      	b.n	80018d4 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8001926:	4620      	mov	r0, r4
 8001928:	f7ff fecd 	bl	80016c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800192c:	f000 fc62 	bl	80021f4 <xTaskResumeAll>
 8001930:	e795      	b.n	800185e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001932:	2f02      	cmp	r7, #2
 8001934:	d102      	bne.n	800193c <xQueueGenericSend+0x140>
 8001936:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001938:	2b01      	cmp	r3, #1
 800193a:	d10a      	bne.n	8001952 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800193c:	f000 fe22 	bl	8002584 <xTaskGetSchedulerState>
 8001940:	2800      	cmp	r0, #0
 8001942:	f43f af7b 	beq.w	800183c <xQueueGenericSend+0x40>
 8001946:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8001948:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800194c:	f8df a014 	ldr.w	sl, [pc, #20]	; 8001964 <xQueueGenericSend+0x168>
 8001950:	e7c1      	b.n	80018d6 <xQueueGenericSend+0xda>
 8001952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001956:	f383 8811 	msr	BASEPRI, r3
 800195a:	f3bf 8f6f 	isb	sy
 800195e:	f3bf 8f4f 	dsb	sy
 8001962:	e7fe      	b.n	8001962 <xQueueGenericSend+0x166>
 8001964:	e000ed04 	.word	0xe000ed04

08001968 <xQueueGiveFromISR>:
{
 8001968:	b570      	push	{r4, r5, r6, lr}
 800196a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800196c:	4604      	mov	r4, r0
 800196e:	b940      	cbnz	r0, 8001982 <xQueueGiveFromISR+0x1a>
 8001970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001974:	f383 8811 	msr	BASEPRI, r3
 8001978:	f3bf 8f6f 	isb	sy
 800197c:	f3bf 8f4f 	dsb	sy
 8001980:	e7fe      	b.n	8001980 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 8001982:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001984:	b143      	cbz	r3, 8001998 <xQueueGiveFromISR+0x30>
 8001986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800198a:	f383 8811 	msr	BASEPRI, r3
 800198e:	f3bf 8f6f 	isb	sy
 8001992:	f3bf 8f4f 	dsb	sy
 8001996:	e7fe      	b.n	8001996 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8001998:	6803      	ldr	r3, [r0, #0]
 800199a:	b90b      	cbnz	r3, 80019a0 <xQueueGiveFromISR+0x38>
 800199c:	6843      	ldr	r3, [r0, #4]
 800199e:	bb73      	cbnz	r3, 80019fe <xQueueGiveFromISR+0x96>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80019a0:	f7ff fd26 	bl	80013f0 <vPortValidateInterruptPriority>
	__asm volatile
 80019a4:	f3ef 8611 	mrs	r6, BASEPRI
 80019a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ac:	f383 8811 	msr	BASEPRI, r3
 80019b0:	f3bf 8f6f 	isb	sy
 80019b4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80019b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80019ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80019bc:	429a      	cmp	r2, r3
 80019be:	d301      	bcc.n	80019c4 <xQueueGiveFromISR+0x5c>
			xReturn = errQUEUE_FULL;
 80019c0:	2000      	movs	r0, #0
 80019c2:	e014      	b.n	80019ee <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
 80019c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80019c8:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 80019ca:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80019cc:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	d110      	bne.n	80019f4 <xQueueGiveFromISR+0x8c>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80019d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019d4:	b90b      	cbnz	r3, 80019da <xQueueGiveFromISR+0x72>
			xReturn = pdPASS;
 80019d6:	2001      	movs	r0, #1
 80019d8:	e009      	b.n	80019ee <xQueueGiveFromISR+0x86>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80019da:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80019de:	f000 fd41 	bl	8002464 <xTaskRemoveFromEventList>
 80019e2:	2800      	cmp	r0, #0
 80019e4:	d0f7      	beq.n	80019d6 <xQueueGiveFromISR+0x6e>
							if( pxHigherPriorityTaskWoken != NULL )
 80019e6:	2d00      	cmp	r5, #0
 80019e8:	d0f5      	beq.n	80019d6 <xQueueGiveFromISR+0x6e>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80019ea:	2001      	movs	r0, #1
 80019ec:	6028      	str	r0, [r5, #0]
	__asm volatile
 80019ee:	f386 8811 	msr	BASEPRI, r6
}
 80019f2:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80019f4:	3301      	adds	r3, #1
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80019fc:	e7eb      	b.n	80019d6 <xQueueGiveFromISR+0x6e>
	__asm volatile
 80019fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a02:	f383 8811 	msr	BASEPRI, r3
 8001a06:	f3bf 8f6f 	isb	sy
 8001a0a:	f3bf 8f4f 	dsb	sy
 8001a0e:	e7fe      	b.n	8001a0e <xQueueGiveFromISR+0xa6>

08001a10 <xQueueSemaphoreTake>:
{
 8001a10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8001a14:	4604      	mov	r4, r0
{
 8001a16:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8001a18:	b940      	cbnz	r0, 8001a2c <xQueueSemaphoreTake+0x1c>
 8001a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a1e:	f383 8811 	msr	BASEPRI, r3
 8001a22:	f3bf 8f6f 	isb	sy
 8001a26:	f3bf 8f4f 	dsb	sy
 8001a2a:	e7fe      	b.n	8001a2a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8001a2c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001a2e:	b145      	cbz	r5, 8001a42 <xQueueSemaphoreTake+0x32>
 8001a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a34:	f383 8811 	msr	BASEPRI, r3
 8001a38:	f3bf 8f6f 	isb	sy
 8001a3c:	f3bf 8f4f 	dsb	sy
 8001a40:	e7fe      	b.n	8001a40 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001a42:	f000 fd9f 	bl	8002584 <xTaskGetSchedulerState>
 8001a46:	b918      	cbnz	r0, 8001a50 <xQueueSemaphoreTake+0x40>
 8001a48:	9d01      	ldr	r5, [sp, #4]
 8001a4a:	2d00      	cmp	r5, #0
 8001a4c:	f040 8095 	bne.w	8001b7a <xQueueSemaphoreTake+0x16a>
					portYIELD_WITHIN_API();
 8001a50:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8001b8c <xQueueSemaphoreTake+0x17c>
 8001a54:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8001a56:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8001a58:	f7ff fbac 	bl	80011b4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8001a5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8001a5e:	b1e3      	cbz	r3, 8001a9a <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8001a60:	3b01      	subs	r3, #1
 8001a62:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001a64:	6823      	ldr	r3, [r4, #0]
 8001a66:	b913      	cbnz	r3, 8001a6e <xQueueSemaphoreTake+0x5e>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8001a68:	f000 fe9a 	bl	80027a0 <pvTaskIncrementMutexHeldCount>
 8001a6c:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001a6e:	6923      	ldr	r3, [r4, #16]
 8001a70:	b163      	cbz	r3, 8001a8c <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001a72:	f104 0010 	add.w	r0, r4, #16
 8001a76:	f000 fcf5 	bl	8002464 <xTaskRemoveFromEventList>
 8001a7a:	b138      	cbz	r0, 8001a8c <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 8001a7c:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <xQueueSemaphoreTake+0x17c>)
 8001a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	f3bf 8f4f 	dsb	sy
 8001a88:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8001a8c:	f7ff fbb4 	bl	80011f8 <vPortExitCritical>
				return pdPASS;
 8001a90:	2501      	movs	r5, #1
}
 8001a92:	4628      	mov	r0, r5
 8001a94:	b004      	add	sp, #16
 8001a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 8001a9a:	9b01      	ldr	r3, [sp, #4]
 8001a9c:	b963      	cbnz	r3, 8001ab8 <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001a9e:	b145      	cbz	r5, 8001ab2 <xQueueSemaphoreTake+0xa2>
 8001aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa4:	f383 8811 	msr	BASEPRI, r3
 8001aa8:	f3bf 8f6f 	isb	sy
 8001aac:	f3bf 8f4f 	dsb	sy
 8001ab0:	e7fe      	b.n	8001ab0 <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 8001ab2:	f7ff fba1 	bl	80011f8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8001ab6:	e7ec      	b.n	8001a92 <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 8001ab8:	b916      	cbnz	r6, 8001ac0 <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8001aba:	a802      	add	r0, sp, #8
 8001abc:	f000 fd14 	bl	80024e8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8001ac0:	f7ff fb9a 	bl	80011f8 <vPortExitCritical>
		vTaskSuspendAll();
 8001ac4:	f000 fafc 	bl	80020c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001ac8:	f7ff fb74 	bl	80011b4 <vPortEnterCritical>
 8001acc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8001ad0:	2bff      	cmp	r3, #255	; 0xff
 8001ad2:	bf08      	it	eq
 8001ad4:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8001ad8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8001adc:	2bff      	cmp	r3, #255	; 0xff
 8001ade:	bf08      	it	eq
 8001ae0:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8001ae4:	f7ff fb88 	bl	80011f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001ae8:	a901      	add	r1, sp, #4
 8001aea:	a802      	add	r0, sp, #8
 8001aec:	f000 fd08 	bl	8002500 <xTaskCheckForTimeOut>
 8001af0:	bb40      	cbnz	r0, 8001b44 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001af2:	4620      	mov	r0, r4
 8001af4:	f7ff fd94 	bl	8001620 <prvIsQueueEmpty>
 8001af8:	b1f0      	cbz	r0, 8001b38 <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	b93b      	cbnz	r3, 8001b0e <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 8001afe:	f7ff fb59 	bl	80011b4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8001b02:	6860      	ldr	r0, [r4, #4]
 8001b04:	f000 fd4e 	bl	80025a4 <xTaskPriorityInherit>
 8001b08:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8001b0a:	f7ff fb75 	bl	80011f8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001b0e:	9901      	ldr	r1, [sp, #4]
 8001b10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001b14:	f000 fc8c 	bl	8002430 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001b18:	4620      	mov	r0, r4
 8001b1a:	f7ff fdd4 	bl	80016c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001b1e:	f000 fb69 	bl	80021f4 <xTaskResumeAll>
 8001b22:	b938      	cbnz	r0, 8001b34 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 8001b24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001b28:	f8c8 3000 	str.w	r3, [r8]
 8001b2c:	f3bf 8f4f 	dsb	sy
 8001b30:	f3bf 8f6f 	isb	sy
 8001b34:	2601      	movs	r6, #1
 8001b36:	e78f      	b.n	8001a58 <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8001b38:	4620      	mov	r0, r4
 8001b3a:	f7ff fdc4 	bl	80016c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001b3e:	f000 fb59 	bl	80021f4 <xTaskResumeAll>
 8001b42:	e7f7      	b.n	8001b34 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 8001b44:	4620      	mov	r0, r4
 8001b46:	f7ff fdbe 	bl	80016c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001b4a:	f000 fb53 	bl	80021f4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001b4e:	4620      	mov	r0, r4
 8001b50:	f7ff fd66 	bl	8001620 <prvIsQueueEmpty>
 8001b54:	2800      	cmp	r0, #0
 8001b56:	d0ed      	beq.n	8001b34 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 8001b58:	2d00      	cmp	r5, #0
 8001b5a:	d09a      	beq.n	8001a92 <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 8001b5c:	f7ff fb2a 	bl	80011b4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8001b60:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001b62:	b119      	cbz	r1, 8001b6c <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001b64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001b66:	6819      	ldr	r1, [r3, #0]
 8001b68:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8001b6c:	6860      	ldr	r0, [r4, #4]
 8001b6e:	f000 fdbd 	bl	80026ec <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 8001b72:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 8001b74:	f7ff fb40 	bl	80011f8 <vPortExitCritical>
 8001b78:	e78b      	b.n	8001a92 <xQueueSemaphoreTake+0x82>
 8001b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7e:	f383 8811 	msr	BASEPRI, r3
 8001b82:	f3bf 8f6f 	isb	sy
 8001b86:	f3bf 8f4f 	dsb	sy
 8001b8a:	e7fe      	b.n	8001b8a <xQueueSemaphoreTake+0x17a>
 8001b8c:	e000ed04 	.word	0xe000ed04

08001b90 <xQueueReceiveFromISR>:
{
 8001b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b94:	4689      	mov	r9, r1
 8001b96:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8001b98:	4605      	mov	r5, r0
 8001b9a:	b940      	cbnz	r0, 8001bae <xQueueReceiveFromISR+0x1e>
 8001b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ba0:	f383 8811 	msr	BASEPRI, r3
 8001ba4:	f3bf 8f6f 	isb	sy
 8001ba8:	f3bf 8f4f 	dsb	sy
 8001bac:	e7fe      	b.n	8001bac <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001bae:	bb71      	cbnz	r1, 8001c0e <xQueueReceiveFromISR+0x7e>
 8001bb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001bb2:	b363      	cbz	r3, 8001c0e <xQueueReceiveFromISR+0x7e>
 8001bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb8:	f383 8811 	msr	BASEPRI, r3
 8001bbc:	f3bf 8f6f 	isb	sy
 8001bc0:	f3bf 8f4f 	dsb	sy
 8001bc4:	e7fe      	b.n	8001bc4 <xQueueReceiveFromISR+0x34>
			const int8_t cRxLock = pxQueue->cRxLock;
 8001bc6:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001bca:	4649      	mov	r1, r9
			const int8_t cRxLock = pxQueue->cRxLock;
 8001bcc:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001bce:	4628      	mov	r0, r5
 8001bd0:	f7ff fd64 	bl	800169c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001bd4:	3c01      	subs	r4, #1
			if( cRxLock == queueUNLOCKED )
 8001bd6:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8001bd8:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8001bda:	d113      	bne.n	8001c04 <xQueueReceiveFromISR+0x74>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001bdc:	692b      	ldr	r3, [r5, #16]
 8001bde:	b90b      	cbnz	r3, 8001be4 <xQueueReceiveFromISR+0x54>
			xReturn = pdPASS;
 8001be0:	2001      	movs	r0, #1
 8001be2:	e00b      	b.n	8001bfc <xQueueReceiveFromISR+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001be4:	f105 0010 	add.w	r0, r5, #16
 8001be8:	f000 fc3c 	bl	8002464 <xTaskRemoveFromEventList>
 8001bec:	2800      	cmp	r0, #0
 8001bee:	d0f7      	beq.n	8001be0 <xQueueReceiveFromISR+0x50>
						if( pxHigherPriorityTaskWoken != NULL )
 8001bf0:	f1b8 0f00 	cmp.w	r8, #0
 8001bf4:	d0f4      	beq.n	8001be0 <xQueueReceiveFromISR+0x50>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8001bfc:	f387 8811 	msr	BASEPRI, r7
}
 8001c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8001c04:	3601      	adds	r6, #1
 8001c06:	b276      	sxtb	r6, r6
 8001c08:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8001c0c:	e7e8      	b.n	8001be0 <xQueueReceiveFromISR+0x50>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001c0e:	f7ff fbef 	bl	80013f0 <vPortValidateInterruptPriority>
	__asm volatile
 8001c12:	f3ef 8711 	mrs	r7, BASEPRI
 8001c16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c1a:	f383 8811 	msr	BASEPRI, r3
 8001c1e:	f3bf 8f6f 	isb	sy
 8001c22:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001c26:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001c28:	2c00      	cmp	r4, #0
 8001c2a:	d1cc      	bne.n	8001bc6 <xQueueReceiveFromISR+0x36>
			xReturn = pdFAIL;
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	e7e5      	b.n	8001bfc <xQueueReceiveFromISR+0x6c>

08001c30 <prvTaskIsTaskSuspended>:

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001c30:	b940      	cbnz	r0, 8001c44 <prvTaskIsTaskSuspended+0x14>
	__asm volatile
 8001c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c36:	f383 8811 	msr	BASEPRI, r3
 8001c3a:	f3bf 8f6f 	isb	sy
 8001c3e:	f3bf 8f4f 	dsb	sy
 8001c42:	e7fe      	b.n	8001c42 <prvTaskIsTaskSuspended+0x12>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001c44:	6942      	ldr	r2, [r0, #20]
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <prvTaskIsTaskSuspended+0x30>)
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d001      	beq.n	8001c50 <prvTaskIsTaskSuspended+0x20>
	BaseType_t xReturn = pdFALSE;
 8001c4c:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001c4e:	4770      	bx	lr
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001c50:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <prvTaskIsTaskSuspended+0x34>)
 8001c54:	4298      	cmp	r0, r3
 8001c56:	d0f9      	beq.n	8001c4c <prvTaskIsTaskSuspended+0x1c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8001c58:	fab0 f080 	clz	r0, r0
 8001c5c:	0940      	lsrs	r0, r0, #5
		return xReturn;
 8001c5e:	4770      	bx	lr
 8001c60:	20003d44 	.word	0x20003d44
 8001c64:	20003d2c 	.word	0x20003d2c

08001c68 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001c68:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <prvResetNextTaskUnblockTime+0x1c>)
 8001c6a:	6813      	ldr	r3, [r2, #0]
 8001c6c:	6819      	ldr	r1, [r3, #0]
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <prvResetNextTaskUnblockTime+0x20>)
 8001c70:	b919      	cbnz	r1, 8001c7a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001c72:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001c7e:	68d2      	ldr	r2, [r2, #12]
 8001c80:	6852      	ldr	r2, [r2, #4]
 8001c82:	e7f8      	b.n	8001c76 <prvResetNextTaskUnblockTime+0xe>
 8001c84:	20003c4c 	.word	0x20003c4c
 8001c88:	20003d24 	.word	0x20003d24

08001c8c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001c8e:	4b1b      	ldr	r3, [pc, #108]	; (8001cfc <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c90:	4e1b      	ldr	r6, [pc, #108]	; (8001d00 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8001c92:	681d      	ldr	r5, [r3, #0]
{
 8001c94:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c96:	6830      	ldr	r0, [r6, #0]
 8001c98:	3004      	adds	r0, #4
{
 8001c9a:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001c9c:	f7ff fa13 	bl	80010c6 <uxListRemove>
 8001ca0:	4633      	mov	r3, r6
 8001ca2:	b940      	cbnz	r0, 8001cb6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8001ca4:	6831      	ldr	r1, [r6, #0]
 8001ca6:	4e17      	ldr	r6, [pc, #92]	; (8001d04 <prvAddCurrentTaskToDelayedList+0x78>)
 8001ca8:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8001caa:	6832      	ldr	r2, [r6, #0]
 8001cac:	2001      	movs	r0, #1
 8001cae:	4088      	lsls	r0, r1
 8001cb0:	ea22 0200 	bic.w	r2, r2, r0
 8001cb4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8001cb6:	1c62      	adds	r2, r4, #1
 8001cb8:	d107      	bne.n	8001cca <prvAddCurrentTaskToDelayedList+0x3e>
 8001cba:	b137      	cbz	r7, 8001cca <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cbc:	6819      	ldr	r1, [r3, #0]
 8001cbe:	4812      	ldr	r0, [pc, #72]	; (8001d08 <prvAddCurrentTaskToDelayedList+0x7c>)
 8001cc0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8001cc2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cc6:	f7ff b9db 	b.w	8001080 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8001cca:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001ccc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8001cce:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8001cd0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8001cd2:	d907      	bls.n	8001ce4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <prvAddCurrentTaskToDelayedList+0x80>)
 8001cd6:	6810      	ldr	r0, [r2, #0]
 8001cd8:	6819      	ldr	r1, [r3, #0]
}
 8001cda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001cde:	3104      	adds	r1, #4
 8001ce0:	f7ff b9da 	b.w	8001098 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <prvAddCurrentTaskToDelayedList+0x84>)
 8001ce6:	6810      	ldr	r0, [r2, #0]
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	3104      	adds	r1, #4
 8001cec:	f7ff f9d4 	bl	8001098 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <prvAddCurrentTaskToDelayedList+0x88>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8001cf6:	bf38      	it	cc
 8001cf8:	601c      	strcc	r4, [r3, #0]
 8001cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001cfc:	20003d6c 	.word	0x20003d6c
 8001d00:	20003c48 	.word	0x20003c48
 8001d04:	20003cf4 	.word	0x20003cf4
 8001d08:	20003d44 	.word	0x20003d44
 8001d0c:	20003c50 	.word	0x20003c50
 8001d10:	20003c4c 	.word	0x20003c4c
 8001d14:	20003d24 	.word	0x20003d24

08001d18 <prvIdleTask>:
{
 8001d18:	b580      	push	{r7, lr}
				taskYIELD();
 8001d1a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8001d80 <prvIdleTask+0x68>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d1e:	4f14      	ldr	r7, [pc, #80]	; (8001d70 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d20:	4c14      	ldr	r4, [pc, #80]	; (8001d74 <prvIdleTask+0x5c>)
				--uxCurrentNumberOfTasks;
 8001d22:	4e15      	ldr	r6, [pc, #84]	; (8001d78 <prvIdleTask+0x60>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001d24:	6823      	ldr	r3, [r4, #0]
 8001d26:	b963      	cbnz	r3, 8001d42 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <prvIdleTask+0x64>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d9f8      	bls.n	8001d22 <prvIdleTask+0xa>
				taskYIELD();
 8001d30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d34:	f8c8 3000 	str.w	r3, [r8]
 8001d38:	f3bf 8f4f 	dsb	sy
 8001d3c:	f3bf 8f6f 	isb	sy
 8001d40:	e7ee      	b.n	8001d20 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8001d42:	f7ff fa37 	bl	80011b4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	68dd      	ldr	r5, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d4a:	1d28      	adds	r0, r5, #4
 8001d4c:	f7ff f9bb 	bl	80010c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001d50:	6833      	ldr	r3, [r6, #0]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8001d5c:	f7ff fa4c 	bl	80011f8 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8001d60:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001d62:	f7ff fc25 	bl	80015b0 <vPortFree>
			vPortFree( pxTCB );
 8001d66:	4628      	mov	r0, r5
 8001d68:	f7ff fc22 	bl	80015b0 <vPortFree>
 8001d6c:	e7da      	b.n	8001d24 <prvIdleTask+0xc>
 8001d6e:	bf00      	nop
 8001d70:	20003d58 	.word	0x20003d58
 8001d74:	20003ce4 	.word	0x20003ce4
 8001d78:	20003ce0 	.word	0x20003ce0
 8001d7c:	20003c54 	.word	0x20003c54
 8001d80:	e000ed04 	.word	0xe000ed04

08001d84 <xTaskCreate>:
	{
 8001d84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d88:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8001d8c:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d8e:	4650      	mov	r0, sl
	{
 8001d90:	460f      	mov	r7, r1
 8001d92:	4699      	mov	r9, r3
 8001d94:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d96:	f7ff fb7d 	bl	8001494 <pvPortMalloc>
			if( pxStack != NULL )
 8001d9a:	4605      	mov	r5, r0
 8001d9c:	2800      	cmp	r0, #0
 8001d9e:	f000 8096 	beq.w	8001ece <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001da2:	2054      	movs	r0, #84	; 0x54
 8001da4:	f7ff fb76 	bl	8001494 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8001da8:	4604      	mov	r4, r0
 8001daa:	2800      	cmp	r0, #0
 8001dac:	f000 808c 	beq.w	8001ec8 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001db0:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8001db4:	6305      	str	r5, [r0, #48]	; 0x30
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001db6:	4455      	add	r5, sl
 8001db8:	1e7b      	subs	r3, r7, #1
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001dba:	f025 0a07 	bic.w	sl, r5, #7
 8001dbe:	f100 0234 	add.w	r2, r0, #52	; 0x34
 8001dc2:	370f      	adds	r7, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dc4:	7859      	ldrb	r1, [r3, #1]
 8001dc6:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8001dca:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001dce:	b109      	cbz	r1, 8001dd4 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dd0:	42bb      	cmp	r3, r7
 8001dd2:	d1f7      	bne.n	8001dc4 <xTaskCreate+0x40>
 8001dd4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8001dd6:	2d06      	cmp	r5, #6
 8001dd8:	bf28      	it	cs
 8001dda:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001ddc:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001de0:	1d27      	adds	r7, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8001de2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8001de4:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001de6:	4638      	mov	r0, r7
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001de8:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 8001dec:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001df0:	f7ff f943 	bl	800107a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001df4:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001df8:	f104 0018 	add.w	r0, r4, #24
 8001dfc:	f7ff f93d 	bl	800107a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8001e00:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e04:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e06:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e08:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e0a:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e0e:	464a      	mov	r2, r9
 8001e10:	4641      	mov	r1, r8
 8001e12:	4650      	mov	r0, sl
 8001e14:	f7ff f9a6 	bl	8001164 <pxPortInitialiseStack>
 8001e18:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8001e1a:	b106      	cbz	r6, 8001e1e <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e1c:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8001e1e:	f7ff f9c9 	bl	80011b4 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8001e22:	4b32      	ldr	r3, [pc, #200]	; (8001eec <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8001e24:	4e32      	ldr	r6, [pc, #200]	; (8001ef0 <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001f1c <xTaskCreate+0x198>
 8001e2c:	3201      	adds	r2, #1
 8001e2e:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8001e30:	6835      	ldr	r5, [r6, #0]
 8001e32:	2d00      	cmp	r5, #0
 8001e34:	d14e      	bne.n	8001ed4 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8001e36:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d11d      	bne.n	8001e7a <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001e3e:	eb08 0005 	add.w	r0, r8, r5
 8001e42:	3514      	adds	r5, #20
 8001e44:	f7ff f90e 	bl	8001064 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001e48:	2d8c      	cmp	r5, #140	; 0x8c
 8001e4a:	d1f8      	bne.n	8001e3e <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8001e4c:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8001f20 <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8001e50:	4d28      	ldr	r5, [pc, #160]	; (8001ef4 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8001e52:	4648      	mov	r0, r9
 8001e54:	f7ff f906 	bl	8001064 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001e58:	4628      	mov	r0, r5
 8001e5a:	f7ff f903 	bl	8001064 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001e5e:	4826      	ldr	r0, [pc, #152]	; (8001ef8 <xTaskCreate+0x174>)
 8001e60:	f7ff f900 	bl	8001064 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8001e64:	4825      	ldr	r0, [pc, #148]	; (8001efc <xTaskCreate+0x178>)
 8001e66:	f7ff f8fd 	bl	8001064 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8001e6a:	4825      	ldr	r0, [pc, #148]	; (8001f00 <xTaskCreate+0x17c>)
 8001e6c:	f7ff f8fa 	bl	8001064 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8001e70:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <xTaskCreate+0x180>)
 8001e72:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <xTaskCreate+0x184>)
 8001e78:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8001e7a:	4a24      	ldr	r2, [pc, #144]	; (8001f0c <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8001e7c:	4924      	ldr	r1, [pc, #144]	; (8001f10 <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8001e7e:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001e80:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8001e82:	3301      	adds	r3, #1
 8001e84:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8001e86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001e88:	2501      	movs	r5, #1
 8001e8a:	fa05 f302 	lsl.w	r3, r5, r2
 8001e8e:	4303      	orrs	r3, r0
 8001e90:	2014      	movs	r0, #20
 8001e92:	600b      	str	r3, [r1, #0]
 8001e94:	fb00 8002 	mla	r0, r0, r2, r8
 8001e98:	4639      	mov	r1, r7
 8001e9a:	f7ff f8f1 	bl	8001080 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8001e9e:	f7ff f9ab 	bl	80011f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <xTaskCreate+0x190>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	b163      	cbz	r3, 8001ec2 <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001ea8:	6833      	ldr	r3, [r6, #0]
 8001eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d207      	bcs.n	8001ec2 <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8001eb2:	4b19      	ldr	r3, [pc, #100]	; (8001f18 <xTaskCreate+0x194>)
 8001eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	f3bf 8f4f 	dsb	sy
 8001ebe:	f3bf 8f6f 	isb	sy
	}
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8001ec8:	4628      	mov	r0, r5
 8001eca:	f7ff fb71 	bl	80015b0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001ece:	f04f 35ff 	mov.w	r5, #4294967295
 8001ed2:	e7f6      	b.n	8001ec2 <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <xTaskCreate+0x190>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d1ce      	bne.n	8001e7a <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001edc:	6833      	ldr	r3, [r6, #0]
 8001ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ee0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ee2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8001ee4:	bf98      	it	ls
 8001ee6:	6034      	strls	r4, [r6, #0]
 8001ee8:	e7c7      	b.n	8001e7a <xTaskCreate+0xf6>
 8001eea:	bf00      	nop
 8001eec:	20003ce0 	.word	0x20003ce0
 8001ef0:	20003c48 	.word	0x20003c48
 8001ef4:	20003d0c 	.word	0x20003d0c
 8001ef8:	20003d2c 	.word	0x20003d2c
 8001efc:	20003d58 	.word	0x20003d58
 8001f00:	20003d44 	.word	0x20003d44
 8001f04:	20003c4c 	.word	0x20003c4c
 8001f08:	20003c50 	.word	0x20003c50
 8001f0c:	20003cf0 	.word	0x20003cf0
 8001f10:	20003cf4 	.word	0x20003cf4
 8001f14:	20003d40 	.word	0x20003d40
 8001f18:	e000ed04 	.word	0xe000ed04
 8001f1c:	20003c54 	.word	0x20003c54
 8001f20:	20003cf8 	.word	0x20003cf8

08001f24 <vTaskResume>:
	{
 8001f24:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 8001f26:	4604      	mov	r4, r0
 8001f28:	b940      	cbnz	r0, 8001f3c <vTaskResume+0x18>
 8001f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f2e:	f383 8811 	msr	BASEPRI, r3
 8001f32:	f3bf 8f6f 	isb	sy
 8001f36:	f3bf 8f4f 	dsb	sy
 8001f3a:	e7fe      	b.n	8001f3a <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8001f3c:	4d16      	ldr	r5, [pc, #88]	; (8001f98 <vTaskResume+0x74>)
 8001f3e:	682b      	ldr	r3, [r5, #0]
 8001f40:	4298      	cmp	r0, r3
 8001f42:	d028      	beq.n	8001f96 <vTaskResume+0x72>
			taskENTER_CRITICAL();
 8001f44:	f7ff f936 	bl	80011b4 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7ff fe71 	bl	8001c30 <prvTaskIsTaskSuspended>
 8001f4e:	b1f0      	cbz	r0, 8001f8e <vTaskResume+0x6a>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8001f50:	1d26      	adds	r6, r4, #4
 8001f52:	4630      	mov	r0, r6
 8001f54:	f7ff f8b7 	bl	80010c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001f58:	4910      	ldr	r1, [pc, #64]	; (8001f9c <vTaskResume+0x78>)
 8001f5a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f5c:	6808      	ldr	r0, [r1, #0]
 8001f5e:	2301      	movs	r3, #1
 8001f60:	4093      	lsls	r3, r2
 8001f62:	4303      	orrs	r3, r0
 8001f64:	600b      	str	r3, [r1, #0]
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <vTaskResume+0x7c>)
 8001f68:	2014      	movs	r0, #20
 8001f6a:	fb00 3002 	mla	r0, r0, r2, r3
 8001f6e:	4631      	mov	r1, r6
 8001f70:	f7ff f886 	bl	8001080 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001f74:	682b      	ldr	r3, [r5, #0]
 8001f76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d307      	bcc.n	8001f8e <vTaskResume+0x6a>
						taskYIELD_IF_USING_PREEMPTION();
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <vTaskResume+0x80>)
 8001f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	f3bf 8f4f 	dsb	sy
 8001f8a:	f3bf 8f6f 	isb	sy
	}
 8001f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 8001f92:	f7ff b931 	b.w	80011f8 <vPortExitCritical>
 8001f96:	bd70      	pop	{r4, r5, r6, pc}
 8001f98:	20003c48 	.word	0x20003c48
 8001f9c:	20003cf4 	.word	0x20003cf4
 8001fa0:	20003c54 	.word	0x20003c54
 8001fa4:	e000ed04 	.word	0xe000ed04

08001fa8 <xTaskResumeFromISR>:
	{
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 8001faa:	4605      	mov	r5, r0
 8001fac:	b940      	cbnz	r0, 8001fc0 <xTaskResumeFromISR+0x18>
 8001fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb2:	f383 8811 	msr	BASEPRI, r3
 8001fb6:	f3bf 8f6f 	isb	sy
 8001fba:	f3bf 8f4f 	dsb	sy
 8001fbe:	e7fe      	b.n	8001fbe <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001fc0:	f7ff fa16 	bl	80013f0 <vPortValidateInterruptPriority>
	__asm volatile
 8001fc4:	f3ef 8611 	mrs	r6, BASEPRI
 8001fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fcc:	f383 8811 	msr	BASEPRI, r3
 8001fd0:	f3bf 8f6f 	isb	sy
 8001fd4:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001fd8:	4628      	mov	r0, r5
 8001fda:	f7ff fe29 	bl	8001c30 <prvTaskIsTaskSuspended>
 8001fde:	b338      	cbz	r0, 8002030 <xTaskResumeFromISR+0x88>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <xTaskResumeFromISR+0x8c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	b9eb      	cbnz	r3, 8002022 <xTaskResumeFromISR+0x7a>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <xTaskResumeFromISR+0x90>)
 8001fe8:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001fee:	1d2f      	adds	r7, r5, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ff0:	4284      	cmp	r4, r0
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ff2:	4638      	mov	r0, r7
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ff4:	bf34      	ite	cc
 8001ff6:	2400      	movcc	r4, #0
 8001ff8:	2401      	movcs	r4, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001ffa:	f7ff f864 	bl	80010c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ffe:	490f      	ldr	r1, [pc, #60]	; (800203c <xTaskResumeFromISR+0x94>)
 8002000:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002002:	6808      	ldr	r0, [r1, #0]
 8002004:	2301      	movs	r3, #1
 8002006:	4093      	lsls	r3, r2
 8002008:	4303      	orrs	r3, r0
 800200a:	600b      	str	r3, [r1, #0]
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <xTaskResumeFromISR+0x98>)
 800200e:	2014      	movs	r0, #20
 8002010:	4639      	mov	r1, r7
 8002012:	fb00 3002 	mla	r0, r0, r2, r3
 8002016:	f7ff f833 	bl	8001080 <vListInsertEnd>
	__asm volatile
 800201a:	f386 8811 	msr	BASEPRI, r6
	}
 800201e:	4620      	mov	r0, r4
 8002020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002022:	f105 0118 	add.w	r1, r5, #24
 8002026:	4807      	ldr	r0, [pc, #28]	; (8002044 <xTaskResumeFromISR+0x9c>)
 8002028:	f7ff f82a 	bl	8001080 <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 800202c:	2400      	movs	r4, #0
 800202e:	e7f4      	b.n	800201a <xTaskResumeFromISR+0x72>
 8002030:	4604      	mov	r4, r0
 8002032:	e7f2      	b.n	800201a <xTaskResumeFromISR+0x72>
 8002034:	20003cec 	.word	0x20003cec
 8002038:	20003c48 	.word	0x20003c48
 800203c:	20003cf4 	.word	0x20003cf4
 8002040:	20003c54 	.word	0x20003c54
 8002044:	20003d2c 	.word	0x20003d2c

08002048 <vTaskStartScheduler>:
{
 8002048:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <vTaskStartScheduler+0x60>)
 800204c:	9301      	str	r3, [sp, #4]
 800204e:	2400      	movs	r4, #0
 8002050:	9400      	str	r4, [sp, #0]
 8002052:	4623      	mov	r3, r4
 8002054:	2280      	movs	r2, #128	; 0x80
 8002056:	4915      	ldr	r1, [pc, #84]	; (80020ac <vTaskStartScheduler+0x64>)
 8002058:	4815      	ldr	r0, [pc, #84]	; (80020b0 <vTaskStartScheduler+0x68>)
 800205a:	f7ff fe93 	bl	8001d84 <xTaskCreate>
	if( xReturn == pdPASS )
 800205e:	2801      	cmp	r0, #1
 8002060:	d114      	bne.n	800208c <vTaskStartScheduler+0x44>
	__asm volatile
 8002062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002066:	f383 8811 	msr	BASEPRI, r3
 800206a:	f3bf 8f6f 	isb	sy
 800206e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <vTaskStartScheduler+0x6c>)
 8002074:	f04f 32ff 	mov.w	r2, #4294967295
 8002078:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800207a:	4b0f      	ldr	r3, [pc, #60]	; (80020b8 <vTaskStartScheduler+0x70>)
 800207c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800207e:	4b0f      	ldr	r3, [pc, #60]	; (80020bc <vTaskStartScheduler+0x74>)
 8002080:	601c      	str	r4, [r3, #0]
}
 8002082:	b002      	add	sp, #8
 8002084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002088:	f7ff b92c 	b.w	80012e4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800208c:	3001      	adds	r0, #1
 800208e:	d108      	bne.n	80020a2 <vTaskStartScheduler+0x5a>
 8002090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002094:	f383 8811 	msr	BASEPRI, r3
 8002098:	f3bf 8f6f 	isb	sy
 800209c:	f3bf 8f4f 	dsb	sy
 80020a0:	e7fe      	b.n	80020a0 <vTaskStartScheduler+0x58>
}
 80020a2:	b002      	add	sp, #8
 80020a4:	bd10      	pop	{r4, pc}
 80020a6:	bf00      	nop
 80020a8:	20003d20 	.word	0x20003d20
 80020ac:	08002c08 	.word	0x08002c08
 80020b0:	08001d19 	.word	0x08001d19
 80020b4:	20003d24 	.word	0x20003d24
 80020b8:	20003d40 	.word	0x20003d40
 80020bc:	20003d6c 	.word	0x20003d6c

080020c0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80020c0:	4a02      	ldr	r2, [pc, #8]	; (80020cc <vTaskSuspendAll+0xc>)
 80020c2:	6813      	ldr	r3, [r2, #0]
 80020c4:	3301      	adds	r3, #1
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20003cec 	.word	0x20003cec

080020d0 <xTaskIncrementTick>:
{
 80020d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020d4:	4b3c      	ldr	r3, [pc, #240]	; (80021c8 <xTaskIncrementTick+0xf8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d153      	bne.n	8002184 <xTaskIncrementTick+0xb4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80020dc:	4b3b      	ldr	r3, [pc, #236]	; (80021cc <xTaskIncrementTick+0xfc>)
 80020de:	681c      	ldr	r4, [r3, #0]
 80020e0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80020e2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80020e4:	b9bc      	cbnz	r4, 8002116 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80020e6:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <xTaskIncrementTick+0x100>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	6812      	ldr	r2, [r2, #0]
 80020ec:	b142      	cbz	r2, 8002100 <xTaskIncrementTick+0x30>
 80020ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f2:	f383 8811 	msr	BASEPRI, r3
 80020f6:	f3bf 8f6f 	isb	sy
 80020fa:	f3bf 8f4f 	dsb	sy
 80020fe:	e7fe      	b.n	80020fe <xTaskIncrementTick+0x2e>
 8002100:	4a34      	ldr	r2, [pc, #208]	; (80021d4 <xTaskIncrementTick+0x104>)
 8002102:	6819      	ldr	r1, [r3, #0]
 8002104:	6810      	ldr	r0, [r2, #0]
 8002106:	6018      	str	r0, [r3, #0]
 8002108:	6011      	str	r1, [r2, #0]
 800210a:	4a33      	ldr	r2, [pc, #204]	; (80021d8 <xTaskIncrementTick+0x108>)
 800210c:	6813      	ldr	r3, [r2, #0]
 800210e:	3301      	adds	r3, #1
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	f7ff fda9 	bl	8001c68 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002116:	4d31      	ldr	r5, [pc, #196]	; (80021dc <xTaskIncrementTick+0x10c>)
 8002118:	4f31      	ldr	r7, [pc, #196]	; (80021e0 <xTaskIncrementTick+0x110>)
 800211a:	682b      	ldr	r3, [r5, #0]
 800211c:	429c      	cmp	r4, r3
 800211e:	f04f 0b00 	mov.w	fp, #0
 8002122:	d33e      	bcc.n	80021a2 <xTaskIncrementTick+0xd2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002124:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80021d0 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8002128:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80021f0 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800212c:	f8d8 2000 	ldr.w	r2, [r8]
 8002130:	6812      	ldr	r2, [r2, #0]
 8002132:	bb72      	cbnz	r2, 8002192 <xTaskIncrementTick+0xc2>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002134:	f04f 32ff 	mov.w	r2, #4294967295
 8002138:	602a      	str	r2, [r5, #0]
					break;
 800213a:	e032      	b.n	80021a2 <xTaskIncrementTick+0xd2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800213c:	f106 0a04 	add.w	sl, r6, #4
 8002140:	4650      	mov	r0, sl
 8002142:	f7fe ffc0 	bl	80010c6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002146:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8002148:	b119      	cbz	r1, 8002152 <xTaskIncrementTick+0x82>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800214a:	f106 0018 	add.w	r0, r6, #24
 800214e:	f7fe ffba 	bl	80010c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002152:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002154:	f8d9 3000 	ldr.w	r3, [r9]
 8002158:	2201      	movs	r2, #1
 800215a:	fa02 f100 	lsl.w	r1, r2, r0
 800215e:	4319      	orrs	r1, r3
 8002160:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <xTaskIncrementTick+0x114>)
 8002162:	f8c9 1000 	str.w	r1, [r9]
 8002166:	f04f 0e14 	mov.w	lr, #20
 800216a:	4651      	mov	r1, sl
 800216c:	fb0e 3000 	mla	r0, lr, r0, r3
 8002170:	f7fe ff86 	bl	8001080 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002174:	6838      	ldr	r0, [r7, #0]
 8002176:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002178:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800217a:	4291      	cmp	r1, r2
 800217c:	bf28      	it	cs
 800217e:	f04f 0b01 	movcs.w	fp, #1
 8002182:	e7d3      	b.n	800212c <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002184:	4a18      	ldr	r2, [pc, #96]	; (80021e8 <xTaskIncrementTick+0x118>)
 8002186:	6813      	ldr	r3, [r2, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800218c:	f04f 0b00 	mov.w	fp, #0
 8002190:	e011      	b.n	80021b6 <xTaskIncrementTick+0xe6>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002192:	f8d8 2000 	ldr.w	r2, [r8]
 8002196:	68d2      	ldr	r2, [r2, #12]
 8002198:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800219a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 800219c:	428c      	cmp	r4, r1
 800219e:	d2cd      	bcs.n	800213c <xTaskIncrementTick+0x6c>
						xNextTaskUnblockTime = xItemValue;
 80021a0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <xTaskIncrementTick+0x114>)
 80021a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021a8:	2214      	movs	r2, #20
 80021aa:	434a      	muls	r2, r1
 80021ac:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80021ae:	2a02      	cmp	r2, #2
 80021b0:	bf28      	it	cs
 80021b2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80021b6:	4a0d      	ldr	r2, [pc, #52]	; (80021ec <xTaskIncrementTick+0x11c>)
 80021b8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80021ba:	2a00      	cmp	r2, #0
 80021bc:	bf18      	it	ne
 80021be:	f04f 0b01 	movne.w	fp, #1
}
 80021c2:	4658      	mov	r0, fp
 80021c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021c8:	20003cec 	.word	0x20003cec
 80021cc:	20003d6c 	.word	0x20003d6c
 80021d0:	20003c4c 	.word	0x20003c4c
 80021d4:	20003c50 	.word	0x20003c50
 80021d8:	20003d28 	.word	0x20003d28
 80021dc:	20003d24 	.word	0x20003d24
 80021e0:	20003c48 	.word	0x20003c48
 80021e4:	20003c54 	.word	0x20003c54
 80021e8:	20003ce8 	.word	0x20003ce8
 80021ec:	20003d70 	.word	0x20003d70
 80021f0:	20003cf4 	.word	0x20003cf4

080021f4 <xTaskResumeAll>:
{
 80021f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80021f8:	4c31      	ldr	r4, [pc, #196]	; (80022c0 <xTaskResumeAll+0xcc>)
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	b943      	cbnz	r3, 8002210 <xTaskResumeAll+0x1c>
 80021fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002202:	f383 8811 	msr	BASEPRI, r3
 8002206:	f3bf 8f6f 	isb	sy
 800220a:	f3bf 8f4f 	dsb	sy
 800220e:	e7fe      	b.n	800220e <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002210:	f7fe ffd0 	bl	80011b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002214:	6823      	ldr	r3, [r4, #0]
 8002216:	3b01      	subs	r3, #1
 8002218:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800221a:	6824      	ldr	r4, [r4, #0]
 800221c:	b12c      	cbz	r4, 800222a <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800221e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002220:	f7fe ffea 	bl	80011f8 <vPortExitCritical>
}
 8002224:	4620      	mov	r0, r4
 8002226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <xTaskResumeAll+0xd0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f5      	beq.n	800221e <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002232:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80022dc <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8002236:	4f24      	ldr	r7, [pc, #144]	; (80022c8 <xTaskResumeAll+0xd4>)
 8002238:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80022e0 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800223c:	f8d9 3000 	ldr.w	r3, [r9]
 8002240:	b9e3      	cbnz	r3, 800227c <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 8002242:	b10c      	cbz	r4, 8002248 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8002244:	f7ff fd10 	bl	8001c68 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002248:	4d20      	ldr	r5, [pc, #128]	; (80022cc <xTaskResumeAll+0xd8>)
 800224a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800224c:	b144      	cbz	r4, 8002260 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800224e:	4e20      	ldr	r6, [pc, #128]	; (80022d0 <xTaskResumeAll+0xdc>)
 8002250:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8002252:	f7ff ff3d 	bl	80020d0 <xTaskIncrementTick>
 8002256:	b100      	cbz	r0, 800225a <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8002258:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800225a:	3c01      	subs	r4, #1
 800225c:	d1f9      	bne.n	8002252 <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800225e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <xTaskResumeAll+0xdc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0da      	beq.n	800221e <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <xTaskResumeAll+0xe0>)
 800226a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800226e:	601a      	str	r2, [r3, #0]
 8002270:	f3bf 8f4f 	dsb	sy
 8002274:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002278:	2401      	movs	r4, #1
 800227a:	e7d1      	b.n	8002220 <xTaskResumeAll+0x2c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800227c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8002280:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002282:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002284:	f104 0018 	add.w	r0, r4, #24
 8002288:	f7fe ff1d 	bl	80010c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800228c:	4630      	mov	r0, r6
 800228e:	f7fe ff1a 	bl	80010c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002292:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002294:	6839      	ldr	r1, [r7, #0]
 8002296:	2501      	movs	r5, #1
 8002298:	fa05 f302 	lsl.w	r3, r5, r2
 800229c:	2014      	movs	r0, #20
 800229e:	430b      	orrs	r3, r1
 80022a0:	fb00 8002 	mla	r0, r0, r2, r8
 80022a4:	4631      	mov	r1, r6
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	f7fe feea 	bl	8001080 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <xTaskResumeAll+0xe4>)
 80022ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80022b6:	bf24      	itt	cs
 80022b8:	4b05      	ldrcs	r3, [pc, #20]	; (80022d0 <xTaskResumeAll+0xdc>)
 80022ba:	601d      	strcs	r5, [r3, #0]
 80022bc:	e7be      	b.n	800223c <xTaskResumeAll+0x48>
 80022be:	bf00      	nop
 80022c0:	20003cec 	.word	0x20003cec
 80022c4:	20003ce0 	.word	0x20003ce0
 80022c8:	20003cf4 	.word	0x20003cf4
 80022cc:	20003ce8 	.word	0x20003ce8
 80022d0:	20003d70 	.word	0x20003d70
 80022d4:	e000ed04 	.word	0xe000ed04
 80022d8:	20003c48 	.word	0x20003c48
 80022dc:	20003d2c 	.word	0x20003d2c
 80022e0:	20003c54 	.word	0x20003c54

080022e4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022e4:	4b17      	ldr	r3, [pc, #92]	; (8002344 <vTaskSwitchContext+0x60>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <vTaskSwitchContext+0x64>)
{
 80022ea:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022ec:	b112      	cbz	r2, 80022f4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80022ee:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80022f4:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022f6:	4b15      	ldr	r3, [pc, #84]	; (800234c <vTaskSwitchContext+0x68>)
 80022f8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	f1c3 031f 	rsb	r3, r3, #31
 8002304:	2214      	movs	r2, #20
 8002306:	4912      	ldr	r1, [pc, #72]	; (8002350 <vTaskSwitchContext+0x6c>)
 8002308:	435a      	muls	r2, r3
 800230a:	1888      	adds	r0, r1, r2
 800230c:	588c      	ldr	r4, [r1, r2]
 800230e:	b944      	cbnz	r4, 8002322 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002314:	f383 8811 	msr	BASEPRI, r3
 8002318:	f3bf 8f6f 	isb	sy
 800231c:	f3bf 8f4f 	dsb	sy
 8002320:	e7fe      	b.n	8002320 <vTaskSwitchContext+0x3c>
 8002322:	6844      	ldr	r4, [r0, #4]
 8002324:	3208      	adds	r2, #8
 8002326:	6864      	ldr	r4, [r4, #4]
 8002328:	6044      	str	r4, [r0, #4]
 800232a:	440a      	add	r2, r1
 800232c:	4294      	cmp	r4, r2
 800232e:	bf04      	itt	eq
 8002330:	6862      	ldreq	r2, [r4, #4]
 8002332:	6042      	streq	r2, [r0, #4]
 8002334:	2214      	movs	r2, #20
 8002336:	fb02 1303 	mla	r3, r2, r3, r1
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <vTaskSwitchContext+0x70>)
 8002340:	e7d6      	b.n	80022f0 <vTaskSwitchContext+0xc>
 8002342:	bf00      	nop
 8002344:	20003cec 	.word	0x20003cec
 8002348:	20003d70 	.word	0x20003d70
 800234c:	20003cf4 	.word	0x20003cf4
 8002350:	20003c54 	.word	0x20003c54
 8002354:	20003c48 	.word	0x20003c48

08002358 <vTaskSuspend>:
	{
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4604      	mov	r4, r0
 800235c:	4e2c      	ldr	r6, [pc, #176]	; (8002410 <vTaskSuspend+0xb8>)
		taskENTER_CRITICAL();
 800235e:	f7fe ff29 	bl	80011b4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002362:	b904      	cbnz	r4, 8002366 <vTaskSuspend+0xe>
 8002364:	6834      	ldr	r4, [r6, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002366:	1d25      	adds	r5, r4, #4
 8002368:	4628      	mov	r0, r5
 800236a:	f7fe feac 	bl	80010c6 <uxListRemove>
 800236e:	b960      	cbnz	r0, 800238a <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002370:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002372:	4b28      	ldr	r3, [pc, #160]	; (8002414 <vTaskSuspend+0xbc>)
 8002374:	2114      	movs	r1, #20
 8002376:	4341      	muls	r1, r0
 8002378:	585b      	ldr	r3, [r3, r1]
 800237a:	b933      	cbnz	r3, 800238a <vTaskSuspend+0x32>
 800237c:	4926      	ldr	r1, [pc, #152]	; (8002418 <vTaskSuspend+0xc0>)
 800237e:	2201      	movs	r2, #1
 8002380:	680b      	ldr	r3, [r1, #0]
 8002382:	4082      	lsls	r2, r0
 8002384:	ea23 0302 	bic.w	r3, r3, r2
 8002388:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800238a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800238c:	b11b      	cbz	r3, 8002396 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800238e:	f104 0018 	add.w	r0, r4, #24
 8002392:	f7fe fe98 	bl	80010c6 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002396:	4629      	mov	r1, r5
 8002398:	4820      	ldr	r0, [pc, #128]	; (800241c <vTaskSuspend+0xc4>)
		if( xSchedulerRunning != pdFALSE )
 800239a:	4d21      	ldr	r5, [pc, #132]	; (8002420 <vTaskSuspend+0xc8>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800239c:	f7fe fe70 	bl	8001080 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80023a0:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80023a4:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80023a6:	bf04      	itt	eq
 80023a8:	2300      	moveq	r3, #0
 80023aa:	f884 3050 	strbeq.w	r3, [r4, #80]	; 0x50
		taskEXIT_CRITICAL();
 80023ae:	f7fe ff23 	bl	80011f8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 80023b2:	682a      	ldr	r2, [r5, #0]
 80023b4:	b12a      	cbz	r2, 80023c2 <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 80023b6:	f7fe fefd 	bl	80011b4 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 80023ba:	f7ff fc55 	bl	8001c68 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 80023be:	f7fe ff1b 	bl	80011f8 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 80023c2:	6833      	ldr	r3, [r6, #0]
 80023c4:	429c      	cmp	r4, r3
 80023c6:	d122      	bne.n	800240e <vTaskSuspend+0xb6>
			if( xSchedulerRunning != pdFALSE )
 80023c8:	682b      	ldr	r3, [r5, #0]
 80023ca:	b1a3      	cbz	r3, 80023f6 <vTaskSuspend+0x9e>
				configASSERT( uxSchedulerSuspended == 0 );
 80023cc:	4b15      	ldr	r3, [pc, #84]	; (8002424 <vTaskSuspend+0xcc>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	b143      	cbz	r3, 80023e4 <vTaskSuspend+0x8c>
 80023d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023d6:	f383 8811 	msr	BASEPRI, r3
 80023da:	f3bf 8f6f 	isb	sy
 80023de:	f3bf 8f4f 	dsb	sy
 80023e2:	e7fe      	b.n	80023e2 <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 80023e4:	4b10      	ldr	r3, [pc, #64]	; (8002428 <vTaskSuspend+0xd0>)
 80023e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 80023f6:	4a09      	ldr	r2, [pc, #36]	; (800241c <vTaskSuspend+0xc4>)
 80023f8:	6811      	ldr	r1, [r2, #0]
 80023fa:	4a0c      	ldr	r2, [pc, #48]	; (800242c <vTaskSuspend+0xd4>)
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	4291      	cmp	r1, r2
 8002400:	d101      	bne.n	8002406 <vTaskSuspend+0xae>
					pxCurrentTCB = NULL;
 8002402:	6033      	str	r3, [r6, #0]
 8002404:	bd70      	pop	{r4, r5, r6, pc}
	}
 8002406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 800240a:	f7ff bf6b 	b.w	80022e4 <vTaskSwitchContext>
 800240e:	bd70      	pop	{r4, r5, r6, pc}
 8002410:	20003c48 	.word	0x20003c48
 8002414:	20003c54 	.word	0x20003c54
 8002418:	20003cf4 	.word	0x20003cf4
 800241c:	20003d44 	.word	0x20003d44
 8002420:	20003d40 	.word	0x20003d40
 8002424:	20003cec 	.word	0x20003cec
 8002428:	e000ed04 	.word	0xe000ed04
 800242c:	20003ce0 	.word	0x20003ce0

08002430 <vTaskPlaceOnEventList>:
{
 8002430:	b510      	push	{r4, lr}
 8002432:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002434:	b940      	cbnz	r0, 8002448 <vTaskPlaceOnEventList+0x18>
 8002436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243a:	f383 8811 	msr	BASEPRI, r3
 800243e:	f3bf 8f6f 	isb	sy
 8002442:	f3bf 8f4f 	dsb	sy
 8002446:	e7fe      	b.n	8002446 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <vTaskPlaceOnEventList+0x30>)
 800244a:	6819      	ldr	r1, [r3, #0]
 800244c:	3118      	adds	r1, #24
 800244e:	f7fe fe23 	bl	8001098 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002452:	4620      	mov	r0, r4
 8002454:	2101      	movs	r1, #1
}
 8002456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800245a:	f7ff bc17 	b.w	8001c8c <prvAddCurrentTaskToDelayedList>
 800245e:	bf00      	nop
 8002460:	20003c48 	.word	0x20003c48

08002464 <xTaskRemoveFromEventList>:
{
 8002464:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002466:	68c3      	ldr	r3, [r0, #12]
 8002468:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800246a:	b944      	cbnz	r4, 800247e <xTaskRemoveFromEventList+0x1a>
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	e7fe      	b.n	800247c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800247e:	f104 0518 	add.w	r5, r4, #24
 8002482:	4628      	mov	r0, r5
 8002484:	f7fe fe1f 	bl	80010c6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002488:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <xTaskRemoveFromEventList+0x6c>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	b9e3      	cbnz	r3, 80024c8 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800248e:	1d25      	adds	r5, r4, #4
 8002490:	4628      	mov	r0, r5
 8002492:	f7fe fe18 	bl	80010c6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002496:	490f      	ldr	r1, [pc, #60]	; (80024d4 <xTaskRemoveFromEventList+0x70>)
 8002498:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800249a:	6808      	ldr	r0, [r1, #0]
 800249c:	2301      	movs	r3, #1
 800249e:	4093      	lsls	r3, r2
 80024a0:	4303      	orrs	r3, r0
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <xTaskRemoveFromEventList+0x74>)
 80024a6:	2014      	movs	r0, #20
 80024a8:	4629      	mov	r1, r5
 80024aa:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80024ae:	f7fe fde7 	bl	8001080 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <xTaskRemoveFromEventList+0x78>)
 80024b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ba:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80024bc:	bf83      	ittte	hi
 80024be:	4b08      	ldrhi	r3, [pc, #32]	; (80024e0 <xTaskRemoveFromEventList+0x7c>)
 80024c0:	2001      	movhi	r0, #1
 80024c2:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 80024c4:	2000      	movls	r0, #0
}
 80024c6:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80024c8:	4629      	mov	r1, r5
 80024ca:	4806      	ldr	r0, [pc, #24]	; (80024e4 <xTaskRemoveFromEventList+0x80>)
 80024cc:	e7ef      	b.n	80024ae <xTaskRemoveFromEventList+0x4a>
 80024ce:	bf00      	nop
 80024d0:	20003cec 	.word	0x20003cec
 80024d4:	20003cf4 	.word	0x20003cf4
 80024d8:	20003c54 	.word	0x20003c54
 80024dc:	20003c48 	.word	0x20003c48
 80024e0:	20003d70 	.word	0x20003d70
 80024e4:	20003d2c 	.word	0x20003d2c

080024e8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <vTaskInternalSetTimeOutState+0x10>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80024ee:	4b03      	ldr	r3, [pc, #12]	; (80024fc <vTaskInternalSetTimeOutState+0x14>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6043      	str	r3, [r0, #4]
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20003d28 	.word	0x20003d28
 80024fc:	20003d6c 	.word	0x20003d6c

08002500 <xTaskCheckForTimeOut>:
{
 8002500:	b570      	push	{r4, r5, r6, lr}
 8002502:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8002504:	4605      	mov	r5, r0
 8002506:	b940      	cbnz	r0, 800251a <xTaskCheckForTimeOut+0x1a>
 8002508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800250c:	f383 8811 	msr	BASEPRI, r3
 8002510:	f3bf 8f6f 	isb	sy
 8002514:	f3bf 8f4f 	dsb	sy
 8002518:	e7fe      	b.n	8002518 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800251a:	b941      	cbnz	r1, 800252e <xTaskCheckForTimeOut+0x2e>
 800251c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002520:	f383 8811 	msr	BASEPRI, r3
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	e7fe      	b.n	800252c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800252e:	f7fe fe41 	bl	80011b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002534:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8002536:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	1c58      	adds	r0, r3, #1
 800253c:	d00e      	beq.n	800255c <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800253e:	480d      	ldr	r0, [pc, #52]	; (8002574 <xTaskCheckForTimeOut+0x74>)
 8002540:	682e      	ldr	r6, [r5, #0]
 8002542:	6800      	ldr	r0, [r0, #0]
 8002544:	4286      	cmp	r6, r0
 8002546:	d001      	beq.n	800254c <xTaskCheckForTimeOut+0x4c>
 8002548:	428a      	cmp	r2, r1
 800254a:	d20e      	bcs.n	800256a <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800254c:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800254e:	429a      	cmp	r2, r3
 8002550:	d209      	bcs.n	8002566 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002556:	4628      	mov	r0, r5
 8002558:	f7ff ffc6 	bl	80024e8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800255c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800255e:	f7fe fe4b 	bl	80011f8 <vPortExitCritical>
}
 8002562:	4620      	mov	r0, r4
 8002564:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800256a:	2401      	movs	r4, #1
 800256c:	e7f7      	b.n	800255e <xTaskCheckForTimeOut+0x5e>
 800256e:	bf00      	nop
 8002570:	20003d6c 	.word	0x20003d6c
 8002574:	20003d28 	.word	0x20003d28

08002578 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002578:	4b01      	ldr	r3, [pc, #4]	; (8002580 <vTaskMissedYield+0x8>)
 800257a:	2201      	movs	r2, #1
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	4770      	bx	lr
 8002580:	20003d70 	.word	0x20003d70

08002584 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002584:	4b05      	ldr	r3, [pc, #20]	; (800259c <xTaskGetSchedulerState+0x18>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b133      	cbz	r3, 8002598 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800258a:	4b05      	ldr	r3, [pc, #20]	; (80025a0 <xTaskGetSchedulerState+0x1c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002590:	bf0c      	ite	eq
 8002592:	2002      	moveq	r0, #2
 8002594:	2000      	movne	r0, #0
 8002596:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002598:	2001      	movs	r0, #1
	}
 800259a:	4770      	bx	lr
 800259c:	20003d40 	.word	0x20003d40
 80025a0:	20003cec 	.word	0x20003cec

080025a4 <xTaskPriorityInherit>:
	{
 80025a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 80025a8:	4604      	mov	r4, r0
 80025aa:	2800      	cmp	r0, #0
 80025ac:	d041      	beq.n	8002632 <xTaskPriorityInherit+0x8e>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80025ae:	4a24      	ldr	r2, [pc, #144]	; (8002640 <xTaskPriorityInherit+0x9c>)
 80025b0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80025b2:	6811      	ldr	r1, [r2, #0]
 80025b4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80025b6:	428b      	cmp	r3, r1
 80025b8:	4617      	mov	r7, r2
 80025ba:	d231      	bcs.n	8002620 <xTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80025bc:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80025be:	4d21      	ldr	r5, [pc, #132]	; (8002644 <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80025c0:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025c2:	bfa1      	itttt	ge
 80025c4:	683a      	ldrge	r2, [r7, #0]
 80025c6:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80025c8:	f1c2 0207 	rsbge	r2, r2, #7
 80025cc:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80025ce:	2614      	movs	r6, #20
 80025d0:	6942      	ldr	r2, [r0, #20]
 80025d2:	fb06 5303 	mla	r3, r6, r3, r5
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d12d      	bne.n	8002636 <xTaskPriorityInherit+0x92>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025da:	f100 0804 	add.w	r8, r0, #4
 80025de:	4640      	mov	r0, r8
 80025e0:	f7fe fd71 	bl	80010c6 <uxListRemove>
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <xTaskPriorityInherit+0xa4>)
 80025e6:	b948      	cbnz	r0, 80025fc <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80025e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80025ea:	4346      	muls	r6, r0
 80025ec:	59aa      	ldr	r2, [r5, r6]
 80025ee:	b92a      	cbnz	r2, 80025fc <xTaskPriorityInherit+0x58>
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	2101      	movs	r1, #1
 80025f4:	4081      	lsls	r1, r0
 80025f6:	ea22 0201 	bic.w	r2, r2, r1
 80025fa:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80025fc:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80025fe:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002600:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002602:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8002604:	2401      	movs	r4, #1
 8002606:	fa04 f002 	lsl.w	r0, r4, r2
 800260a:	4308      	orrs	r0, r1
 800260c:	6018      	str	r0, [r3, #0]
 800260e:	2014      	movs	r0, #20
 8002610:	4641      	mov	r1, r8
 8002612:	fb00 5002 	mla	r0, r0, r2, r5
 8002616:	f7fe fd33 	bl	8001080 <vListInsertEnd>
				xReturn = pdTRUE;
 800261a:	2001      	movs	r0, #1
	}
 800261c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8002620:	6813      	ldr	r3, [r2, #0]
 8002622:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8002624:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002626:	42a0      	cmp	r0, r4
 8002628:	bf2c      	ite	cs
 800262a:	2000      	movcs	r0, #0
 800262c:	2001      	movcc	r0, #1
 800262e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return xReturn;
 8002632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800263a:	62c3      	str	r3, [r0, #44]	; 0x2c
 800263c:	e7ed      	b.n	800261a <xTaskPriorityInherit+0x76>
 800263e:	bf00      	nop
 8002640:	20003c48 	.word	0x20003c48
 8002644:	20003c54 	.word	0x20003c54
 8002648:	20003cf4 	.word	0x20003cf4

0800264c <xTaskPriorityDisinherit>:
	{
 800264c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800264e:	4604      	mov	r4, r0
 8002650:	b908      	cbnz	r0, 8002656 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8002652:	2000      	movs	r0, #0
 8002654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002656:	4b22      	ldr	r3, [pc, #136]	; (80026e0 <xTaskPriorityDisinherit+0x94>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4298      	cmp	r0, r3
 800265c:	d008      	beq.n	8002670 <xTaskPriorityDisinherit+0x24>
 800265e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002662:	f383 8811 	msr	BASEPRI, r3
 8002666:	f3bf 8f6f 	isb	sy
 800266a:	f3bf 8f4f 	dsb	sy
 800266e:	e7fe      	b.n	800266e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002670:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002672:	b943      	cbnz	r3, 8002686 <xTaskPriorityDisinherit+0x3a>
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	e7fe      	b.n	8002684 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002686:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002688:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800268a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800268c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800268e:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002690:	d0df      	beq.n	8002652 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1dd      	bne.n	8002652 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002696:	1d05      	adds	r5, r0, #4
 8002698:	4628      	mov	r0, r5
 800269a:	f7fe fd14 	bl	80010c6 <uxListRemove>
 800269e:	4e11      	ldr	r6, [pc, #68]	; (80026e4 <xTaskPriorityDisinherit+0x98>)
 80026a0:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <xTaskPriorityDisinherit+0x9c>)
 80026a2:	b950      	cbnz	r0, 80026ba <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80026a4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80026a6:	2114      	movs	r1, #20
 80026a8:	4379      	muls	r1, r7
 80026aa:	5873      	ldr	r3, [r6, r1]
 80026ac:	b92b      	cbnz	r3, 80026ba <xTaskPriorityDisinherit+0x6e>
 80026ae:	6813      	ldr	r3, [r2, #0]
 80026b0:	2001      	movs	r0, #1
 80026b2:	40b8      	lsls	r0, r7
 80026b4:	ea23 0300 	bic.w	r3, r3, r0
 80026b8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80026ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80026bc:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026be:	f1c3 0107 	rsb	r1, r3, #7
 80026c2:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80026c4:	6811      	ldr	r1, [r2, #0]
 80026c6:	2401      	movs	r4, #1
 80026c8:	fa04 f003 	lsl.w	r0, r4, r3
 80026cc:	4308      	orrs	r0, r1
 80026ce:	6010      	str	r0, [r2, #0]
 80026d0:	2014      	movs	r0, #20
 80026d2:	fb00 6003 	mla	r0, r0, r3, r6
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fe fcd2 	bl	8001080 <vListInsertEnd>
					xReturn = pdTRUE;
 80026dc:	4620      	mov	r0, r4
	}
 80026de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026e0:	20003c48 	.word	0x20003c48
 80026e4:	20003c54 	.word	0x20003c54
 80026e8:	20003cf4 	.word	0x20003cf4

080026ec <vTaskPriorityDisinheritAfterTimeout>:
	{
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80026ee:	4604      	mov	r4, r0
 80026f0:	2800      	cmp	r0, #0
 80026f2:	d04d      	beq.n	8002790 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 80026f4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80026f6:	b942      	cbnz	r2, 800270a <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	e7fe      	b.n	8002708 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 800270a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800270c:	4299      	cmp	r1, r3
 800270e:	bf38      	it	cc
 8002710:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8002712:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002714:	428b      	cmp	r3, r1
 8002716:	d03b      	beq.n	8002790 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002718:	2a01      	cmp	r2, #1
 800271a:	d139      	bne.n	8002790 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 800271c:	4a1d      	ldr	r2, [pc, #116]	; (8002794 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	4290      	cmp	r0, r2
 8002722:	d108      	bne.n	8002736 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8002724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002728:	f383 8811 	msr	BASEPRI, r3
 800272c:	f3bf 8f6f 	isb	sy
 8002730:	f3bf 8f4f 	dsb	sy
 8002734:	e7fe      	b.n	8002734 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002736:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002738:	4d17      	ldr	r5, [pc, #92]	; (8002798 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 800273a:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800273c:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800273e:	f04f 0614 	mov.w	r6, #20
 8002742:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002744:	bfa8      	it	ge
 8002746:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800274a:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800274e:	bfa8      	it	ge
 8002750:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002752:	429a      	cmp	r2, r3
 8002754:	d11c      	bne.n	8002790 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002756:	1d07      	adds	r7, r0, #4
 8002758:	4638      	mov	r0, r7
 800275a:	f7fe fcb4 	bl	80010c6 <uxListRemove>
 800275e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002760:	4c0e      	ldr	r4, [pc, #56]	; (800279c <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8002762:	b940      	cbnz	r0, 8002776 <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002764:	4356      	muls	r6, r2
 8002766:	59ab      	ldr	r3, [r5, r6]
 8002768:	b92b      	cbnz	r3, 8002776 <vTaskPriorityDisinheritAfterTimeout+0x8a>
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	2101      	movs	r1, #1
 800276e:	4091      	lsls	r1, r2
 8002770:	ea23 0301 	bic.w	r3, r3, r1
 8002774:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 8002776:	6821      	ldr	r1, [r4, #0]
 8002778:	2301      	movs	r3, #1
 800277a:	4093      	lsls	r3, r2
 800277c:	430b      	orrs	r3, r1
 800277e:	2014      	movs	r0, #20
 8002780:	6023      	str	r3, [r4, #0]
 8002782:	4639      	mov	r1, r7
 8002784:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8002788:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 800278c:	f7fe bc78 	b.w	8001080 <vListInsertEnd>
 8002790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002792:	bf00      	nop
 8002794:	20003c48 	.word	0x20003c48
 8002798:	20003c54 	.word	0x20003c54
 800279c:	20003cf4 	.word	0x20003cf4

080027a0 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80027a0:	4b04      	ldr	r3, [pc, #16]	; (80027b4 <pvTaskIncrementMutexHeldCount+0x14>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	b11a      	cbz	r2, 80027ae <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80027a6:	6819      	ldr	r1, [r3, #0]
 80027a8:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80027aa:	3201      	adds	r2, #1
 80027ac:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80027ae:	6818      	ldr	r0, [r3, #0]
	}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20003c48 	.word	0x20003c48

080027b8 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80027b8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osThreadResume(Led01TaskHandle);
 80027ba:	4c06      	ldr	r4, [pc, #24]	; (80027d4 <StartDefaultTask+0x1c>)
	  if (semaphore01Handle != NULL)
 80027bc:	4d06      	ldr	r5, [pc, #24]	; (80027d8 <StartDefaultTask+0x20>)
	  osThreadResume(Led01TaskHandle);
 80027be:	6820      	ldr	r0, [r4, #0]
 80027c0:	f7fe fc38 	bl	8001034 <osThreadResume>
	  if (semaphore01Handle != NULL)
 80027c4:	6828      	ldr	r0, [r5, #0]
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d0f9      	beq.n	80027be <StartDefaultTask+0x6>
	  	{
	  		/* Try to obtain the semaphore for 100 ms*/
	  		if (osSemaphoreWait(semaphore01Handle, 100)==osOK)
 80027ca:	2164      	movs	r1, #100	; 0x64
 80027cc:	f7fe fbe2 	bl	8000f94 <osSemaphoreWait>
 80027d0:	e7f5      	b.n	80027be <StartDefaultTask+0x6>
 80027d2:	bf00      	nop
 80027d4:	20003d7c 	.word	0x20003d7c
 80027d8:	20003d80 	.word	0x20003d80

080027dc <vLed01Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vLed01Task */
void vLed01Task(void const * argument)
{
 80027dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vLed01Task */
  /* Infinite loop */
  for(;;)
  {
	if (semaphore01Handle != NULL)
 80027de:	4c0c      	ldr	r4, [pc, #48]	; (8002810 <vLed01Task+0x34>)
	{
		/* Try to obtain the semaphore forever */
		if (osSemaphoreWait(semaphore01Handle, osWaitForever)==osOK)
		{
			HAL_GPIO_TogglePin(GPIOD, LED1_Pin); //ORANGE
 80027e0:	4e0c      	ldr	r6, [pc, #48]	; (8002814 <vLed01Task+0x38>)
 80027e2:	4625      	mov	r5, r4
	if (semaphore01Handle != NULL)
 80027e4:	6820      	ldr	r0, [r4, #0]
 80027e6:	b900      	cbnz	r0, 80027ea <vLed01Task+0xe>
 80027e8:	e7fe      	b.n	80027e8 <vLed01Task+0xc>
		if (osSemaphoreWait(semaphore01Handle, osWaitForever)==osOK)
 80027ea:	f04f 31ff 	mov.w	r1, #4294967295
 80027ee:	f7fe fbd1 	bl	8000f94 <osSemaphoreWait>
 80027f2:	b920      	cbnz	r0, 80027fe <vLed01Task+0x22>
			HAL_GPIO_TogglePin(GPIOD, LED1_Pin); //ORANGE
 80027f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80027f8:	4630      	mov	r0, r6
 80027fa:	f7fd ffd6 	bl	80007aa <HAL_GPIO_TogglePin>
			//osDelay(1000);
		}
		osSemaphoreRelease(semaphore01Handle);
 80027fe:	6828      	ldr	r0, [r5, #0]
 8002800:	f7fe fbee 	bl	8000fe0 <osSemaphoreRelease>

		osThreadSuspend(Led01TaskHandle);
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <vLed01Task+0x3c>)
 8002806:	6818      	ldr	r0, [r3, #0]
 8002808:	f7fe fc0e 	bl	8001028 <osThreadSuspend>
 800280c:	e7ea      	b.n	80027e4 <vLed01Task+0x8>
 800280e:	bf00      	nop
 8002810:	20003d80 	.word	0x20003d80
 8002814:	40020c00 	.word	0x40020c00
 8002818:	20003d7c 	.word	0x20003d7c

0800281c <SystemClock_Config>:
{
 800281c:	b530      	push	{r4, r5, lr}
 800281e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002820:	2230      	movs	r2, #48	; 0x30
 8002822:	2100      	movs	r1, #0
 8002824:	a808      	add	r0, sp, #32
 8002826:	f000 f9c6 	bl	8002bb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800282a:	2100      	movs	r1, #0
 800282c:	2214      	movs	r2, #20
 800282e:	a803      	add	r0, sp, #12
 8002830:	f000 f9c1 	bl	8002bb6 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002834:	2400      	movs	r4, #0
 8002836:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <SystemClock_Config+0x8c>)
 8002838:	9401      	str	r4, [sp, #4]
 800283a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800283c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002848:	9301      	str	r3, [sp, #4]
 800284a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800284c:	4b17      	ldr	r3, [pc, #92]	; (80028ac <SystemClock_Config+0x90>)
 800284e:	9402      	str	r4, [sp, #8]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800285a:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800285c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002860:	9302      	str	r3, [sp, #8]
 8002862:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002864:	2301      	movs	r3, #1
 8002866:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002868:	2310      	movs	r3, #16
 800286a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 8;
 800286c:	2308      	movs	r3, #8
 800286e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002870:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002872:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002874:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002876:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002878:	2307      	movs	r3, #7
 800287a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800287c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800287e:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002880:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002882:	f7fd ffa5 	bl	80007d0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002886:	230f      	movs	r3, #15
 8002888:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800288a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800288e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002890:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002892:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002896:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002898:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800289a:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800289c:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800289e:	f7fe f947 	bl	8000b30 <HAL_RCC_ClockConfig>
}
 80028a2:	b015      	add	sp, #84	; 0x54
 80028a4:	bd30      	pop	{r4, r5, pc}
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40007000 	.word	0x40007000

080028b0 <main>:
{
 80028b0:	b500      	push	{lr}
 80028b2:	b08f      	sub	sp, #60	; 0x3c
  HAL_Init();
 80028b4:	f7fd fe14 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 80028b8:	f7ff ffb0 	bl	800281c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028bc:	2214      	movs	r2, #20
 80028be:	2100      	movs	r1, #0
 80028c0:	a809      	add	r0, sp, #36	; 0x24
 80028c2:	f000 f978 	bl	8002bb6 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028c6:	2500      	movs	r5, #0
 80028c8:	4b2c      	ldr	r3, [pc, #176]	; (800297c <main+0xcc>)
 80028ca:	9502      	str	r5, [sp, #8]
 80028cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED1_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80028ce:	482c      	ldr	r0, [pc, #176]	; (8002980 <main+0xd0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	631a      	str	r2, [r3, #48]	; 0x30
 80028d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028d8:	f002 0201 	and.w	r2, r2, #1
 80028dc:	9202      	str	r2, [sp, #8]
 80028de:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028e0:	9503      	str	r5, [sp, #12]
 80028e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028e4:	f042 0208 	orr.w	r2, r2, #8
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
 80028ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ec:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED1_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80028f0:	462a      	mov	r2, r5
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028f2:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED1_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80028f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80028f8:	2401      	movs	r4, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028fa:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|LED1_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80028fc:	f7fd ff50 	bl	80007a0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002900:	4b20      	ldr	r3, [pc, #128]	; (8002984 <main+0xd4>)
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002902:	4821      	ldr	r0, [pc, #132]	; (8002988 <main+0xd8>)
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8002904:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002906:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002908:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290a:	950b      	str	r5, [sp, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800290c:	f7fd fe68 	bl	80005e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED3_Pin|LED4_Pin;
 8002910:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002914:	a909      	add	r1, sp, #36	; 0x24
 8002916:	481a      	ldr	r0, [pc, #104]	; (8002980 <main+0xd0>)
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin|LED3_Pin|LED4_Pin;
 8002918:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800291a:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	950b      	str	r5, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800291e:	950c      	str	r5, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002920:	f7fd fe5e 	bl	80005e0 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8002924:	462a      	mov	r2, r5
 8002926:	2105      	movs	r1, #5
 8002928:	2006      	movs	r0, #6
 800292a:	f7fd fe17 	bl	800055c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800292e:	2006      	movs	r0, #6
 8002930:	f7fd fe48 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  osSemaphoreDef(semaphore01);
 8002934:	a80e      	add	r0, sp, #56	; 0x38
  semaphore01Handle = osSemaphoreCreate(osSemaphore(semaphore01), 1);
 8002936:	4621      	mov	r1, r4
  osSemaphoreDef(semaphore01);
 8002938:	f840 5d34 	str.w	r5, [r0, #-52]!
  semaphore01Handle = osSemaphoreCreate(osSemaphore(semaphore01), 1);
 800293c:	f7fe fb17 	bl	8000f6e <osSemaphoreCreate>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8002940:	4c12      	ldr	r4, [pc, #72]	; (800298c <main+0xdc>)
  semaphore01Handle = osSemaphoreCreate(osSemaphore(semaphore01), 1);
 8002942:	4b13      	ldr	r3, [pc, #76]	; (8002990 <main+0xe0>)
 8002944:	6018      	str	r0, [r3, #0]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8002946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002948:	ae04      	add	r6, sp, #16
 800294a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800294c:	f854 3b04 	ldr.w	r3, [r4], #4
 8002950:	6033      	str	r3, [r6, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002952:	4629      	mov	r1, r5
 8002954:	a804      	add	r0, sp, #16
 8002956:	f7fe faf2 	bl	8000f3e <osThreadCreate>
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <main+0xe4>)
 800295c:	6018      	str	r0, [r3, #0]
  osThreadDef(Led01Task, vLed01Task, osPriorityNormal, 0, 128);
 800295e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002960:	ae09      	add	r6, sp, #36	; 0x24
 8002962:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	6033      	str	r3, [r6, #0]
  Led01TaskHandle = osThreadCreate(osThread(Led01Task), NULL);
 8002968:	4629      	mov	r1, r5
 800296a:	a809      	add	r0, sp, #36	; 0x24
 800296c:	f7fe fae7 	bl	8000f3e <osThreadCreate>
 8002970:	4b09      	ldr	r3, [pc, #36]	; (8002998 <main+0xe8>)
 8002972:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002974:	f7fe fade 	bl	8000f34 <osKernelStart>
 8002978:	e7fe      	b.n	8002978 <main+0xc8>
 800297a:	bf00      	nop
 800297c:	40023800 	.word	0x40023800
 8002980:	40020c00 	.word	0x40020c00
 8002984:	10110000 	.word	0x10110000
 8002988:	40020000 	.word	0x40020000
 800298c:	08002be0 	.word	0x08002be0
 8002990:	20003d80 	.word	0x20003d80
 8002994:	20003d78 	.word	0x20003d78
 8002998:	20003d7c 	.word	0x20003d7c

0800299c <HAL_GPIO_EXTI_Callback>:
 {
 800299c:	b508      	push	{r3, lr}
	 osSemaphoreRelease(semaphore01Handle);
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <HAL_GPIO_EXTI_Callback+0x18>)
 80029a0:	6818      	ldr	r0, [r3, #0]
 80029a2:	f7fe fb1d 	bl	8000fe0 <osSemaphoreRelease>
	 HAL_GPIO_TogglePin(GPIOD, LED2_Pin); //GREEN
 80029a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029aa:	4803      	ldr	r0, [pc, #12]	; (80029b8 <HAL_GPIO_EXTI_Callback+0x1c>)
 }
 80029ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	 HAL_GPIO_TogglePin(GPIOD, LED2_Pin); //GREEN
 80029b0:	f7fd befb 	b.w	80007aa <HAL_GPIO_TogglePin>
 80029b4:	20003d80 	.word	0x20003d80
 80029b8:	40020c00 	.word	0x40020c00

080029bc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80029bc:	6803      	ldr	r3, [r0, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c2:	d101      	bne.n	80029c8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80029c4:	f7fd bda6 	b.w	8000514 <HAL_IncTick>
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029cc:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <HAL_MspInit+0x50>)
 80029d0:	2400      	movs	r4, #0
 80029d2:	9400      	str	r4, [sp, #0]
 80029d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029da:	645a      	str	r2, [r3, #68]	; 0x44
 80029dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029de:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80029e2:	9200      	str	r2, [sp, #0]
 80029e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	9401      	str	r4, [sp, #4]
 80029e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029ee:	641a      	str	r2, [r3, #64]	; 0x40
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f6:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029f8:	4622      	mov	r2, r4
 80029fa:	210f      	movs	r1, #15
 80029fc:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a02:	f7fd fdab 	bl	800055c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002a06:	2105      	movs	r1, #5
 8002a08:	4608      	mov	r0, r1
 8002a0a:	4622      	mov	r2, r4
 8002a0c:	f7fd fda6 	bl	800055c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002a10:	2005      	movs	r0, #5
 8002a12:	f7fd fdd7 	bl	80005c4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a16:	b002      	add	sp, #8
 8002a18:	bd10      	pop	{r4, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800

08002a20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a20:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8002a22:	4601      	mov	r1, r0
{
 8002a24:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8002a26:	2200      	movs	r2, #0
 8002a28:	201c      	movs	r0, #28
 8002a2a:	f7fd fd97 	bl	800055c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 8002a2e:	201c      	movs	r0, #28
 8002a30:	f7fd fdc8 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002a34:	2500      	movs	r5, #0
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_InitTick+0x6c>)
 8002a38:	9502      	str	r5, [sp, #8]
 8002a3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002a3c:	4c14      	ldr	r4, [pc, #80]	; (8002a90 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3e:	f042 0201 	orr.w	r2, r2, #1
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a4c:	a901      	add	r1, sp, #4
 8002a4e:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002a50:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a52:	f7fe f917 	bl	8000c84 <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a56:	f7fe f905 	bl	8000c64 <HAL_RCC_GetPCLK1Freq>
  htim2.Instance = TIM2;
 8002a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a5e:	6023      	str	r3, [r4, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8002a60:	f240 33e7 	movw	r3, #999	; 0x3e7
 8002a64:	60e3      	str	r3, [r4, #12]
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002a66:	0040      	lsls	r0, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002a68:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_InitTick+0x74>)
 8002a6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002a6e:	3801      	subs	r0, #1
  htim2.Init.Prescaler = uwPrescalerValue;
 8002a70:	6060      	str	r0, [r4, #4]
  htim2.Init.ClockDivision = 0;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002a72:	4620      	mov	r0, r4
  htim2.Init.ClockDivision = 0;
 8002a74:	6125      	str	r5, [r4, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a76:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8002a78:	f7fe fa40 	bl	8000efc <HAL_TIM_Base_Init>
 8002a7c:	b920      	cbnz	r0, 8002a88 <HAL_InitTick+0x68>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8002a7e:	4620      	mov	r0, r4
 8002a80:	f7fe f91f 	bl	8000cc2 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8002a84:	b009      	add	sp, #36	; 0x24
 8002a86:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8002a88:	2001      	movs	r0, #1
 8002a8a:	e7fb      	b.n	8002a84 <HAL_InitTick+0x64>
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	20003d84 	.word	0x20003d84
 8002a94:	000f4240 	.word	0x000f4240

08002a98 <NMI_Handler>:
 8002a98:	4770      	bx	lr

08002a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a9a:	e7fe      	b.n	8002a9a <HardFault_Handler>

08002a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a9c:	e7fe      	b.n	8002a9c <MemManage_Handler>

08002a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a9e:	e7fe      	b.n	8002a9e <BusFault_Handler>

08002aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002aa0:	e7fe      	b.n	8002aa0 <UsageFault_Handler>

08002aa2 <DebugMon_Handler>:
 8002aa2:	4770      	bx	lr

08002aa4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002aa4:	4770      	bx	lr

08002aa6 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002aa6:	2001      	movs	r0, #1
 8002aa8:	f7fd be86 	b.w	80007b8 <HAL_GPIO_EXTI_IRQHandler>

08002aac <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002aac:	4801      	ldr	r0, [pc, #4]	; (8002ab4 <TIM2_IRQHandler+0x8>)
 8002aae:	f7fe b91c 	b.w	8000cea <HAL_TIM_IRQHandler>
 8002ab2:	bf00      	nop
 8002ab4:	20003d84 	.word	0x20003d84

08002ab8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ab8:	490f      	ldr	r1, [pc, #60]	; (8002af8 <SystemInit+0x40>)
 8002aba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002abe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <SystemInit+0x44>)
 8002ac8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002aca:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8002acc:	f042 0201 	orr.w	r2, r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8002ad2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002ada:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ade:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ae0:	4a07      	ldr	r2, [pc, #28]	; (8002b00 <SystemInit+0x48>)
 8002ae2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002aec:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002aee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002af2:	608b      	str	r3, [r1, #8]
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	e000ed00 	.word	0xe000ed00
 8002afc:	40023800 	.word	0x40023800
 8002b00:	24003010 	.word	0x24003010

08002b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b3c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b08:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b0a:	e003      	b.n	8002b14 <LoopCopyDataInit>

08002b0c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b0c:	4b0c      	ldr	r3, [pc, #48]	; (8002b40 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b0e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b10:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b12:	3104      	adds	r1, #4

08002b14 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b14:	480b      	ldr	r0, [pc, #44]	; (8002b44 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b18:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b1a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b1c:	d3f6      	bcc.n	8002b0c <CopyDataInit>
  ldr  r2, =_sbss
 8002b1e:	4a0b      	ldr	r2, [pc, #44]	; (8002b4c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b20:	e002      	b.n	8002b28 <LoopFillZerobss>

08002b22 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b22:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b24:	f842 3b04 	str.w	r3, [r2], #4

08002b28 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b28:	4b09      	ldr	r3, [pc, #36]	; (8002b50 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b2a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b2c:	d3f9      	bcc.n	8002b22 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b2e:	f7ff ffc3 	bl	8002ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b32:	f000 f811 	bl	8002b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b36:	f7ff febb 	bl	80028b0 <main>
  bx  lr    
 8002b3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b3c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b40:	08002c4c 	.word	0x08002c4c
  ldr  r0, =_sdata
 8002b44:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b48:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8002b4c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002b50:	20003dc4 	.word	0x20003dc4

08002b54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b54:	e7fe      	b.n	8002b54 <ADC_IRQHandler>
	...

08002b58 <__libc_init_array>:
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	4e0d      	ldr	r6, [pc, #52]	; (8002b90 <__libc_init_array+0x38>)
 8002b5c:	4c0d      	ldr	r4, [pc, #52]	; (8002b94 <__libc_init_array+0x3c>)
 8002b5e:	1ba4      	subs	r4, r4, r6
 8002b60:	10a4      	asrs	r4, r4, #2
 8002b62:	2500      	movs	r5, #0
 8002b64:	42a5      	cmp	r5, r4
 8002b66:	d109      	bne.n	8002b7c <__libc_init_array+0x24>
 8002b68:	4e0b      	ldr	r6, [pc, #44]	; (8002b98 <__libc_init_array+0x40>)
 8002b6a:	4c0c      	ldr	r4, [pc, #48]	; (8002b9c <__libc_init_array+0x44>)
 8002b6c:	f000 f82c 	bl	8002bc8 <_init>
 8002b70:	1ba4      	subs	r4, r4, r6
 8002b72:	10a4      	asrs	r4, r4, #2
 8002b74:	2500      	movs	r5, #0
 8002b76:	42a5      	cmp	r5, r4
 8002b78:	d105      	bne.n	8002b86 <__libc_init_array+0x2e>
 8002b7a:	bd70      	pop	{r4, r5, r6, pc}
 8002b7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b80:	4798      	blx	r3
 8002b82:	3501      	adds	r5, #1
 8002b84:	e7ee      	b.n	8002b64 <__libc_init_array+0xc>
 8002b86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b8a:	4798      	blx	r3
 8002b8c:	3501      	adds	r5, #1
 8002b8e:	e7f2      	b.n	8002b76 <__libc_init_array+0x1e>
 8002b90:	08002c44 	.word	0x08002c44
 8002b94:	08002c44 	.word	0x08002c44
 8002b98:	08002c44 	.word	0x08002c44
 8002b9c:	08002c48 	.word	0x08002c48

08002ba0 <memcpy>:
 8002ba0:	b510      	push	{r4, lr}
 8002ba2:	1e43      	subs	r3, r0, #1
 8002ba4:	440a      	add	r2, r1
 8002ba6:	4291      	cmp	r1, r2
 8002ba8:	d100      	bne.n	8002bac <memcpy+0xc>
 8002baa:	bd10      	pop	{r4, pc}
 8002bac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002bb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002bb4:	e7f7      	b.n	8002ba6 <memcpy+0x6>

08002bb6 <memset>:
 8002bb6:	4402      	add	r2, r0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d100      	bne.n	8002bc0 <memset+0xa>
 8002bbe:	4770      	bx	lr
 8002bc0:	f803 1b01 	strb.w	r1, [r3], #1
 8002bc4:	e7f9      	b.n	8002bba <memset+0x4>
	...

08002bc8 <_init>:
 8002bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bca:	bf00      	nop
 8002bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bce:	bc08      	pop	{r3}
 8002bd0:	469e      	mov	lr, r3
 8002bd2:	4770      	bx	lr

08002bd4 <_fini>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	bf00      	nop
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr
